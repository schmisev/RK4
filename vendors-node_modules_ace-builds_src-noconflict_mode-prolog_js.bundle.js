/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkrobot_karol_4"] = self["webpackChunkrobot_karol_4"] || []).push([["vendors-node_modules_ace-builds_src-noconflict_mode-prolog_js"],{

/***/ "./node_modules/ace-builds/src-noconflict/mode-prolog.js":
/*!***************************************************************!*\
  !*** ./node_modules/ace-builds/src-noconflict/mode-prolog.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nace.define(\"ace/mode/prolog_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module){/* This file was autogenerated from https://raw.github.com/stephenroller/prolog-tmbundle/master/Syntaxes/Prolog.tmLanguage (uuid: ) */\n\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\nvar PrologHighlightRules = function () {\n    this.$rules = { start: [{ include: '#comment' },\n            { include: '#basic_fact' },\n            { include: '#rule' },\n            { include: '#directive' },\n            { include: '#fact' }],\n        '#atom': [{ token: 'constant.other.atom.prolog',\n                regex: '\\\\b[a-z][a-zA-Z0-9_]*\\\\b' },\n            { token: 'constant.numeric.prolog',\n                regex: '-?\\\\d+(?:\\\\.\\\\d+)?' },\n            { include: '#string' }],\n        '#basic_elem': [{ include: '#comment' },\n            { include: '#statement' },\n            { include: '#constants' },\n            { include: '#operators' },\n            { include: '#builtins' },\n            { include: '#list' },\n            { include: '#atom' },\n            { include: '#variable' }],\n        '#basic_fact': [{ token: ['entity.name.function.fact.basic.prolog',\n                    'punctuation.end.fact.basic.prolog'],\n                regex: '([a-z]\\\\w*)(\\\\.)' }],\n        '#builtins': [{ token: 'support.function.builtin.prolog',\n                regex: '\\\\b(?:abolish|abort|ancestors|arg|ascii|assert[az]|atom(?:ic)?|body|char|close|conc|concat|consult|define|definition|dynamic|dump|fail|file|free|free_proc|functor|getc|goal|halt|head|head|integer|length|listing|match_args|member|next_clause|nl|nonvar|nth|number|cvars|nvars|offset|op|print?|prompt|putc|quoted|ratom|read|redefine|rename|retract(?:all)?|see|seeing|seen|skip|spy|statistics|system|tab|tell|telling|term|time|told|univ|unlink_clause|unspy_predicate|var|write)\\\\b' }],\n        '#comment': [{ token: ['punctuation.definition.comment.prolog',\n                    'comment.line.percentage.prolog'],\n                regex: '(%)(.*$)' },\n            { token: 'punctuation.definition.comment.prolog',\n                regex: '/\\\\*',\n                push: [{ token: 'punctuation.definition.comment.prolog',\n                        regex: '\\\\*/',\n                        next: 'pop' },\n                    { defaultToken: 'comment.block.prolog' }] }],\n        '#constants': [{ token: 'constant.language.prolog',\n                regex: '\\\\b(?:true|false|yes|no)\\\\b' }],\n        '#directive': [{ token: 'keyword.operator.directive.prolog',\n                regex: ':-',\n                push: [{ token: 'meta.directive.prolog', regex: '\\\\.', next: 'pop' },\n                    { include: '#comment' },\n                    { include: '#statement' },\n                    { defaultToken: 'meta.directive.prolog' }] }],\n        '#expr': [{ include: '#comments' },\n            { token: 'meta.expression.prolog',\n                regex: '\\\\(',\n                push: [{ token: 'meta.expression.prolog', regex: '\\\\)', next: 'pop' },\n                    { include: '#expr' },\n                    { defaultToken: 'meta.expression.prolog' }] },\n            { token: 'keyword.control.cutoff.prolog', regex: '!' },\n            { token: 'punctuation.control.and.prolog', regex: ',' },\n            { token: 'punctuation.control.or.prolog', regex: ';' },\n            { include: '#basic_elem' }],\n        '#fact': [{ token: ['entity.name.function.fact.prolog',\n                    'punctuation.begin.fact.parameters.prolog'],\n                regex: '([a-z]\\\\w*)(\\\\()(?!.*:-)',\n                push: [{ token: ['punctuation.end.fact.parameters.prolog',\n                            'punctuation.end.fact.prolog'],\n                        regex: '(\\\\))(\\\\.?)',\n                        next: 'pop' },\n                    { include: '#parameter' },\n                    { defaultToken: 'meta.fact.prolog' }] }],\n        '#list': [{ token: 'punctuation.begin.list.prolog',\n                regex: '\\\\[(?=.*\\\\])',\n                push: [{ token: 'punctuation.end.list.prolog',\n                        regex: '\\\\]',\n                        next: 'pop' },\n                    { include: '#comment' },\n                    { token: 'punctuation.separator.list.prolog', regex: ',' },\n                    { token: 'punctuation.concat.list.prolog',\n                        regex: '\\\\|',\n                        push: [{ token: 'meta.list.concat.prolog',\n                                regex: '(?=\\\\s*\\\\])',\n                                next: 'pop' },\n                            { include: '#basic_elem' },\n                            { defaultToken: 'meta.list.concat.prolog' }] },\n                    { include: '#basic_elem' },\n                    { defaultToken: 'meta.list.prolog' }] }],\n        '#operators': [{ token: 'keyword.operator.prolog',\n                regex: '\\\\\\\\\\\\+|\\\\bnot\\\\b|\\\\bis\\\\b|->|[><]|[><\\\\\\\\:=]?=|(?:=\\\\\\\\|\\\\\\\\=)=' }],\n        '#parameter': [{ token: 'variable.language.anonymous.prolog',\n                regex: '\\\\b_\\\\b' },\n            { token: 'variable.parameter.prolog',\n                regex: '\\\\b[A-Z_]\\\\w*\\\\b' },\n            { token: 'punctuation.separator.parameters.prolog', regex: ',' },\n            { include: '#basic_elem' },\n            { token: 'text', regex: '[^\\\\s]' }],\n        '#rule': [{ token: 'meta.rule.prolog',\n                regex: '(?=[a-z]\\\\w*.*:-)',\n                push: [{ token: 'punctuation.rule.end.prolog',\n                        regex: '\\\\.',\n                        next: 'pop' },\n                    { token: 'meta.rule.signature.prolog',\n                        regex: '(?=[a-z]\\\\w*.*:-)',\n                        push: [{ token: 'meta.rule.signature.prolog',\n                                regex: '(?=:-)',\n                                next: 'pop' },\n                            { token: 'entity.name.function.rule.prolog',\n                                regex: '[a-z]\\\\w*(?=\\\\(|\\\\s*:-)' },\n                            { token: 'punctuation.rule.parameters.begin.prolog',\n                                regex: '\\\\(',\n                                push: [{ token: 'punctuation.rule.parameters.end.prolog',\n                                        regex: '\\\\)',\n                                        next: 'pop' },\n                                    { include: '#parameter' },\n                                    { defaultToken: 'meta.rule.parameters.prolog' }] },\n                            { defaultToken: 'meta.rule.signature.prolog' }] },\n                    { token: 'keyword.operator.definition.prolog',\n                        regex: ':-',\n                        push: [{ token: 'meta.rule.definition.prolog',\n                                regex: '(?=\\\\.)',\n                                next: 'pop' },\n                            { include: '#comment' },\n                            { include: '#expr' },\n                            { defaultToken: 'meta.rule.definition.prolog' }] },\n                    { defaultToken: 'meta.rule.prolog' }] }],\n        '#statement': [{ token: 'meta.statement.prolog',\n                regex: '(?=[a-z]\\\\w*\\\\()',\n                push: [{ token: 'punctuation.end.statement.parameters.prolog',\n                        regex: '\\\\)',\n                        next: 'pop' },\n                    { include: '#builtins' },\n                    { include: '#atom' },\n                    { token: 'punctuation.begin.statement.parameters.prolog',\n                        regex: '\\\\(',\n                        push: [{ token: 'meta.statement.parameters.prolog',\n                                regex: '(?=\\\\))',\n                                next: 'pop' },\n                            { token: 'punctuation.separator.statement.prolog', regex: ',' },\n                            { include: '#basic_elem' },\n                            { defaultToken: 'meta.statement.parameters.prolog' }] },\n                    { defaultToken: 'meta.statement.prolog' }] }],\n        '#string': [{ token: 'punctuation.definition.string.begin.prolog',\n                regex: '\\'',\n                push: [{ token: 'punctuation.definition.string.end.prolog',\n                        regex: '\\'',\n                        next: 'pop' },\n                    { token: 'constant.character.escape.prolog', regex: '\\\\\\\\.' },\n                    { token: 'constant.character.escape.quote.prolog',\n                        regex: '\\'\\'' },\n                    { defaultToken: 'string.quoted.single.prolog' }] }],\n        '#variable': [{ token: 'variable.language.anonymous.prolog',\n                regex: '\\\\b_\\\\b' },\n            { token: 'variable.other.prolog',\n                regex: '\\\\b[A-Z_][a-zA-Z0-9_]*\\\\b' }] };\n    this.normalizeRules();\n};\nPrologHighlightRules.metaData = { fileTypes: ['plg', 'prolog'],\n    foldingStartMarker: '(%\\\\s*region \\\\w*)|([a-z]\\\\w*.*:- ?)',\n    foldingStopMarker: '(%\\\\s*end(\\\\s*region)?)|(?=\\\\.)',\n    keyEquivalent: '^~P',\n    name: 'Prolog',\n    scopeName: 'source.prolog' };\noop.inherits(PrologHighlightRules, TextHighlightRules);\nexports.PrologHighlightRules = PrologHighlightRules;\n\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\nvar FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n        this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n(function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n        var line = session.getLine(row);\n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n        return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                }\n                else if (foldStyle != \"all\")\n                    range = null;\n            }\n            return range;\n        }\n        if (foldStyle === \"markbegin\")\n            return;\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    this.getSectionRange = function (session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                }\n                else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                }\n                else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m)\n                continue;\n            if (m[1])\n                depth--;\n            else\n                depth++;\n            if (!depth)\n                break;\n        }\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/prolog\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/prolog_highlight_rules\",\"ace/mode/folding/cstyle\"], function(require, exports, module){/*\n  THIS FILE WAS AUTOGENERATED BY mode.tmpl.js\n*/\n\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar PrologHighlightRules = require(\"./prolog_highlight_rules\").PrologHighlightRules;\nvar FoldMode = require(\"./folding/cstyle\").FoldMode;\nvar Mode = function () {\n    this.HighlightRules = PrologHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n(function () {\n    this.lineCommentStart = \"%\";\n    this.blockComment = { start: \"/*\", end: \"*/\" };\n    this.$id = \"ace/mode/prolog\";\n}).call(Mode.prototype);\nexports.Mode = Mode;\n\n});                (function() {\n                    ace.require([\"ace/mode/prolog\"], function(m) {\n                        if ( true && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            \n\n//# sourceURL=webpack://robot-karol-4/./node_modules/ace-builds/src-noconflict/mode-prolog.js?");

/***/ })

}]);