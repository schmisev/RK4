/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkrobot_karol_4"] = self["webpackChunkrobot_karol_4"] || []).push([["vendors-node_modules_ace-builds_src-noconflict_mode-ion_js"],{

/***/ "./node_modules/ace-builds/src-noconflict/mode-ion.js":
/*!************************************************************!*\
  !*** ./node_modules/ace-builds/src-noconflict/mode-ion.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nace.define(\"ace/mode/ion_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module){/*\n  THIS FILE WAS GENERATED BY 'ligand' USING 'mode_highlight_rules.js'\n*/\n\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\nvar IonHighlightRules = function () {\n    var k_keywords_bool = \"TRUE|FALSE\";\n    var k_bool = k_keywords_bool;\n    var k_keywords_null = \"NULL.NULL|NULL.BOOL|NULL.INT|NULL.FLOAT|NULL.DECIMAL|NULL.TIMESTAMP|NULL.STRING|NULL.SYMBOL|NULL.BLOB|NULL.CLOB|\"\n        + \"NULL.STRUCT|NULL.LIST|NULL.SEXP|NULL\";\n    var k_null = k_keywords_null;\n    var keywordMapper = this.createKeywordMapper({\n        \"constant.language.bool.ion\": k_bool,\n        \"constant.language.null.ion\": k_null\n    }, \"constant.other.symbol.identifier.ion\", true);\n    var keywordMapperRule = {\n        token: keywordMapper,\n        regex: \"\\\\b\\\\w+(?:\\\\.\\\\w+)?\\\\b\"\n    };\n    this.$rules = {\n        \"start\": [\n            {\n                \"include\": \"value\"\n            }\n        ],\n        \"value\": [\n            {\n                \"include\": \"whitespace\"\n            },\n            {\n                \"include\": \"comment\"\n            },\n            {\n                \"include\": \"annotation\"\n            },\n            {\n                \"include\": \"string\"\n            },\n            {\n                \"include\": \"number\"\n            },\n            {\n                \"include\": \"keywords\"\n            },\n            {\n                \"include\": \"symbol\"\n            },\n            {\n                \"include\": \"clob\"\n            },\n            {\n                \"include\": \"blob\"\n            },\n            {\n                \"include\": \"struct\"\n            },\n            {\n                \"include\": \"list\"\n            },\n            {\n                \"include\": \"sexp\"\n            }\n        ],\n        \"sexp\": [\n            {\n                \"token\": \"punctuation.definition.sexp.begin.ion\",\n                \"regex\": \"\\\\(\",\n                \"push\": [\n                    {\n                        \"token\": \"punctuation.definition.sexp.end.ion\",\n                        \"regex\": \"\\\\)\",\n                        \"next\": \"pop\"\n                    },\n                    {\n                        \"include\": \"comment\"\n                    },\n                    {\n                        \"include\": \"value\"\n                    },\n                    {\n                        \"token\": \"storage.type.symbol.operator.ion\",\n                        \"regex\": \"[\\\\!\\\\#\\\\%\\\\&\\\\*\\\\+\\\\-\\\\./\\\\;\\\\<\\\\=\\\\>\\\\?\\\\@\\\\^\\\\`\\\\|\\\\~]+\"\n                    }\n                ]\n            }\n        ],\n        \"comment\": [\n            {\n                \"token\": \"comment.line.ion\",\n                \"regex\": \"//[^\\\\n]*\"\n            },\n            {\n                \"token\": \"comment.block.ion\",\n                \"regex\": \"/\\\\*\",\n                \"push\": [\n                    {\n                        \"token\": \"comment.block.ion\",\n                        \"regex\": \"[*]/\",\n                        \"next\": \"pop\"\n                    },\n                    {\n                        \"token\": \"comment.block.ion\",\n                        \"regex\": \"[^*/]+\"\n                    },\n                    {\n                        \"token\": \"comment.block.ion\",\n                        \"regex\": \"[*/]+\"\n                    }\n                ]\n            }\n        ],\n        \"list\": [\n            {\n                \"token\": \"punctuation.definition.list.begin.ion\",\n                \"regex\": \"\\\\[\",\n                \"push\": [\n                    {\n                        \"token\": \"punctuation.definition.list.end.ion\",\n                        \"regex\": \"\\\\]\",\n                        \"next\": \"pop\"\n                    },\n                    {\n                        \"include\": \"comment\"\n                    },\n                    {\n                        \"include\": \"value\"\n                    },\n                    {\n                        \"token\": \"punctuation.definition.list.separator.ion\",\n                        \"regex\": \",\"\n                    }\n                ]\n            }\n        ],\n        \"struct\": [\n            {\n                \"token\": \"punctuation.definition.struct.begin.ion\",\n                \"regex\": \"\\\\{\",\n                \"push\": [\n                    {\n                        \"token\": \"punctuation.definition.struct.end.ion\",\n                        \"regex\": \"\\\\}\",\n                        \"next\": \"pop\"\n                    },\n                    {\n                        \"include\": \"comment\"\n                    },\n                    {\n                        \"include\": \"value\"\n                    },\n                    {\n                        \"token\": \"punctuation.definition.struct.separator.ion\",\n                        \"regex\": \",|:\"\n                    }\n                ]\n            }\n        ],\n        \"blob\": [\n            {\n                \"token\": [\n                    \"punctuation.definition.blob.begin.ion\",\n                    \"string.other.blob.ion\",\n                    \"punctuation.definition.blob.end.ion\"\n                ],\n                \"regex\": \"(\\\\{\\\\{)([^\\\"]*)(\\\\}\\\\})\"\n            }\n        ],\n        \"clob\": [\n            {\n                \"token\": [\n                    \"punctuation.definition.clob.begin.ion\",\n                    \"string.other.clob.ion\",\n                    \"punctuation.definition.clob.end.ion\"\n                ],\n                \"regex\": \"(\\\\{\\\\{)(\\\"[^\\\"]*\\\")(\\\\}\\\\})\"\n            }\n        ],\n        \"symbol\": [\n            {\n                \"token\": \"storage.type.symbol.quoted.ion\",\n                \"regex\": \"(['])((?:(?:\\\\\\\\')|(?:[^']))*?)(['])\"\n            },\n            {\n                \"token\": \"storage.type.symbol.identifier.ion\",\n                \"regex\": \"[\\\\$_a-zA-Z][\\\\$_a-zA-Z0-9]*\"\n            }\n        ],\n        \"number\": [\n            {\n                \"token\": \"constant.numeric.timestamp.ion\",\n                \"regex\": \"\\\\d{4}(?:-\\\\d{2})?(?:-\\\\d{2})?T(?:\\\\d{2}:\\\\d{2})(?::\\\\d{2})?(?:\\\\.\\\\d+)?(?:Z|[-+]\\\\d{2}:\\\\d{2})?\"\n            },\n            {\n                \"token\": \"constant.numeric.timestamp.ion\",\n                \"regex\": \"\\\\d{4}-\\\\d{2}-\\\\d{2}T?\"\n            },\n            {\n                \"token\": \"constant.numeric.integer.binary.ion\",\n                \"regex\": \"-?0[bB][01](?:_?[01])*\"\n            },\n            {\n                \"token\": \"constant.numeric.integer.hex.ion\",\n                \"regex\": \"-?0[xX][0-9a-fA-F](?:_?[0-9a-fA-F])*\"\n            },\n            {\n                \"token\": \"constant.numeric.float.ion\",\n                \"regex\": \"-?(?:0|[1-9](?:_?\\\\d)*)(?:\\\\.(?:\\\\d(?:_?\\\\d)*)?)?(?:[eE][+-]?\\\\d+)\"\n            },\n            {\n                \"token\": \"constant.numeric.float.ion\",\n                \"regex\": \"(?:[-+]inf)|(?:nan)\"\n            },\n            {\n                \"token\": \"constant.numeric.decimal.ion\",\n                \"regex\": \"-?(?:0|[1-9](?:_?\\\\d)*)(?:(?:(?:\\\\.(?:\\\\d(?:_?\\\\d)*)?)(?:[dD][+-]?\\\\d+)|\\\\.(?:\\\\d(?:_?\\\\d)*)?)|(?:[dD][+-]?\\\\d+))\"\n            },\n            {\n                \"token\": \"constant.numeric.integer.ion\",\n                \"regex\": \"-?(?:0|[1-9](?:_?\\\\d)*)\"\n            }\n        ],\n        \"string\": [\n            {\n                \"token\": [\n                    \"punctuation.definition.string.begin.ion\",\n                    \"string.quoted.double.ion\",\n                    \"punctuation.definition.string.end.ion\"\n                ],\n                \"regex\": \"([\\\"])((?:(?:\\\\\\\\\\\")|(?:[^\\\"]))*?)([\\\"])\"\n            },\n            {\n                \"token\": \"punctuation.definition.string.begin.ion\",\n                \"regex\": \"'{3}\",\n                \"push\": [\n                    {\n                        \"token\": \"punctuation.definition.string.end.ion\",\n                        \"regex\": \"'{3}\",\n                        \"next\": \"pop\"\n                    },\n                    {\n                        \"token\": \"string.quoted.triple.ion\",\n                        \"regex\": \"(?:\\\\\\\\'|[^'])+\"\n                    },\n                    {\n                        \"token\": \"string.quoted.triple.ion\",\n                        \"regex\": \"'\"\n                    }\n                ]\n            }\n        ],\n        \"annotation\": [\n            {\n                \"token\": [\n                    \"variable.language.annotation.ion\",\n                    \"punctuation.definition.annotation.ion\"\n                ],\n                \"regex\": /('(?:[^'\\\\]|\\\\.)*')\\s*(::)/\n            },\n            {\n                \"token\": [\n                    \"variable.language.annotation.ion\",\n                    \"punctuation.definition.annotation.ion\"\n                ],\n                \"regex\": \"([\\\\$_a-zA-Z][\\\\$_a-zA-Z0-9]*)\\\\s*(::)\"\n            }\n        ],\n        \"whitespace\": [\n            {\n                \"token\": \"text.ion\",\n                \"regex\": \"\\\\s+\"\n            }\n        ]\n    };\n    this.$rules[\"keywords\"] = [keywordMapperRule];\n    this.normalizeRules();\n};\noop.inherits(IonHighlightRules, TextHighlightRules);\nexports.IonHighlightRules = IonHighlightRules;\n\n});\n\nace.define(\"ace/mode/matching_brace_outdent\",[\"require\",\"exports\",\"module\",\"ace/range\"], function(require, exports, module){\"use strict\";\nvar Range = require(\"../range\").Range;\nvar MatchingBraceOutdent = function () { };\n(function () {\n    this.checkOutdent = function (line, input) {\n        if (!/^\\s+$/.test(line))\n            return false;\n        return /^\\s*\\}/.test(input);\n    };\n    this.autoOutdent = function (doc, row) {\n        var line = doc.getLine(row);\n        var match = line.match(/^(\\s*\\})/);\n        if (!match)\n            return 0;\n        var column = match[1].length;\n        var openBracePos = doc.findMatchingBracket({ row: row, column: column });\n        if (!openBracePos || openBracePos.row == row)\n            return 0;\n        var indent = this.$getIndent(doc.getLine(openBracePos.row));\n        doc.replace(new Range(row, 0, row, column - 1), indent);\n    };\n    this.$getIndent = function (line) {\n        return line.match(/^\\s*/)[0];\n    };\n}).call(MatchingBraceOutdent.prototype);\nexports.MatchingBraceOutdent = MatchingBraceOutdent;\n\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\nvar FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n        this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n(function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n        var line = session.getLine(row);\n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n        return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                }\n                else if (foldStyle != \"all\")\n                    range = null;\n            }\n            return range;\n        }\n        if (foldStyle === \"markbegin\")\n            return;\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    this.getSectionRange = function (session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                }\n                else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                }\n                else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m)\n                continue;\n            if (m[1])\n                depth--;\n            else\n                depth++;\n            if (!depth)\n                break;\n        }\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/ion\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/ion_highlight_rules\",\"ace/mode/matching_brace_outdent\",\"ace/mode/folding/cstyle\"], function(require, exports, module){/*\n  THIS FILE WAS GENERATED BY 'ligand' USING 'mode.js'\n*/\n\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar HighlightRules = require(\"./ion_highlight_rules\").IonHighlightRules;\nvar MatchingBraceOutdent = require(\"./matching_brace_outdent\").MatchingBraceOutdent;\nvar CStyleFoldMode = require(\"./folding/cstyle\").FoldMode;\nvar Mode = function () {\n    this.HighlightRules = HighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n    this.$behaviour = this.$defaultBehaviour;\n    this.foldingRules = new CStyleFoldMode();\n};\noop.inherits(Mode, TextMode);\n(function () {\n    this.lineCommentStart = \"//\";\n    this.blockComment = {\n        start: \"/*\",\n        end: \"*/\"\n    };\n    this.getNextLineIndent = function (state, line, tab) {\n        var indent = this.$getIndent(line);\n        if (state == \"start\") {\n            var match = line.match(/^.*[\\{\\(\\[]\\s*$/);\n            if (match) {\n                indent += tab;\n            }\n        }\n        return indent;\n    };\n    this.checkOutdent = function (state, line, input) {\n        return this.$outdent.checkOutdent(line, input);\n    };\n    this.autoOutdent = function (state, doc, row) {\n        this.$outdent.autoOutdent(doc, row);\n    };\n    this.$id = \"ace/mode/ion\";\n}).call(Mode.prototype);\nexports.Mode = Mode;\n\n});                (function() {\n                    ace.require([\"ace/mode/ion\"], function(m) {\n                        if ( true && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            \n\n//# sourceURL=webpack://robot-karol-4/./node_modules/ace-builds/src-noconflict/mode-ion.js?");

/***/ })

}]);