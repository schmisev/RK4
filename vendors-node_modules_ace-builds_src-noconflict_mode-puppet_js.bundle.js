/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkrobot_karol_4"] = self["webpackChunkrobot_karol_4"] || []).push([["vendors-node_modules_ace-builds_src-noconflict_mode-puppet_js"],{

/***/ "./node_modules/ace-builds/src-noconflict/mode-puppet.js":
/*!***************************************************************!*\
  !*** ./node_modules/ace-builds/src-noconflict/mode-puppet.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nace.define(\"ace/mode/puppet_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\nvar PuppetHighlightRules = function () {\n    this.$rules = {\n        \"start\": [\n            {\n                token: ['keyword.type.puppet', 'constant.class.puppet', 'keyword.inherits.puppet', 'constant.class.puppet'],\n                regex: \"^\\\\s*(class)(\\\\s+(?:[-_A-Za-z0-9\\\".]+::)*[-_A-Za-z0-9\\\".]+\\\\s*)(?:(inherits\\\\s*)(\\\\s+(?:[-_A-Za-z0-9\\\".]+::)*[-_A-Za-z0-9\\\".]+\\\\s*))?\"\n            },\n            {\n                token: ['storage.function.puppet', 'name.function.puppet', 'punctuation.lpar'],\n                regex: \"(^\\\\s*define)(\\\\s+[a-zA-Z0-9_:]+\\\\s*)(\\\\()\",\n                push: [{\n                        token: 'punctuation.rpar.puppet',\n                        regex: \"\\\\)\",\n                        next: 'pop'\n                    },\n                    { include: \"constants\" },\n                    { include: \"variable\" },\n                    { include: \"strings\" },\n                    { include: \"operators\" },\n                    { defaultToken: 'string' }]\n            },\n            {\n                token: [\"language.support.class\", \"keyword.operator\"],\n                regex: \"\\\\b([a-zA-Z_]+)(\\\\s+=>)\"\n            },\n            {\n                token: [\"exported.resource.puppet\", \"keyword.name.resource.puppet\", \"paren.lparen\"],\n                regex: \"(\\\\@\\\\@)?(\\\\s*[a-zA-Z_]*)(\\\\s*\\\\{)\"\n            },\n            {\n                token: \"qualified.variable.puppet\",\n                regex: \"(\\\\$([a-z][a-z0-9_]*)?(::[a-z][a-z0-9_]*)*::[a-z0-9_][a-zA-Z0-9_]*)\"\n            },\n            {\n                token: \"singleline.comment.puppet\",\n                regex: '#(.)*$'\n            },\n            {\n                token: \"multiline.comment.begin.puppet\",\n                regex: '^\\\\s*\\\\/\\\\*',\n                push: \"blockComment\"\n            },\n            {\n                token: \"keyword.control.puppet\",\n                regex: \"\\\\b(case|if|unless|else|elsif|in|default:|and|or)\\\\s+(?!::)\"\n            },\n            {\n                token: \"keyword.control.puppet\",\n                regex: \"\\\\b(import|default|inherits|include|require|contain|node|application|consumes|environment|site|function|produces)\\\\b\"\n            },\n            {\n                token: \"support.function.puppet\",\n                regex: \"\\\\b(lest|str2bool|escape|gsub|Timestamp|Timespan|with|alert|crit|debug|notice|sprintf|split|step|strftime|slice|shellquote|type|sha1|defined|scanf|reverse_each|regsubst|return|emerg|reduce|err|failed|fail|versioncmp|file|generate|then|info|realize|search|tag|tagged|template|epp|warning|hiera_include|each|assert_type|binary_file|create_resources|dig|digest|filter|lookup|find_file|fqdn_rand|hiera_array|hiera_hash|inline_epp|inline_template|map|match|md5|new|next)\\\\b\"\n            },\n            {\n                token: \"constant.types.puppet\",\n                regex: \"\\\\b(String|File|Package|Service|Class|Integer|Array|Catalogentry|Variant|Boolean|Undef|Number|Hash|Float|Numeric|NotUndef|Callable|Optional|Any|Regexp|Sensitive|Sensitive.new|Type|Resource|Default|Enum|Scalar|Collection|Data|Pattern|Tuple|Struct)\\\\b\"\n            },\n            {\n                token: \"paren.lparen\",\n                regex: \"[[({]\"\n            },\n            {\n                token: \"paren.rparen\",\n                regex: \"[\\\\])}]\"\n            },\n            { include: \"variable\" },\n            { include: \"constants\" },\n            { include: \"strings\" },\n            { include: \"operators\" },\n            {\n                token: \"regexp.begin.string.puppet\",\n                regex: \"\\\\s*(\\\\/(\\\\S)+)\\\\/\"\n            }\n        ],\n        blockComment: [{\n                regex: \"\\\\*\\\\/\",\n                token: \"multiline.comment.end.puppet\",\n                next: \"pop\"\n            }, {\n                defaultToken: \"comment\"\n            }],\n        \"constants\": [\n            {\n                token: \"constant.language.puppet\",\n                regex: \"\\\\b(false|true|running|stopped|installed|purged|latest|file|directory|held|undef|present|absent|link|mounted|unmounted)\\\\b\"\n            }\n        ],\n        \"variable\": [\n            {\n                token: \"variable.puppet\",\n                regex: \"(\\\\$[a-z0-9_\\{][a-zA-Z0-9_]*)\"\n            }\n        ],\n        \"strings\": [\n            {\n                token: \"punctuation.quote.puppet\",\n                regex: \"'\",\n                push: [{\n                        token: 'punctuation.quote.puppet',\n                        regex: \"'\",\n                        next: 'pop'\n                    },\n                    { include: \"escaped_chars\" },\n                    { defaultToken: 'string' }]\n            },\n            {\n                token: \"punctuation.quote.puppet\",\n                regex: '\"',\n                push: [{\n                        token: 'punctuation.quote.puppet',\n                        regex: '\"',\n                        next: 'pop'\n                    },\n                    { include: \"escaped_chars\" },\n                    { include: \"variable\" },\n                    { defaultToken: 'string' }]\n            }\n        ],\n        \"escaped_chars\": [\n            {\n                token: \"constant.escaped_char.puppet\",\n                regex: \"\\\\\\\\.\"\n            }\n        ],\n        \"operators\": [\n            {\n                token: \"keyword.operator\",\n                regex: \"\\\\+\\\\.|\\\\-\\\\.|\\\\*\\\\.|\\\\/\\\\.|#|;;|\\\\+|\\\\-|\\\\*|\\\\*\\\\*\\\\/|\\\\/\\\\/|%|<<|>>|&|\\\\||\\\\^|~|<|>|<=|=>|==|!=|<>|<-|=|::|,\"\n            }\n        ]\n    };\n    this.normalizeRules();\n};\noop.inherits(PuppetHighlightRules, TextHighlightRules);\nexports.PuppetHighlightRules = PuppetHighlightRules;\n\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\nvar FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n        this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n(function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n        var line = session.getLine(row);\n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n        return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                }\n                else if (foldStyle != \"all\")\n                    range = null;\n            }\n            return range;\n        }\n        if (foldStyle === \"markbegin\")\n            return;\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    this.getSectionRange = function (session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                }\n                else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                }\n                else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m)\n                continue;\n            if (m[1])\n                depth--;\n            else\n                depth++;\n            if (!depth)\n                break;\n        }\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/matching_brace_outdent\",[\"require\",\"exports\",\"module\",\"ace/range\"], function(require, exports, module){\"use strict\";\nvar Range = require(\"../range\").Range;\nvar MatchingBraceOutdent = function () { };\n(function () {\n    this.checkOutdent = function (line, input) {\n        if (!/^\\s+$/.test(line))\n            return false;\n        return /^\\s*\\}/.test(input);\n    };\n    this.autoOutdent = function (doc, row) {\n        var line = doc.getLine(row);\n        var match = line.match(/^(\\s*\\})/);\n        if (!match)\n            return 0;\n        var column = match[1].length;\n        var openBracePos = doc.findMatchingBracket({ row: row, column: column });\n        if (!openBracePos || openBracePos.row == row)\n            return 0;\n        var indent = this.$getIndent(doc.getLine(openBracePos.row));\n        doc.replace(new Range(row, 0, row, column - 1), indent);\n    };\n    this.$getIndent = function (line) {\n        return line.match(/^\\s*/)[0];\n    };\n}).call(MatchingBraceOutdent.prototype);\nexports.MatchingBraceOutdent = MatchingBraceOutdent;\n\n});\n\nace.define(\"ace/mode/puppet\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/puppet_highlight_rules\",\"ace/mode/folding/cstyle\",\"ace/mode/matching_brace_outdent\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar PuppetHighlightRules = require(\"./puppet_highlight_rules\").PuppetHighlightRules;\nvar CStyleFoldMode = require(\"./folding/cstyle\").FoldMode;\nvar MatchingBraceOutdent = require(\"./matching_brace_outdent\").MatchingBraceOutdent;\nvar Mode = function () {\n    TextMode.call(this);\n    this.HighlightRules = PuppetHighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n    this.$behaviour = this.$defaultBehaviour;\n    this.foldingRules = new CStyleFoldMode();\n};\noop.inherits(Mode, TextMode);\n(function () {\n    this.lineCommentStart = \"#\";\n    this.blockComment = { start: \"/*\", end: \"*/\" };\n    this.$id = \"ace/mode/puppet\";\n}).call(Mode.prototype);\nexports.Mode = Mode;\n\n});                (function() {\n                    ace.require([\"ace/mode/puppet\"], function(m) {\n                        if ( true && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            \n\n//# sourceURL=webpack://robot-karol-4/./node_modules/ace-builds/src-noconflict/mode-puppet.js?");

/***/ })

}]);