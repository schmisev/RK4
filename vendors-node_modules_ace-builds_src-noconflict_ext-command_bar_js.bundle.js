/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkrobot_karol_4"] = self["webpackChunkrobot_karol_4"] || []).push([["vendors-node_modules_ace-builds_src-noconflict_ext-command_bar_js"],{

/***/ "./node_modules/ace-builds/src-noconflict/ext-command_bar.js":
/*!*******************************************************************!*\
  !*** ./node_modules/ace-builds/src-noconflict/ext-command_bar.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nace.define(\"ace/ext/command_bar\",[\"require\",\"exports\",\"module\",\"ace/tooltip\",\"ace/lib/event_emitter\",\"ace/lib/lang\",\"ace/lib/dom\",\"ace/lib/oop\",\"ace/lib/useragent\"], function(require, exports, module){var __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar Tooltip = require(\"../tooltip\").Tooltip;\nvar EventEmitter = require(\"../lib/event_emitter\").EventEmitter;\nvar lang = require(\"../lib/lang\");\nvar dom = require(\"../lib/dom\");\nvar oop = require(\"../lib/oop\");\nvar useragent = require(\"../lib/useragent\");\nvar BUTTON_CLASS_NAME = 'command_bar_tooltip_button';\nvar VALUE_CLASS_NAME = 'command_bar_button_value';\nvar CAPTION_CLASS_NAME = 'command_bar_button_caption';\nvar KEYBINDING_CLASS_NAME = 'command_bar_keybinding';\nvar TOOLTIP_CLASS_NAME = 'command_bar_tooltip';\nvar MORE_OPTIONS_BUTTON_ID = 'MoreOptionsButton';\nvar defaultDelay = 100;\nvar defaultMaxElements = 4;\nvar minPosition = function (posA, posB) {\n    if (posB.row > posA.row) {\n        return posA;\n    }\n    else if (posB.row === posA.row && posB.column > posA.column) {\n        return posA;\n    }\n    return posB;\n};\nvar keyDisplayMap = {\n    \"Ctrl\": { mac: \"^\" },\n    \"Option\": { mac: \"⌥\" },\n    \"Command\": { mac: \"⌘\" },\n    \"Cmd\": { mac: \"⌘\" },\n    \"Shift\": \"⇧\",\n    \"Left\": \"←\",\n    \"Right\": \"→\",\n    \"Up\": \"↑\",\n    \"Down\": \"↓\"\n};\nvar CommandBarTooltip = /** @class */ (function () {\n    function CommandBarTooltip(parentNode, options) {\n        var e_1, _a;\n        options = options || {};\n        this.parentNode = parentNode;\n        this.tooltip = new Tooltip(this.parentNode);\n        this.moreOptions = new Tooltip(this.parentNode);\n        this.maxElementsOnTooltip = options.maxElementsOnTooltip || defaultMaxElements;\n        this.$alwaysShow = options.alwaysShow || false;\n        this.eventListeners = {};\n        this.elements = {};\n        this.commands = {};\n        this.tooltipEl = dom.buildDom(['div', { class: TOOLTIP_CLASS_NAME }], this.tooltip.getElement());\n        this.moreOptionsEl = dom.buildDom(['div', { class: TOOLTIP_CLASS_NAME + \" tooltip_more_options\" }], this.moreOptions.getElement());\n        this.$showTooltipTimer = lang.delayedCall(this.$showTooltip.bind(this), options.showDelay || defaultDelay);\n        this.$hideTooltipTimer = lang.delayedCall(this.$hideTooltip.bind(this), options.hideDelay || defaultDelay);\n        this.$tooltipEnter = this.$tooltipEnter.bind(this);\n        this.$onMouseMove = this.$onMouseMove.bind(this);\n        this.$onChangeScroll = this.$onChangeScroll.bind(this);\n        this.$onEditorChangeSession = this.$onEditorChangeSession.bind(this);\n        this.$scheduleTooltipForHide = this.$scheduleTooltipForHide.bind(this);\n        this.$preventMouseEvent = this.$preventMouseEvent.bind(this);\n        try {\n            for (var _b = __values([\"mousedown\", \"mouseup\", \"click\"]), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var event = _c.value;\n                this.tooltip.getElement().addEventListener(event, this.$preventMouseEvent);\n                this.moreOptions.getElement().addEventListener(event, this.$preventMouseEvent);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    }\n    CommandBarTooltip.prototype.registerCommand = function (id, command) {\n        var registerForMainTooltip = Object.keys(this.commands).length < this.maxElementsOnTooltip;\n        if (!registerForMainTooltip && !this.elements[MORE_OPTIONS_BUTTON_ID]) {\n            this.$createCommand(MORE_OPTIONS_BUTTON_ID, {\n                name: \"···\",\n                exec: \n                function () {\n                    this.$shouldHideMoreOptions = false;\n                    this.$setMoreOptionsVisibility(!this.isMoreOptionsShown());\n                }.bind(this),\n                type: \"checkbox\",\n                getValue: function () {\n                    return this.isMoreOptionsShown();\n                }.bind(this),\n                enabled: true\n            }, true);\n        }\n        this.$createCommand(id, command, registerForMainTooltip);\n        if (this.isShown()) {\n            this.updatePosition();\n        }\n    };\n    CommandBarTooltip.prototype.isShown = function () {\n        return !!this.tooltip && this.tooltip.isOpen;\n    };\n    CommandBarTooltip.prototype.isMoreOptionsShown = function () {\n        return !!this.moreOptions && this.moreOptions.isOpen;\n    };\n    CommandBarTooltip.prototype.getAlwaysShow = function () {\n        return this.$alwaysShow;\n    };\n    CommandBarTooltip.prototype.setAlwaysShow = function (alwaysShow) {\n        this.$alwaysShow = alwaysShow;\n        this.$updateOnHoverHandlers(!this.$alwaysShow);\n        this._signal(\"alwaysShow\", this.$alwaysShow);\n    };\n    CommandBarTooltip.prototype.attach = function (editor) {\n        if (!editor || (this.isShown() && this.editor === editor)) {\n            return;\n        }\n        this.detach();\n        this.editor = editor;\n        this.editor.on(\"changeSession\", this.$onEditorChangeSession);\n        if (this.editor.session) {\n            this.editor.session.on(\"changeScrollLeft\", this.$onChangeScroll);\n            this.editor.session.on(\"changeScrollTop\", this.$onChangeScroll);\n        }\n        if (this.getAlwaysShow()) {\n            this.$showTooltip();\n        }\n        else {\n            this.$updateOnHoverHandlers(true);\n        }\n    };\n    CommandBarTooltip.prototype.updatePosition = function () {\n        if (!this.editor) {\n            return;\n        }\n        var renderer = this.editor.renderer;\n        var ranges;\n        if (this.editor.selection.getAllRanges) {\n            ranges = this.editor.selection.getAllRanges();\n        }\n        else {\n            ranges = [this.editor.getSelectionRange()];\n        }\n        if (!ranges.length) {\n            return;\n        }\n        var minPos = minPosition(ranges[0].start, ranges[0].end);\n        for (var i = 0, range; range = ranges[i]; i++) {\n            minPos = minPosition(minPos, minPosition(range.start, range.end));\n        }\n        var pos = renderer.$cursorLayer.getPixelPosition(minPos, true);\n        var tooltipEl = this.tooltip.getElement();\n        var screenWidth = window.innerWidth;\n        var screenHeight = window.innerHeight;\n        var rect = this.editor.container.getBoundingClientRect();\n        pos.top += rect.top - renderer.layerConfig.offset;\n        pos.left += rect.left + renderer.gutterWidth - renderer.scrollLeft;\n        var cursorVisible = pos.top >= rect.top && pos.top <= rect.bottom &&\n            pos.left >= rect.left + renderer.gutterWidth && pos.left <= rect.right;\n        if (!cursorVisible && this.isShown()) {\n            this.$hideTooltip();\n            return;\n        }\n        else if (cursorVisible && !this.isShown() && this.getAlwaysShow()) {\n            this.$showTooltip();\n            return;\n        }\n        var top = pos.top - tooltipEl.offsetHeight;\n        var left = Math.min(screenWidth - tooltipEl.offsetWidth, pos.left);\n        var tooltipFits = top >= 0 && top + tooltipEl.offsetHeight <= screenHeight &&\n            left >= 0 && left + tooltipEl.offsetWidth <= screenWidth;\n        if (!tooltipFits) {\n            this.$hideTooltip();\n            return;\n        }\n        this.tooltip.setPosition(left, top);\n        if (this.isMoreOptionsShown()) {\n            top = top + tooltipEl.offsetHeight;\n            left = this.elements[MORE_OPTIONS_BUTTON_ID].getBoundingClientRect().left;\n            var moreOptionsEl = this.moreOptions.getElement();\n            var screenHeight = window.innerHeight;\n            if (top + moreOptionsEl.offsetHeight > screenHeight) {\n                top -= tooltipEl.offsetHeight + moreOptionsEl.offsetHeight;\n            }\n            if (left + moreOptionsEl.offsetWidth > screenWidth) {\n                left = screenWidth - moreOptionsEl.offsetWidth;\n            }\n            this.moreOptions.setPosition(left, top);\n        }\n    };\n    CommandBarTooltip.prototype.update = function () {\n        Object.keys(this.elements).forEach(this.$updateElement.bind(this));\n    };\n    CommandBarTooltip.prototype.detach = function () {\n        this.tooltip.hide();\n        this.moreOptions.hide();\n        this.$updateOnHoverHandlers(false);\n        if (this.editor) {\n            this.editor.off(\"changeSession\", this.$onEditorChangeSession);\n            if (this.editor.session) {\n                this.editor.session.off(\"changeScrollLeft\", this.$onChangeScroll);\n                this.editor.session.off(\"changeScrollTop\", this.$onChangeScroll);\n            }\n        }\n        this.$mouseInTooltip = false;\n        this.editor = null;\n    };\n    CommandBarTooltip.prototype.destroy = function () {\n        if (this.tooltip && this.moreOptions) {\n            this.detach();\n            this.tooltip.destroy();\n            this.moreOptions.destroy();\n        }\n        this.eventListeners = {};\n        this.commands = {};\n        this.elements = {};\n        this.tooltip = this.moreOptions = this.parentNode = null;\n    };\n    CommandBarTooltip.prototype.$createCommand = function (id, command, forMainTooltip) {\n        var parentEl = forMainTooltip ? this.tooltipEl : this.moreOptionsEl;\n        var keyParts = [];\n        var bindKey = command.bindKey;\n        if (bindKey) {\n            if (typeof bindKey === 'object') {\n                bindKey = useragent.isMac ? bindKey.mac : bindKey.win;\n            }\n            bindKey = bindKey.split(\"|\")[0];\n            keyParts = bindKey.split(\"-\");\n            keyParts = keyParts.map(function (key) {\n                if (keyDisplayMap[key]) {\n                    if (typeof keyDisplayMap[key] === 'string') {\n                        return keyDisplayMap[key];\n                    }\n                    else if (useragent.isMac && keyDisplayMap[key].mac) {\n                        return keyDisplayMap[key].mac;\n                    }\n                }\n                return key;\n            });\n        }\n        var buttonNode;\n        if (forMainTooltip && command.iconCssClass) {\n            buttonNode = [\n                'div',\n                {\n                    class: [\"ace_icon_svg\", command.iconCssClass].join(\" \"),\n                    \"aria-label\": command.name + \" (\" + command.bindKey + \")\"\n                }\n            ];\n        }\n        else {\n            buttonNode = [\n                ['div', { class: VALUE_CLASS_NAME }],\n                ['div', { class: CAPTION_CLASS_NAME }, command.name]\n            ];\n            if (keyParts.length) {\n                buttonNode.push([\n                    'div',\n                    { class: KEYBINDING_CLASS_NAME },\n                    keyParts.map(function (keyPart) {\n                        return ['div', keyPart];\n                    })\n                ]);\n            }\n        }\n        dom.buildDom(['div', { class: [BUTTON_CLASS_NAME, command.cssClass || \"\"].join(\" \"), ref: id }, buttonNode], parentEl, this.elements);\n        this.commands[id] = command;\n        var eventListener = \n        function (e) {\n            if (this.editor) {\n                this.editor.focus();\n            }\n            this.$shouldHideMoreOptions = this.isMoreOptionsShown();\n            if (!this.elements[id].disabled && command.exec) {\n                command.exec(this.editor);\n            }\n            if (this.$shouldHideMoreOptions) {\n                this.$setMoreOptionsVisibility(false);\n            }\n            this.update();\n            e.preventDefault();\n        }.bind(this);\n        this.eventListeners[id] = eventListener;\n        this.elements[id].addEventListener('click', eventListener.bind(this));\n        this.$updateElement(id);\n    };\n    CommandBarTooltip.prototype.$setMoreOptionsVisibility = function (visible) {\n        if (visible) {\n            this.moreOptions.setTheme(this.editor.renderer.theme);\n            this.moreOptions.setClassName(TOOLTIP_CLASS_NAME + \"_wrapper\");\n            this.moreOptions.show();\n            this.update();\n            this.updatePosition();\n        }\n        else {\n            this.moreOptions.hide();\n        }\n    };\n    CommandBarTooltip.prototype.$onEditorChangeSession = function (e) {\n        if (e.oldSession) {\n            e.oldSession.off(\"changeScrollTop\", this.$onChangeScroll);\n            e.oldSession.off(\"changeScrollLeft\", this.$onChangeScroll);\n        }\n        this.detach();\n    };\n    CommandBarTooltip.prototype.$onChangeScroll = function () {\n        if (this.editor.renderer && (this.isShown() || this.getAlwaysShow())) {\n            this.editor.renderer.once(\"afterRender\", this.updatePosition.bind(this));\n        }\n    };\n    CommandBarTooltip.prototype.$onMouseMove = function (e) {\n        if (this.$mouseInTooltip) {\n            return;\n        }\n        var cursorPosition = this.editor.getCursorPosition();\n        var cursorScreenPosition = this.editor.renderer.textToScreenCoordinates(cursorPosition.row, cursorPosition.column);\n        var lineHeight = this.editor.renderer.lineHeight;\n        var isInCurrentLine = e.clientY >= cursorScreenPosition.pageY && e.clientY < cursorScreenPosition.pageY + lineHeight;\n        if (isInCurrentLine) {\n            if (!this.isShown() && !this.$showTooltipTimer.isPending()) {\n                this.$showTooltipTimer.delay();\n            }\n            if (this.$hideTooltipTimer.isPending()) {\n                this.$hideTooltipTimer.cancel();\n            }\n        }\n        else {\n            if (this.isShown() && !this.$hideTooltipTimer.isPending()) {\n                this.$hideTooltipTimer.delay();\n            }\n            if (this.$showTooltipTimer.isPending()) {\n                this.$showTooltipTimer.cancel();\n            }\n        }\n    };\n    CommandBarTooltip.prototype.$preventMouseEvent = function (e) {\n        if (this.editor) {\n            this.editor.focus();\n        }\n        e.preventDefault();\n    };\n    CommandBarTooltip.prototype.$scheduleTooltipForHide = function () {\n        this.$mouseInTooltip = false;\n        this.$showTooltipTimer.cancel();\n        this.$hideTooltipTimer.delay();\n    };\n    CommandBarTooltip.prototype.$tooltipEnter = function () {\n        this.$mouseInTooltip = true;\n        if (this.$showTooltipTimer.isPending()) {\n            this.$showTooltipTimer.cancel();\n        }\n        if (this.$hideTooltipTimer.isPending()) {\n            this.$hideTooltipTimer.cancel();\n        }\n    };\n    CommandBarTooltip.prototype.$updateOnHoverHandlers = function (enableHover) {\n        var tooltipEl = this.tooltip.getElement();\n        var moreOptionsEl = this.moreOptions.getElement();\n        if (enableHover) {\n            if (this.editor) {\n                this.editor.on(\"mousemove\", this.$onMouseMove);\n                this.editor.renderer.getMouseEventTarget().addEventListener(\"mouseout\", this.$scheduleTooltipForHide, true);\n            }\n            tooltipEl.addEventListener('mouseenter', this.$tooltipEnter);\n            tooltipEl.addEventListener('mouseleave', this.$scheduleTooltipForHide);\n            moreOptionsEl.addEventListener('mouseenter', this.$tooltipEnter);\n            moreOptionsEl.addEventListener('mouseleave', this.$scheduleTooltipForHide);\n        }\n        else {\n            if (this.editor) {\n                this.editor.off(\"mousemove\", this.$onMouseMove);\n                this.editor.renderer.getMouseEventTarget().removeEventListener(\"mouseout\", this.$scheduleTooltipForHide, true);\n            }\n            tooltipEl.removeEventListener('mouseenter', this.$tooltipEnter);\n            tooltipEl.removeEventListener('mouseleave', this.$scheduleTooltipForHide);\n            moreOptionsEl.removeEventListener('mouseenter', this.$tooltipEnter);\n            moreOptionsEl.removeEventListener('mouseleave', this.$scheduleTooltipForHide);\n        }\n    };\n    CommandBarTooltip.prototype.$showTooltip = function () {\n        if (this.isShown()) {\n            return;\n        }\n        this.tooltip.setTheme(this.editor.renderer.theme);\n        this.tooltip.setClassName(TOOLTIP_CLASS_NAME + \"_wrapper\");\n        this.tooltip.show();\n        this.update();\n        this.updatePosition();\n        this._signal(\"show\");\n    };\n    CommandBarTooltip.prototype.$hideTooltip = function () {\n        this.$mouseInTooltip = false;\n        if (!this.isShown()) {\n            return;\n        }\n        this.moreOptions.hide();\n        this.tooltip.hide();\n        this._signal(\"hide\");\n    };\n    CommandBarTooltip.prototype.$updateElement = function (id) {\n        var command = this.commands[id];\n        if (!command) {\n            return;\n        }\n        var el = this.elements[id];\n        var commandEnabled = command.enabled;\n        if (typeof commandEnabled === 'function') {\n            commandEnabled = commandEnabled(this.editor);\n        }\n        if (typeof command.getValue === 'function') {\n            var value = command.getValue(this.editor);\n            if (command.type === 'text') {\n                el.textContent = value;\n            }\n            else if (command.type === 'checkbox') {\n                var domCssFn = value ? dom.addCssClass : dom.removeCssClass;\n                var isOnTooltip = el.parentElement === this.tooltipEl;\n                el.ariaChecked = value;\n                if (isOnTooltip) {\n                    domCssFn(el, \"ace_selected\");\n                }\n                else {\n                    el = el.querySelector(\".\" + VALUE_CLASS_NAME);\n                    domCssFn(el, \"ace_checkmark\");\n                }\n            }\n        }\n        if (commandEnabled && el.disabled) {\n            dom.removeCssClass(el, \"ace_disabled\");\n            el.ariaDisabled = el.disabled = false;\n            el.removeAttribute(\"disabled\");\n        }\n        else if (!commandEnabled && !el.disabled) {\n            dom.addCssClass(el, \"ace_disabled\");\n            el.ariaDisabled = el.disabled = true;\n            el.setAttribute(\"disabled\", \"\");\n        }\n    };\n    return CommandBarTooltip;\n}());\noop.implement(CommandBarTooltip.prototype, EventEmitter);\ndom.importCssString(\"\\n.ace_tooltip.\".concat(TOOLTIP_CLASS_NAME, \"_wrapper {\\n    padding: 0;\\n}\\n\\n.ace_tooltip .\").concat(TOOLTIP_CLASS_NAME, \" {\\n    padding: 1px 5px;\\n    display: flex;\\n    pointer-events: auto;\\n}\\n\\n.ace_tooltip .\").concat(TOOLTIP_CLASS_NAME, \".tooltip_more_options {\\n    padding: 1px;\\n    flex-direction: column;\\n}\\n\\ndiv.\").concat(BUTTON_CLASS_NAME, \" {\\n    display: inline-flex;\\n    cursor: pointer;\\n    margin: 1px;\\n    border-radius: 2px;\\n    padding: 2px 5px;\\n    align-items: center;\\n}\\n\\ndiv.\").concat(BUTTON_CLASS_NAME, \".ace_selected,\\ndiv.\").concat(BUTTON_CLASS_NAME, \":hover:not(.ace_disabled) {\\n    background-color: rgba(0, 0, 0, 0.1);\\n}\\n\\ndiv.\").concat(BUTTON_CLASS_NAME, \".ace_disabled {\\n    color: #777;\\n    pointer-events: none;\\n}\\n\\ndiv.\").concat(BUTTON_CLASS_NAME, \" .ace_icon_svg {\\n    height: 12px;\\n    background-color: #000;\\n}\\n\\ndiv.\").concat(BUTTON_CLASS_NAME, \".ace_disabled .ace_icon_svg {\\n    background-color: #777;\\n}\\n\\n.\").concat(TOOLTIP_CLASS_NAME, \".tooltip_more_options .\").concat(BUTTON_CLASS_NAME, \" {\\n    display: flex;\\n}\\n\\n.\").concat(TOOLTIP_CLASS_NAME, \".\").concat(VALUE_CLASS_NAME, \" {\\n    display: none;\\n}\\n\\n.\").concat(TOOLTIP_CLASS_NAME, \".tooltip_more_options .\").concat(VALUE_CLASS_NAME, \" {\\n    display: inline-block;\\n    width: 12px;\\n}\\n\\n.\").concat(CAPTION_CLASS_NAME, \" {\\n    display: inline-block;\\n}\\n\\n.\").concat(KEYBINDING_CLASS_NAME, \" {\\n    margin: 0 2px;\\n    display: inline-block;\\n    font-size: 8px;\\n}\\n\\n.\").concat(TOOLTIP_CLASS_NAME, \".tooltip_more_options .\").concat(KEYBINDING_CLASS_NAME, \" {\\n    margin-left: auto;\\n}\\n\\n.\").concat(KEYBINDING_CLASS_NAME, \" div {\\n    display: inline-block;\\n    min-width: 8px;\\n    padding: 2px;\\n    margin: 0 1px;\\n    border-radius: 2px;\\n    background-color: #ccc;\\n    text-align: center;\\n}\\n\\n.ace_dark.ace_tooltip .\").concat(TOOLTIP_CLASS_NAME, \" {\\n    background-color: #373737;\\n    color: #eee;\\n}\\n\\n.ace_dark div.\").concat(BUTTON_CLASS_NAME, \".ace_disabled {\\n    color: #979797;\\n}\\n\\n.ace_dark div.\").concat(BUTTON_CLASS_NAME, \".ace_selected,\\n.ace_dark div.\").concat(BUTTON_CLASS_NAME, \":hover:not(.ace_disabled) {\\n    background-color: rgba(255, 255, 255, 0.1);\\n}\\n\\n.ace_dark div.\").concat(BUTTON_CLASS_NAME, \" .ace_icon_svg {\\n    background-color: #eee;\\n}\\n\\n.ace_dark div.\").concat(BUTTON_CLASS_NAME, \".ace_disabled .ace_icon_svg {\\n    background-color: #979797;\\n}\\n\\n.ace_dark .\").concat(BUTTON_CLASS_NAME, \".ace_disabled {\\n    color: #979797;\\n}\\n\\n.ace_dark .\").concat(KEYBINDING_CLASS_NAME, \" div {\\n    background-color: #575757;\\n}\\n\\n.ace_checkmark::before {\\n    content: '\\u2713';\\n}\\n\"), \"commandbar.css\", false);\nexports.CommandBarTooltip = CommandBarTooltip;\nexports.TOOLTIP_CLASS_NAME = TOOLTIP_CLASS_NAME;\nexports.BUTTON_CLASS_NAME = BUTTON_CLASS_NAME;\n\n});                (function() {\n                    ace.require([\"ace/ext/command_bar\"], function(m) {\n                        if ( true && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            \n\n//# sourceURL=webpack://robot-karol-4/./node_modules/ace-builds/src-noconflict/ext-command_bar.js?");

/***/ })

}]);