/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkrobot_karol_4"] = self["webpackChunkrobot_karol_4"] || []).push([["vendors-node_modules_ace-builds_src-noconflict_mode-makefile_js"],{

/***/ "./node_modules/ace-builds/src-noconflict/mode-makefile.js":
/*!*****************************************************************!*\
  !*** ./node_modules/ace-builds/src-noconflict/mode-makefile.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nace.define(\"ace/mode/sh_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\nvar reservedKeywords = exports.reservedKeywords = ('!|{|}|case|do|done|elif|else|' +\n    'esac|fi|for|if|in|then|until|while|' +\n    '&|;|export|local|read|typeset|unset|' +\n    'elif|select|set|function|declare|readonly');\nvar languageConstructs = exports.languageConstructs = ('[|]|alias|bg|bind|break|builtin|' +\n    'cd|command|compgen|complete|continue|' +\n    'dirs|disown|echo|enable|eval|exec|' +\n    'exit|fc|fg|getopts|hash|help|history|' +\n    'jobs|kill|let|logout|popd|printf|pushd|' +\n    'pwd|return|set|shift|shopt|source|' +\n    'suspend|test|times|trap|type|ulimit|' +\n    'umask|unalias|wait');\nvar ShHighlightRules = function () {\n    var keywordMapper = this.createKeywordMapper({\n        \"keyword\": reservedKeywords,\n        \"support.function.builtin\": languageConstructs,\n        \"invalid.deprecated\": \"debugger\"\n    }, \"identifier\");\n    var integer = \"(?:(?:[1-9]\\\\d*)|(?:0))\";\n    var fraction = \"(?:\\\\.\\\\d+)\";\n    var intPart = \"(?:\\\\d+)\";\n    var pointFloat = \"(?:(?:\" + intPart + \"?\" + fraction + \")|(?:\" + intPart + \"\\\\.))\";\n    var exponentFloat = \"(?:(?:\" + pointFloat + \"|\" + intPart + \")\" + \")\";\n    var floatNumber = \"(?:\" + exponentFloat + \"|\" + pointFloat + \")\";\n    var fileDescriptor = \"(?:&\" + intPart + \")\";\n    var variableName = \"[a-zA-Z_][a-zA-Z0-9_]*\";\n    var variable = \"(?:\" + variableName + \"(?==))\";\n    var builtinVariable = \"(?:\\\\$(?:SHLVL|\\\\$|\\\\!|\\\\?))\";\n    var func = \"(?:\" + variableName + \"\\\\s*\\\\(\\\\))\";\n    this.$rules = {\n        \"start\": [{\n                token: \"constant\",\n                regex: /\\\\./\n            }, {\n                token: [\"text\", \"comment\"],\n                regex: /(^|\\s)(#.*)$/\n            }, {\n                token: \"string.start\",\n                regex: '\"',\n                push: [{\n                        token: \"constant.language.escape\",\n                        regex: /\\\\(?:[$`\"\\\\]|$)/\n                    }, {\n                        include: \"variables\"\n                    }, {\n                        token: \"keyword.operator\",\n                        regex: /`/ // TODO highlight `\n                    }, {\n                        token: \"string.end\",\n                        regex: '\"',\n                        next: \"pop\"\n                    }, {\n                        defaultToken: \"string\"\n                    }]\n            }, {\n                token: \"string\",\n                regex: \"\\\\$'\",\n                push: [{\n                        token: \"constant.language.escape\",\n                        regex: /\\\\(?:[abeEfnrtv\\\\'\"]|x[a-fA-F\\d]{1,2}|u[a-fA-F\\d]{4}([a-fA-F\\d]{4})?|c.|\\d{1,3})/\n                    }, {\n                        token: \"string\",\n                        regex: \"'\",\n                        next: \"pop\"\n                    }, {\n                        defaultToken: \"string\"\n                    }]\n            }, {\n                regex: \"<<<\",\n                token: \"keyword.operator\"\n            }, {\n                stateName: \"heredoc\",\n                regex: \"(<<-?)(\\\\s*)(['\\\"`]?)([\\\\w\\\\-]+)(['\\\"`]?)\",\n                onMatch: function (value, currentState, stack) {\n                    var next = value[2] == '-' ? \"indentedHeredoc\" : \"heredoc\";\n                    var tokens = value.split(this.splitRegex);\n                    stack.push(next, tokens[4]);\n                    return [\n                        { type: \"constant\", value: tokens[1] },\n                        { type: \"text\", value: tokens[2] },\n                        { type: \"string\", value: tokens[3] },\n                        { type: \"support.class\", value: tokens[4] },\n                        { type: \"string\", value: tokens[5] }\n                    ];\n                },\n                rules: {\n                    heredoc: [{\n                            onMatch: function (value, currentState, stack) {\n                                if (value === stack[1]) {\n                                    stack.shift();\n                                    stack.shift();\n                                    this.next = stack[0] || \"start\";\n                                    return \"support.class\";\n                                }\n                                this.next = \"\";\n                                return \"string\";\n                            },\n                            regex: \".*$\",\n                            next: \"start\"\n                        }],\n                    indentedHeredoc: [{\n                            token: \"string\",\n                            regex: \"^\\t+\"\n                        }, {\n                            onMatch: function (value, currentState, stack) {\n                                if (value === stack[1]) {\n                                    stack.shift();\n                                    stack.shift();\n                                    this.next = stack[0] || \"start\";\n                                    return \"support.class\";\n                                }\n                                this.next = \"\";\n                                return \"string\";\n                            },\n                            regex: \".*$\",\n                            next: \"start\"\n                        }]\n                }\n            }, {\n                regex: \"$\",\n                token: \"empty\",\n                next: function (currentState, stack) {\n                    if (stack[0] === \"heredoc\" || stack[0] === \"indentedHeredoc\")\n                        return stack[0];\n                    return currentState;\n                }\n            }, {\n                token: [\"keyword\", \"text\", \"text\", \"text\", \"variable\"],\n                regex: /(declare|local|readonly)(\\s+)(?:(-[fixar]+)(\\s+))?([a-zA-Z_][a-zA-Z0-9_]*\\b)/\n            }, {\n                token: \"variable.language\",\n                regex: builtinVariable\n            }, {\n                token: \"variable\",\n                regex: variable\n            }, {\n                include: \"variables\"\n            }, {\n                token: \"support.function\",\n                regex: func\n            }, {\n                token: \"support.function\",\n                regex: fileDescriptor\n            }, {\n                token: \"string\", // ' string\n                start: \"'\", end: \"'\"\n            }, {\n                token: \"constant.numeric\", // float\n                regex: floatNumber\n            }, {\n                token: \"constant.numeric\", // integer\n                regex: integer + \"\\\\b\"\n            }, {\n                token: keywordMapper,\n                regex: \"[a-zA-Z_][a-zA-Z0-9_]*\\\\b\"\n            }, {\n                token: \"keyword.operator\",\n                regex: \"\\\\+|\\\\-|\\\\*|\\\\*\\\\*|\\\\/|\\\\/\\\\/|~|<|>|<=|=>|=|!=|[%&|`]\"\n            }, {\n                token: \"punctuation.operator\",\n                regex: \";\"\n            }, {\n                token: \"paren.lparen\",\n                regex: \"[\\\\[\\\\(\\\\{]\"\n            }, {\n                token: \"paren.rparen\",\n                regex: \"[\\\\]]\"\n            }, {\n                token: \"paren.rparen\",\n                regex: \"[\\\\)\\\\}]\",\n                next: \"pop\"\n            }],\n        variables: [{\n                token: \"variable\",\n                regex: /(\\$)(\\w+)/\n            }, {\n                token: [\"variable\", \"paren.lparen\"],\n                regex: /(\\$)(\\()/,\n                push: \"start\"\n            }, {\n                token: [\"variable\", \"paren.lparen\", \"keyword.operator\", \"variable\", \"keyword.operator\"],\n                regex: /(\\$)(\\{)([#!]?)(\\w+|[*@#?\\-$!0_])(:[?+\\-=]?|##?|%%?|,,?\\/|\\^\\^?)?/,\n                push: \"start\"\n            }, {\n                token: \"variable\",\n                regex: /\\$[*@#?\\-$!0_]/\n            }, {\n                token: [\"variable\", \"paren.lparen\"],\n                regex: /(\\$)(\\{)/,\n                push: \"start\"\n            }]\n    };\n    this.normalizeRules();\n};\noop.inherits(ShHighlightRules, TextHighlightRules);\nexports.ShHighlightRules = ShHighlightRules;\n\n});\n\nace.define(\"ace/mode/makefile_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\",\"ace/mode/sh_highlight_rules\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\nvar ShHighlightFile = require(\"./sh_highlight_rules\");\nvar MakefileHighlightRules = function () {\n    var keywordMapper = this.createKeywordMapper({\n        \"keyword\": ShHighlightFile.reservedKeywords,\n        \"support.function.builtin\": ShHighlightFile.languageConstructs,\n        \"invalid.deprecated\": \"debugger\"\n    }, \"string\");\n    this.$rules =\n        {\n            \"start\": [\n                {\n                    token: \"string.interpolated.backtick.makefile\",\n                    regex: \"`\",\n                    next: \"shell-start\"\n                },\n                {\n                    token: \"punctuation.definition.comment.makefile\",\n                    regex: /#(?=.)/,\n                    next: \"comment\"\n                },\n                {\n                    token: [\"keyword.control.makefile\"],\n                    regex: \"^(?:\\\\s*\\\\b)(\\\\-??include|ifeq|ifneq|ifdef|ifndef|else|endif|vpath|export|unexport|define|endef|override)(?:\\\\b)\"\n                },\n                {\n                    token: [\"entity.name.function.makefile\", \"text\"],\n                    regex: \"^([^\\\\t ]+(?:\\\\s[^\\\\t ]+)*:)(\\\\s*.*)\"\n                }\n            ],\n            \"comment\": [\n                {\n                    token: \"punctuation.definition.comment.makefile\",\n                    regex: /.+\\\\/\n                },\n                {\n                    token: \"punctuation.definition.comment.makefile\",\n                    regex: \".+\",\n                    next: \"start\"\n                }\n            ],\n            \"shell-start\": [\n                {\n                    token: keywordMapper,\n                    regex: \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\n                },\n                {\n                    token: \"string\",\n                    regex: \"\\\\w+\"\n                },\n                {\n                    token: \"string.interpolated.backtick.makefile\",\n                    regex: \"`\",\n                    next: \"start\"\n                }\n            ]\n        };\n};\noop.inherits(MakefileHighlightRules, TextHighlightRules);\nexports.MakefileHighlightRules = MakefileHighlightRules;\n\n});\n\nace.define(\"ace/mode/folding/coffee\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/folding/fold_mode\",\"ace/range\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../../lib/oop\");\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\nvar Range = require(\"../../range\").Range;\nvar FoldMode = exports.FoldMode = function () { };\noop.inherits(FoldMode, BaseFoldMode);\n(function () {\n    this.commentBlock = function (session, row) {\n        var re = /\\S/;\n        var line = session.getLine(row);\n        var startLevel = line.search(re);\n        if (startLevel == -1 || line[startLevel] != \"#\")\n            return;\n        var startColumn = line.length;\n        var maxRow = session.getLength();\n        var startRow = row;\n        var endRow = row;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var level = line.search(re);\n            if (level == -1)\n                continue;\n            if (line[level] != \"#\")\n                break;\n            endRow = row;\n        }\n        if (endRow > startRow) {\n            var endColumn = session.getLine(endRow).length;\n            return new Range(startRow, startColumn, endRow, endColumn);\n        }\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row) {\n        var range = this.indentationBlock(session, row);\n        if (range)\n            return range;\n        range = this.commentBlock(session, row);\n        if (range)\n            return range;\n    };\n    this.getFoldWidget = function (session, foldStyle, row) {\n        var line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        var next = session.getLine(row + 1);\n        var prev = session.getLine(row - 1);\n        var prevIndent = prev.search(/\\S/);\n        var nextIndent = next.search(/\\S/);\n        if (indent == -1) {\n            session.foldWidgets[row - 1] = prevIndent != -1 && prevIndent < nextIndent ? \"start\" : \"\";\n            return \"\";\n        }\n        if (prevIndent == -1) {\n            if (indent == nextIndent && line[indent] == \"#\" && next[indent] == \"#\") {\n                session.foldWidgets[row - 1] = \"\";\n                session.foldWidgets[row + 1] = \"\";\n                return \"start\";\n            }\n        }\n        else if (prevIndent == indent && line[indent] == \"#\" && prev[indent] == \"#\") {\n            if (session.getLine(row - 2).search(/\\S/) == -1) {\n                session.foldWidgets[row - 1] = \"start\";\n                session.foldWidgets[row + 1] = \"\";\n                return \"\";\n            }\n        }\n        if (prevIndent != -1 && prevIndent < indent)\n            session.foldWidgets[row - 1] = \"start\";\n        else\n            session.foldWidgets[row - 1] = \"\";\n        if (indent < nextIndent)\n            return \"start\";\n        else\n            return \"\";\n    };\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/makefile\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/makefile_highlight_rules\",\"ace/mode/folding/coffee\"], function(require, exports, module){/*\n  THIS FILE WAS AUTOGENERATED BY mode.tmpl.js\n*/\n\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar MakefileHighlightRules = require(\"./makefile_highlight_rules\").MakefileHighlightRules;\nvar FoldMode = require(\"./folding/coffee\").FoldMode;\nvar Mode = function () {\n    this.HighlightRules = MakefileHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n(function () {\n    this.lineCommentStart = \"#\";\n    this.$indentWithTabs = true;\n    this.$id = \"ace/mode/makefile\";\n    this.snippetFileId = \"ace/snippets/makefile\";\n}).call(Mode.prototype);\nexports.Mode = Mode;\n\n});                (function() {\n                    ace.require([\"ace/mode/makefile\"], function(m) {\n                        if ( true && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            \n\n//# sourceURL=webpack://robot-karol-4/./node_modules/ace-builds/src-noconflict/mode-makefile.js?");

/***/ })

}]);