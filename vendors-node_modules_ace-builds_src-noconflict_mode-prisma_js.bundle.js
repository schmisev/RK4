/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkrobot_karol_4"] = self["webpackChunkrobot_karol_4"] || []).push([["vendors-node_modules_ace-builds_src-noconflict_mode-prisma_js"],{

/***/ "./node_modules/ace-builds/src-noconflict/mode-prisma.js":
/*!***************************************************************!*\
  !*** ./node_modules/ace-builds/src-noconflict/mode-prisma.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nace.define(\"ace/mode/prisma_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module){/* This file was autogenerated from ../convert.json (uuid: ) */\n\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\nvar PrismaHighlightRules = function () {\n    this.$rules = {\n        start: [{\n                include: \"#triple_comment\"\n            }, {\n                include: \"#double_comment\"\n            }, {\n                include: \"#model_block_definition\"\n            }, {\n                include: \"#config_block_definition\"\n            }, {\n                include: \"#enum_block_definition\"\n            }, {\n                include: \"#type_definition\"\n            }],\n        \"#model_block_definition\": [{\n                token: [\n                    \"source.prisma.embedded.source\",\n                    \"storage.type.model.prisma\",\n                    \"source.prisma.embedded.source\",\n                    \"entity.name.type.model.prisma\",\n                    \"source.prisma.embedded.source\",\n                    \"punctuation.definition.tag.prisma\"\n                ],\n                regex: /^(\\s*)(model|type)(\\s+)([A-Za-z][\\w]*)(\\s+)({)/,\n                push: [{\n                        token: \"punctuation.definition.tag.prisma\",\n                        regex: /\\s*\\}/,\n                        next: \"pop\"\n                    }, {\n                        include: \"#triple_comment\"\n                    }, {\n                        include: \"#double_comment\"\n                    }, {\n                        include: \"#field_definition\"\n                    }, {\n                        defaultToken: \"source.prisma.embedded.source\"\n                    }]\n            }],\n        \"#enum_block_definition\": [{\n                token: [\n                    \"source.prisma.embedded.source\",\n                    \"storage.type.enum.prisma\",\n                    \"source.prisma.embedded.source\",\n                    \"entity.name.type.enum.prisma\",\n                    \"source.prisma.embedded.source\",\n                    \"punctuation.definition.tag.prisma\"\n                ],\n                regex: /^(\\s*)(enum)(\\s+)([A-Za-z][\\w]*)(\\s+)({)/,\n                push: [{\n                        token: \"punctuation.definition.tag.prisma\",\n                        regex: /\\s*\\}/,\n                        next: \"pop\"\n                    }, {\n                        include: \"#triple_comment\"\n                    }, {\n                        include: \"#double_comment\"\n                    }, {\n                        include: \"#enum_value_definition\"\n                    }, {\n                        defaultToken: \"source.prisma.embedded.source\"\n                    }]\n            }],\n        \"#config_block_definition\": [{\n                token: [\n                    \"source.prisma.embedded.source\",\n                    \"storage.type.config.prisma\",\n                    \"source.prisma.embedded.source\",\n                    \"entity.name.type.config.prisma\",\n                    \"source.prisma.embedded.source\",\n                    \"punctuation.definition.tag.prisma\"\n                ],\n                regex: /^(\\s*)(generator|datasource)(\\s+)([A-Za-z][\\w]*)(\\s+)({)/,\n                push: [{\n                        token: \"source.prisma.embedded.source\",\n                        regex: /\\s*\\}/,\n                        next: \"pop\"\n                    }, {\n                        include: \"#triple_comment\"\n                    }, {\n                        include: \"#double_comment\"\n                    }, {\n                        include: \"#assignment\"\n                    }, {\n                        defaultToken: \"source.prisma.embedded.source\"\n                    }]\n            }],\n        \"#assignment\": [{\n                token: [\n                    \"text\",\n                    \"variable.other.assignment.prisma\",\n                    \"text\",\n                    \"keyword.operator.terraform\",\n                    \"text\"\n                ],\n                regex: /^(\\s*)(\\w+)(\\s*)(=)(\\s*)/,\n                push: [{\n                        token: \"text\",\n                        regex: /$/,\n                        next: \"pop\"\n                    }, {\n                        include: \"#value\"\n                    }, {\n                        include: \"#double_comment_inline\"\n                    }]\n            }],\n        \"#field_definition\": [{\n                token: [\n                    \"text\",\n                    \"variable.other.assignment.prisma\",\n                    \"invalid.illegal.colon.prisma\",\n                    \"text\",\n                    \"support.type.primitive.prisma\",\n                    \"keyword.operator.list_type.prisma\",\n                    \"keyword.operator.optional_type.prisma\",\n                    \"invalid.illegal.required_type.prisma\"\n                ],\n                regex: /^(\\s*)(\\w+)((?:\\s*:)?)(\\s+)(\\w+)((?:\\[\\])?)((?:\\?)?)((?:\\!)?)/\n            }, {\n                include: \"#attribute_with_arguments\"\n            }, {\n                include: \"#attribute\"\n            }],\n        \"#type_definition\": [{\n                token: [\n                    \"text\",\n                    \"storage.type.type.prisma\",\n                    \"text\",\n                    \"entity.name.type.type.prisma\",\n                    \"text\",\n                    \"support.type.primitive.prisma\"\n                ],\n                regex: /^(\\s*)(type)(\\s+)(\\w+)(\\s*=\\s*)(\\w+)/\n            }, {\n                include: \"#attribute_with_arguments\"\n            }, {\n                include: \"#attribute\"\n            }],\n        \"#enum_value_definition\": [{\n                token: [\n                    \"text\",\n                    \"variable.other.assignment.prisma\",\n                    \"text\"\n                ],\n                regex: /^(\\s*)(\\w+)(\\s*$)/\n            }, {\n                include: \"#attribute_with_arguments\"\n            }, {\n                include: \"#attribute\"\n            }],\n        \"#attribute_with_arguments\": [{\n                token: [\n                    \"entity.name.function.attribute.prisma\",\n                    \"punctuation.definition.tag.prisma\"\n                ],\n                regex: /(@@?[\\w\\.]+)(\\()/,\n                push: [{\n                        token: \"punctuation.definition.tag.prisma\",\n                        regex: /\\)/,\n                        next: \"pop\"\n                    }, {\n                        include: \"#named_argument\"\n                    }, {\n                        include: \"#value\"\n                    }, {\n                        defaultToken: \"source.prisma.attribute.with_arguments\"\n                    }]\n            }],\n        \"#attribute\": [{\n                token: \"entity.name.function.attribute.prisma\",\n                regex: /@@?[\\w\\.]+/\n            }],\n        \"#array\": [{\n                token: \"source.prisma.array\",\n                regex: /\\[/,\n                push: [{\n                        token: \"source.prisma.array\",\n                        regex: /\\]/,\n                        next: \"pop\"\n                    }, {\n                        include: \"#value\"\n                    }, {\n                        defaultToken: \"source.prisma.array\"\n                    }]\n            }],\n        \"#value\": [{\n                include: \"#array\"\n            }, {\n                include: \"#functional\"\n            }, {\n                include: \"#literal\"\n            }],\n        \"#functional\": [{\n                token: [\n                    \"support.function.functional.prisma\",\n                    \"punctuation.definition.tag.prisma\"\n                ],\n                regex: /(\\w+)(\\()/,\n                push: [{\n                        token: \"punctuation.definition.tag.prisma\",\n                        regex: /\\)/,\n                        next: \"pop\"\n                    }, {\n                        include: \"#value\"\n                    }, {\n                        defaultToken: \"source.prisma.functional\"\n                    }]\n            }],\n        \"#literal\": [{\n                include: \"#boolean\"\n            }, {\n                include: \"#number\"\n            }, {\n                include: \"#double_quoted_string\"\n            }, {\n                include: \"#identifier\"\n            }],\n        \"#identifier\": [{\n                token: \"support.constant.constant.prisma\",\n                regex: /\\b(?:\\w)+\\b/\n            }],\n        \"#map_key\": [{\n                token: [\n                    \"variable.parameter.key.prisma\",\n                    \"text\",\n                    \"punctuation.definition.separator.key-value.prisma\",\n                    \"text\"\n                ],\n                regex: /(\\w+)(\\s*)(:)(\\s*)/\n            }],\n        \"#named_argument\": [{\n                include: \"#map_key\"\n            }, {\n                include: \"#value\"\n            }],\n        \"#triple_comment\": [{\n                token: \"comment.prisma\",\n                regex: /\\/\\/\\//,\n                push: [{\n                        token: \"comment.prisma\",\n                        regex: /$/,\n                        next: \"pop\"\n                    }, {\n                        defaultToken: \"comment.prisma\"\n                    }]\n            }],\n        \"#double_comment\": [{\n                token: \"comment.prisma\",\n                regex: /\\/\\//,\n                push: [{\n                        token: \"comment.prisma\",\n                        regex: /$/,\n                        next: \"pop\"\n                    }, {\n                        defaultToken: \"comment.prisma\"\n                    }]\n            }],\n        \"#double_comment_inline\": [{\n                token: \"comment.prisma\",\n                regex: /\\/\\/[^$]*/\n            }],\n        \"#boolean\": [{\n                token: \"constant.language.boolean.prisma\",\n                regex: /\\b(?:true|false)\\b/\n            }],\n        \"#number\": [{\n                token: \"constant.numeric.prisma\",\n                regex: /(?:0(?:x|X)[0-9a-fA-F]*|(?:\\+|-)?\\b(?:[0-9]+\\.?[0-9]*|\\.[0-9]+)(?:(?:e|E)(?:\\+|-)?[0-9]+)?)(?:[LlFfUuDdg]|UL|ul)?\\b/\n            }],\n        \"#double_quoted_string\": [{\n                token: \"string.quoted.double.start.prisma\",\n                regex: /\"/,\n                push: [{\n                        token: \"string.quoted.double.end.prisma\",\n                        regex: /\"/,\n                        next: \"pop\"\n                    }, {\n                        include: \"#string_interpolation\"\n                    }, {\n                        token: \"string.quoted.double.prisma\",\n                        regex: /[\\w\\-\\/\\._\\\\%@:\\?=]+/\n                    }, {\n                        defaultToken: \"unnamed\"\n                    }]\n            }],\n        \"#string_interpolation\": [{\n                token: \"keyword.control.interpolation.start.prisma\",\n                regex: /\\$\\{/,\n                push: [{\n                        token: \"keyword.control.interpolation.end.prisma\",\n                        regex: /\\s*\\}/,\n                        next: \"pop\"\n                    }, {\n                        include: \"#value\"\n                    }, {\n                        defaultToken: \"source.tag.embedded.source.prisma\"\n                    }]\n            }]\n    };\n    this.normalizeRules();\n};\nPrismaHighlightRules.metaData = {\n    name: \"Prisma\",\n    scopeName: \"source.prisma\"\n};\noop.inherits(PrismaHighlightRules, TextHighlightRules);\nexports.PrismaHighlightRules = PrismaHighlightRules;\n\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\nvar FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n        this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n(function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n        var line = session.getLine(row);\n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n        return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                }\n                else if (foldStyle != \"all\")\n                    range = null;\n            }\n            return range;\n        }\n        if (foldStyle === \"markbegin\")\n            return;\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    this.getSectionRange = function (session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                }\n                else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                }\n                else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m)\n                continue;\n            if (m[1])\n                depth--;\n            else\n                depth++;\n            if (!depth)\n                break;\n        }\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/prisma\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/prisma_highlight_rules\",\"ace/mode/folding/cstyle\"], function(require, exports, module){/*\n  THIS FILE WAS AUTOGENERATED BY mode.tmpl.js\n*/\n\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar PrismaHighlightRules = require(\"./prisma_highlight_rules\").PrismaHighlightRules;\nvar FoldMode = require(\"./folding/cstyle\").FoldMode;\nvar Mode = function () {\n    this.HighlightRules = PrismaHighlightRules;\n    this.foldingRules = new FoldMode();\n};\noop.inherits(Mode, TextMode);\n(function () {\n    this.lineCommentStart = \"//\";\n    this.$id = \"ace/mode/prisma\";\n}).call(Mode.prototype);\nexports.Mode = Mode;\n\n});                (function() {\n                    ace.require([\"ace/mode/prisma\"], function(m) {\n                        if ( true && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            \n\n//# sourceURL=webpack://robot-karol-4/./node_modules/ace-builds/src-noconflict/mode-prisma.js?");

/***/ })

}]);