/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkrobot_karol_4"] = self["webpackChunkrobot_karol_4"] || []).push([["vendors-node_modules_ace-builds_src-noconflict_mode-haskell_js"],{

/***/ "./node_modules/ace-builds/src-noconflict/mode-haskell.js":
/*!****************************************************************!*\
  !*** ./node_modules/ace-builds/src-noconflict/mode-haskell.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nace.define(\"ace/mode/haskell_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module){/* This file was autogenerated from tm bundles\\haskell.tmbundle\\Syntaxes\\Haskell.plist (uuid: ) */\n\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\nvar HaskellHighlightRules = function () {\n    this.$rules = { start: [{ token: ['punctuation.definition.entity.haskell',\n                    'keyword.operator.function.infix.haskell',\n                    'punctuation.definition.entity.haskell'],\n                regex: '(`)([a-zA-Z_\\']*?)(`)',\n                comment: 'In case this regex seems unusual for an infix operator, note that Haskell allows any ordinary function application (elem 4 [1..10]) to be rewritten as an infix expression (4 `elem` [1..10]).' },\n            { token: 'constant.language.unit.haskell', regex: '\\\\(\\\\)' },\n            { token: 'constant.language.empty-list.haskell',\n                regex: '\\\\[\\\\]' },\n            { token: 'keyword.other.haskell',\n                regex: '\\\\b(module|signature)\\\\b',\n                push: [{ token: 'keyword.other.haskell', regex: '\\\\bwhere\\\\b', next: 'pop' },\n                    { include: '#module_name' },\n                    { include: '#module_exports' },\n                    { token: 'invalid', regex: '[a-z]+' },\n                    { defaultToken: 'meta.declaration.module.haskell' }] },\n            { token: 'keyword.other.haskell',\n                regex: '\\\\bclass\\\\b',\n                push: [{ token: 'keyword.other.haskell',\n                        regex: '\\\\bwhere\\\\b',\n                        next: 'pop' },\n                    { token: 'support.class.prelude.haskell',\n                        regex: '\\\\b(?:Monad|Functor|Eq|Ord|Read|Show|Num|(?:Frac|Ra)tional|Enum|Bounded|Real(?:Frac|Float)?|Integral|Floating)\\\\b' },\n                    { token: 'entity.other.inherited-class.haskell',\n                        regex: '[A-Z][A-Za-z_\\']*' },\n                    { token: 'variable.other.generic-type.haskell',\n                        regex: '\\\\b[a-z][a-zA-Z0-9_\\']*\\\\b' },\n                    { defaultToken: 'meta.declaration.class.haskell' }] },\n            { token: 'keyword.other.haskell',\n                regex: '\\\\binstance\\\\b',\n                push: [{ token: 'keyword.other.haskell',\n                        regex: '\\\\bwhere\\\\b|$',\n                        next: 'pop' },\n                    { include: '#type_signature' },\n                    { defaultToken: 'meta.declaration.instance.haskell' }] },\n            { token: 'keyword.other.haskell',\n                regex: 'import',\n                push: [{ token: 'meta.import.haskell', regex: '$|;|^', next: 'pop' },\n                    { token: 'keyword.other.haskell', regex: 'qualified|as|hiding' },\n                    { include: '#module_name' },\n                    { include: '#module_exports' },\n                    { defaultToken: 'meta.import.haskell' }] },\n            { token: ['keyword.other.haskell', 'meta.deriving.haskell'],\n                regex: '(deriving)(\\\\s*\\\\()',\n                push: [{ token: 'meta.deriving.haskell', regex: '\\\\)', next: 'pop' },\n                    { token: 'entity.other.inherited-class.haskell',\n                        regex: '\\\\b[A-Z][a-zA-Z_\\']*' },\n                    { defaultToken: 'meta.deriving.haskell' }] },\n            { token: 'keyword.other.haskell',\n                regex: '\\\\b(?:deriving|where|data|type|case|of|let|in|newtype|default)\\\\b' },\n            { token: 'keyword.operator.haskell', regex: '\\\\binfix[lr]?\\\\b' },\n            { token: 'keyword.control.haskell',\n                regex: '\\\\b(?:do|if|then|else)\\\\b' },\n            { token: 'constant.numeric.float.haskell',\n                regex: '\\\\b(?:[0-9]+\\\\.[0-9]+(?:[eE][+-]?[0-9]+)?|[0-9]+[eE][+-]?[0-9]+)\\\\b',\n                comment: 'Floats are always decimal' },\n            { token: 'constant.numeric.haskell',\n                regex: '\\\\b(?:[0-9]+|0(?:[xX][0-9a-fA-F]+|[oO][0-7]+))\\\\b' },\n            { token: ['meta.preprocessor.c',\n                    'punctuation.definition.preprocessor.c',\n                    'meta.preprocessor.c'],\n                regex: '^(\\\\s*)(#)(\\\\s*\\\\w+)',\n                comment: 'In addition to Haskell\\'s \"native\" syntax, GHC permits the C preprocessor to be run on a source file.' },\n            { include: '#pragma' },\n            { token: 'punctuation.definition.string.begin.haskell',\n                regex: '\"',\n                push: [{ token: 'punctuation.definition.string.end.haskell',\n                        regex: '\"',\n                        next: 'pop' },\n                    { token: 'constant.character.escape.haskell',\n                        regex: '\\\\\\\\(?:NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|[abfnrtv\\\\\\\\\\\\\"\\'\\\\&])' },\n                    { token: 'constant.character.escape.octal.haskell',\n                        regex: '\\\\\\\\o[0-7]+|\\\\\\\\x[0-9A-Fa-f]+|\\\\\\\\[0-9]+' },\n                    { token: 'constant.character.escape.control.haskell',\n                        regex: '\\\\^[A-Z@\\\\[\\\\]\\\\\\\\\\\\^_]' },\n                    { defaultToken: 'string.quoted.double.haskell' }] },\n            { token: ['punctuation.definition.string.begin.haskell',\n                    'string.quoted.single.haskell',\n                    'constant.character.escape.haskell',\n                    'constant.character.escape.octal.haskell',\n                    'constant.character.escape.hexadecimal.haskell',\n                    'constant.character.escape.control.haskell',\n                    'punctuation.definition.string.end.haskell'],\n                regex: '(\\')(?:([\\\\ -\\\\[\\\\]-~])|(\\\\\\\\(?:NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|[abfnrtv\\\\\\\\\\\\\"\\'\\\\&]))|(\\\\\\\\o[0-7]+)|(\\\\\\\\x[0-9A-Fa-f]+)|(\\\\^[A-Z@\\\\[\\\\]\\\\\\\\\\\\^_]))(\\')' },\n            { token: ['meta.function.type-declaration.haskell',\n                    'entity.name.function.haskell',\n                    'meta.function.type-declaration.haskell',\n                    'keyword.other.double-colon.haskell'],\n                regex: '^(\\\\s*)([a-z_][a-zA-Z0-9_\\']*|\\\\([|!%$+\\\\-.,=</>]+\\\\))(\\\\s*)(::)',\n                push: [{ token: 'meta.function.type-declaration.haskell',\n                        regex: '$',\n                        next: 'pop' },\n                    { include: '#type_signature' },\n                    { defaultToken: 'meta.function.type-declaration.haskell' }] },\n            { token: 'support.constant.haskell',\n                regex: '\\\\b(?:Just|Nothing|Left|Right|True|False|LT|EQ|GT|\\\\(\\\\)|\\\\[\\\\])\\\\b' },\n            { token: 'constant.other.haskell', regex: '\\\\b[A-Z]\\\\w*\\\\b' },\n            { include: '#comments' },\n            { token: 'support.function.prelude.haskell',\n                regex: '\\\\b(?:abs|acos|acosh|all|and|any|appendFile|applyM|asTypeOf|asin|asinh|atan|atan2|atanh|break|catch|ceiling|compare|concat|concatMap|const|cos|cosh|curry|cycle|decodeFloat|div|divMod|drop|dropWhile|elem|encodeFloat|enumFrom|enumFromThen|enumFromThenTo|enumFromTo|error|even|exp|exponent|fail|filter|flip|floatDigits|floatRadix|floatRange|floor|fmap|foldl|foldl1|foldr|foldr1|fromEnum|fromInteger|fromIntegral|fromRational|fst|gcd|getChar|getContents|getLine|head|id|init|interact|ioError|isDenormalized|isIEEE|isInfinite|isNaN|isNegativeZero|iterate|last|lcm|length|lex|lines|log|logBase|lookup|map|mapM|mapM_|max|maxBound|maximum|maybe|min|minBound|minimum|mod|negate|not|notElem|null|odd|or|otherwise|pi|pred|print|product|properFraction|putChar|putStr|putStrLn|quot|quotRem|read|readFile|readIO|readList|readLn|readParen|reads|readsPrec|realToFrac|recip|rem|repeat|replicate|return|reverse|round|scaleFloat|scanl|scanl1|scanr|scanr1|seq|sequence|sequence_|show|showChar|showList|showParen|showString|shows|showsPrec|significand|signum|sin|sinh|snd|span|splitAt|sqrt|subtract|succ|sum|tail|take|takeWhile|tan|tanh|toEnum|toInteger|toRational|truncate|uncurry|undefined|unlines|until|unwords|unzip|unzip3|userError|words|writeFile|zip|zip3|zipWith|zipWith3)\\\\b' },\n            { include: '#infix_op' },\n            { token: 'keyword.operator.haskell',\n                regex: '[|!%$?~+:\\\\-.=</>\\\\\\\\]+',\n                comment: 'In case this regex seems overly general, note that Haskell permits the definition of new operators which can be nearly any string of punctuation characters, such as $%^&*.' },\n            { token: 'punctuation.separator.comma.haskell', regex: ',' }],\n        '#block_comment': [{ token: 'punctuation.definition.comment.haskell',\n                regex: '\\\\{-(?!#)',\n                push: [{ include: '#block_comment' },\n                    { token: 'punctuation.definition.comment.haskell',\n                        regex: '-\\\\}',\n                        next: 'pop' },\n                    { defaultToken: 'comment.block.haskell' }] }],\n        '#comments': [{ token: 'punctuation.definition.comment.haskell',\n                regex: '--.*',\n                push_: [{ token: 'comment.line.double-dash.haskell',\n                        regex: '$',\n                        next: 'pop' },\n                    { defaultToken: 'comment.line.double-dash.haskell' }] },\n            { include: '#block_comment' }],\n        '#infix_op': [{ token: 'entity.name.function.infix.haskell',\n                regex: '\\\\([|!%$+:\\\\-.=</>]+\\\\)|\\\\(,+\\\\)' }],\n        '#module_exports': [{ token: 'meta.declaration.exports.haskell',\n                regex: '\\\\(',\n                push: [{ token: 'meta.declaration.exports.haskell.end',\n                        regex: '\\\\)',\n                        next: 'pop' },\n                    { token: 'entity.name.function.haskell',\n                        regex: '\\\\b[a-z][a-zA-Z_\\']*' },\n                    { token: 'storage.type.haskell', regex: '\\\\b[A-Z][A-Za-z_\\']*' },\n                    { token: 'punctuation.separator.comma.haskell', regex: ',' },\n                    { include: '#infix_op' },\n                    { token: 'meta.other.unknown.haskell',\n                        regex: '\\\\(.*?\\\\)',\n                        comment: 'So named because I don\\'t know what to call this.' },\n                    { defaultToken: 'meta.declaration.exports.haskell.end' }] }],\n        '#module_name': [{ token: 'support.other.module.haskell',\n                regex: '[A-Z][A-Za-z._\\']*' }],\n        '#pragma': [{ token: 'meta.preprocessor.haskell',\n                regex: '\\\\{-#',\n                push: [{ token: 'meta.preprocessor.haskell',\n                        regex: '#-\\\\}',\n                        next: 'pop' },\n                    { token: 'keyword.other.preprocessor.haskell',\n                        regex: '\\\\b(?:LANGUAGE|UNPACK|INLINE)\\\\b' },\n                    { defaultToken: 'meta.preprocessor.haskell' }] }],\n        '#type_signature': [{ token: ['meta.class-constraint.haskell',\n                    'entity.other.inherited-class.haskell',\n                    'meta.class-constraint.haskell',\n                    'variable.other.generic-type.haskell',\n                    'meta.class-constraint.haskell',\n                    'keyword.other.big-arrow.haskell'],\n                regex: '(\\\\(\\\\s*)([A-Z][A-Za-z]*)(\\\\s+)([a-z][A-Za-z_\\']*)(\\\\)\\\\s*)(=>)' },\n            { include: '#pragma' },\n            { token: 'keyword.other.arrow.haskell', regex: '->' },\n            { token: 'keyword.other.big-arrow.haskell', regex: '=>' },\n            { token: 'support.type.prelude.haskell',\n                regex: '\\\\b(?:Int(?:eger)?|Maybe|Either|Bool|Float|Double|Char|String|Ordering|ShowS|ReadS|FilePath|IO(?:Error)?)\\\\b' },\n            { token: 'variable.other.generic-type.haskell',\n                regex: '\\\\b[a-z][a-zA-Z0-9_\\']*\\\\b' },\n            { token: 'storage.type.haskell',\n                regex: '\\\\b[A-Z][a-zA-Z0-9_\\']*\\\\b' },\n            { token: 'support.constant.unit.haskell', regex: '\\\\(\\\\)' },\n            { include: '#comments' }] };\n    this.normalizeRules();\n};\nHaskellHighlightRules.metaData = { fileTypes: ['hs'],\n    keyEquivalent: '^~H',\n    name: 'Haskell',\n    scopeName: 'source.haskell' };\noop.inherits(HaskellHighlightRules, TextHighlightRules);\nexports.HaskellHighlightRules = HaskellHighlightRules;\n\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\nvar FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n        this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n(function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n        var line = session.getLine(row);\n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n        return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                }\n                else if (foldStyle != \"all\")\n                    range = null;\n            }\n            return range;\n        }\n        if (foldStyle === \"markbegin\")\n            return;\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    this.getSectionRange = function (session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                }\n                else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                }\n                else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m)\n                continue;\n            if (m[1])\n                depth--;\n            else\n                depth++;\n            if (!depth)\n                break;\n        }\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/haskell\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/haskell_highlight_rules\",\"ace/mode/folding/cstyle\"], function(require, exports, module){/*\n  THIS FILE WAS AUTOGENERATED BY mode.tmpl.js\n*/\n\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar HaskellHighlightRules = require(\"./haskell_highlight_rules\").HaskellHighlightRules;\nvar FoldMode = require(\"./folding/cstyle\").FoldMode;\nvar Mode = function () {\n    this.HighlightRules = HaskellHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n(function () {\n    this.lineCommentStart = \"--\";\n    this.blockComment = null;\n    this.$id = \"ace/mode/haskell\";\n    this.snippetFileId = \"ace/snippets/haskell\";\n}).call(Mode.prototype);\nexports.Mode = Mode;\n\n});                (function() {\n                    ace.require([\"ace/mode/haskell\"], function(m) {\n                        if ( true && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            \n\n//# sourceURL=webpack://robot-karol-4/./node_modules/ace-builds/src-noconflict/mode-haskell.js?");

/***/ })

}]);