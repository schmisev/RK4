/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkrobot_karol_4"] = self["webpackChunkrobot_karol_4"] || []).push([["vendors-node_modules_ace-builds_src-noconflict_mode-prql_js"],{

/***/ "./node_modules/ace-builds/src-noconflict/mode-prql.js":
/*!*************************************************************!*\
  !*** ./node_modules/ace-builds/src-noconflict/mode-prql.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nace.define(\"ace/mode/prql_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module){// https://prql-lang.org/\n\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\nvar PrqlHighlightRules = function () {\n    var builtinFunctions = \"min|max|sum|average|stddev|every|any|concat_array|count|\" +\n        \"lag|lead|first|last|rank|rank_dense|row_number|\" +\n        \"round|as|in|\" +\n        \"tuple_every|tuple_map|tuple_zip|_eq|_is_null|\" +\n        \"from_text|\" +\n        \"lower|upper|\" +\n        \"read_parquet|read_csv\";\n    var builtinTypes = [\n        \"bool\",\n        \"int\",\n        \"int8\",\n        \"int16\",\n        \"int32\",\n        \"int64\",\n        \"int128\",\n        \"float\",\n        \"text\",\n        \"timestamp\",\n        \"set\"\n    ].join(\"|\");\n    var keywordMapper = this.createKeywordMapper({\n        \"constant.language\": \"null\",\n        \"constant.language.boolean\": \"true|false\",\n        \"keyword\": \"let|into|case|prql|type|module|internal\",\n        \"storage.type\": \"let|func\",\n        \"support.function\": builtinFunctions,\n        \"support.type\": builtinTypes,\n        \"variable.language\": \"date|math\"\n    }, \"identifier\");\n    var escapeRe = /\\\\(\\d+|['\"\\\\&bfnrt]|u\\{[0-9a-fA-F]{1,6}\\}|x[0-9a-fA-F]{2})/;\n    var identifierRe = /[A-Za-z_][a-z_A-Z0-9]/.source;\n    var numRe = /(?:\\d\\d*(?:\\.\\d*)?|\\.\\d+)(?:[eE][+-]?\\d+\\b)?/.source;\n    var bidi = \"[\\\\u202A\\\\u202B\\\\u202D\\\\u202E\\\\u2066\\\\u2067\\\\u2068\\\\u202C\\\\u2069]\";\n    this.$rules = {\n        start: [\n            {\n                token: \"string.start\",\n                regex: 's?\"',\n                next: \"string\"\n            }, {\n                token: \"string.start\",\n                regex: 'f\"',\n                next: \"fstring\"\n            }, {\n                token: \"string.start\",\n                regex: 'r\"',\n                next: \"rstring\"\n            }, {\n                token: \"string.single\",\n                start: \"'\",\n                end: \"'\"\n            }, {\n                token: \"string.character\",\n                regex: \"'(?:\" + escapeRe.source + \"|.)'?\"\n            }, {\n                token: \"constant.language\",\n                regex: \"^\" + identifierRe + \"*\"\n            }, {\n                token: [\"constant.numeric\", \"keyword\"],\n                regex: \"(\" + numRe + \")(years|months|weeks|days|hours|minutes|seconds|milliseconds|microseconds)\"\n            }, {\n                token: \"constant.numeric\", // hexadecimal, octal and binary\n                regex: /0(?:[xX][0-9a-fA-F]+|[oO][0-7]+|[bB][01]+)\\b/\n            }, {\n                token: \"constant.numeric\", // decimal integers and floats\n                regex: numRe\n            }, {\n                token: \"comment.block.documentation\",\n                regex: \"#!.*\"\n            }, {\n                token: \"comment.line.number-sign\",\n                regex: \"#.*\"\n            }, {\n                token: \"keyword.operator\",\n                regex: /\\|\\s*/,\n                next: \"pipe\"\n            }, {\n                token: \"keyword.operator\",\n                regex: /->|=>|==|!=|>=|<=|~=|&&|\\|\\||\\?\\?|\\/\\/|@/\n            }, {\n                token: \"invalid.illegal\",\n                regex: bidi\n            }, {\n                token: \"punctuation.operator\",\n                regex: /[,`]/\n            }, {\n                token: keywordMapper,\n                regex: \"[\\\\w\\\\xff-\\\\u218e\\\\u2455-\\\\uffff]+\\\\b\"\n            }, {\n                token: \"paren.lparen\",\n                regex: /[\\[({]/\n            }, {\n                token: \"paren.rparen\",\n                regex: /[\\])}]/\n            }\n        ],\n        pipe: [{\n                token: \"constant.language\",\n                regex: identifierRe + \"*\",\n                next: \"pop\"\n            }, {\n                token: \"error\",\n                regex: \"\",\n                next: \"pop\"\n            }],\n        string: [{\n                token: \"constant.character.escape\",\n                regex: escapeRe\n            }, {\n                token: \"text\",\n                regex: /\\\\(\\s|$)/,\n                next: \"stringGap\"\n            }, {\n                token: \"string.end\",\n                regex: '\"',\n                next: \"start\"\n            }, {\n                token: \"invalid.illegal\",\n                regex: bidi\n            }, {\n                defaultToken: \"string.double\"\n            }],\n        stringGap: [{\n                token: \"text\",\n                regex: /\\\\/,\n                next: \"string\"\n            }, {\n                token: \"error\",\n                regex: \"\",\n                next: \"start\"\n            }],\n        fstring: [{\n                token: \"constant.character.escape\",\n                regex: escapeRe\n            }, {\n                token: \"string.end\",\n                regex: '\"',\n                next: \"start\"\n            }, {\n                token: \"invalid.illegal\",\n                regex: bidi\n            }, {\n                token: \"paren.lparen\",\n                regex: \"{\",\n                push: \"fstringParenRules\"\n            }, {\n                token: \"invalid.illegal\",\n                regex: bidi\n            }, {\n                defaultToken: \"string\"\n            }],\n        fstringParenRules: [{\n                token: \"constant.language\",\n                regex: \"^\" + identifierRe + \"*\"\n            }, {\n                token: \"paren.rparen\",\n                regex: \"}\",\n                next: \"pop\"\n            }],\n        rstring: [{\n                token: \"string.end\",\n                regex: '\"',\n                next: \"start\"\n            }, {\n                token: \"invalid.illegal\",\n                regex: bidi\n            }, {\n                defaultToken: \"string\"\n            }]\n    };\n    this.normalizeRules();\n};\noop.inherits(PrqlHighlightRules, TextHighlightRules);\nexports.PrqlHighlightRules = PrqlHighlightRules;\n\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\nvar FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n        this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n(function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n        var line = session.getLine(row);\n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n        return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                }\n                else if (foldStyle != \"all\")\n                    range = null;\n            }\n            return range;\n        }\n        if (foldStyle === \"markbegin\")\n            return;\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    this.getSectionRange = function (session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                }\n                else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                }\n                else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m)\n                continue;\n            if (m[1])\n                depth--;\n            else\n                depth++;\n            if (!depth)\n                break;\n        }\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/prql\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/prql_highlight_rules\",\"ace/mode/folding/cstyle\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar HighlightRules = require(\"./prql_highlight_rules\").PrqlHighlightRules;\nvar FoldMode = require(\"./folding/cstyle\").FoldMode;\nvar Mode = function () {\n    this.HighlightRules = HighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n(function () {\n    this.lineCommentStart = \"#\";\n    this.$id = \"ace/mode/prql\";\n}).call(Mode.prototype);\nexports.Mode = Mode;\n\n});                (function() {\n                    ace.require([\"ace/mode/prql\"], function(m) {\n                        if ( true && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            \n\n//# sourceURL=webpack://robot-karol-4/./node_modules/ace-builds/src-noconflict/mode-prql.js?");

/***/ })

}]);