/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkrobot_karol_4"] = self["webpackChunkrobot_karol_4"] || []).push([["node_modules_ace-builds_src-noconflict_mode-gherkin_js"],{

/***/ "./node_modules/ace-builds/src-noconflict/mode-gherkin.js":
/*!****************************************************************!*\
  !*** ./node_modules/ace-builds/src-noconflict/mode-gherkin.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nace.define(\"ace/mode/gherkin_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module){var oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\nvar stringEscape = \"\\\\\\\\(x[0-9A-Fa-f]{2}|[0-7]{3}|[\\\\\\\\abfnrtv'\\\"]|U[0-9A-Fa-f]{8}|u[0-9A-Fa-f]{4})\";\nvar GherkinHighlightRules = function () {\n    var languages = [{\n            name: \"en\",\n            labels: \"Feature|Background|Scenario(?: Outline)?|Examples\",\n            keywords: \"Given|When|Then|And|But\"\n        } \n    ];\n    var labels = languages.map(function (l) {\n        return l.labels;\n    }).join(\"|\");\n    var keywords = languages.map(function (l) {\n        return l.keywords;\n    }).join(\"|\");\n    this.$rules = {\n        start: [{\n                token: \"constant.numeric\",\n                regex: \"(?:(?:[1-9]\\\\d*)|(?:0))\"\n            }, {\n                token: \"comment\",\n                regex: \"#.*$\"\n            }, {\n                token: \"keyword\",\n                regex: \"(?:\" + labels + \"):|(?:\" + keywords + \")\\\\b\"\n            }, {\n                token: \"keyword\",\n                regex: \"\\\\*\"\n            }, {\n                token: \"string\", // multi line \"\"\" string start\n                regex: '\"{3}',\n                next: \"qqstring3\"\n            }, {\n                token: \"string\", // \" string\n                regex: '\"',\n                next: \"qqstring\"\n            }, {\n                token: \"text\",\n                regex: \"^\\\\s*(?=@[\\\\w])\",\n                next: [{\n                        token: \"text\",\n                        regex: \"\\\\s+\"\n                    }, {\n                        token: \"variable.parameter\",\n                        regex: \"@[\\\\w]+\"\n                    }, {\n                        token: \"empty\",\n                        regex: \"\",\n                        next: \"start\"\n                    }]\n            }, {\n                token: \"comment\",\n                regex: \"<[^>]+>\"\n            }, {\n                token: \"comment\",\n                regex: \"\\\\|(?=.)\",\n                next: \"table-item\"\n            }, {\n                token: \"comment\",\n                regex: \"\\\\|$\",\n                next: \"start\"\n            }],\n        \"qqstring3\": [{\n                token: \"constant.language.escape\",\n                regex: stringEscape\n            }, {\n                token: \"string\", // multi line \"\"\" string end\n                regex: '\"{3}',\n                next: \"start\"\n            }, {\n                defaultToken: \"string\"\n            }],\n        \"qqstring\": [{\n                token: \"constant.language.escape\",\n                regex: stringEscape\n            }, {\n                token: \"string\",\n                regex: \"\\\\\\\\$\",\n                next: \"qqstring\"\n            }, {\n                token: \"string\",\n                regex: '\"|$',\n                next: \"start\"\n            }, {\n                defaultToken: \"string\"\n            }],\n        \"table-item\": [{\n                token: \"comment\",\n                regex: /$/,\n                next: \"start\"\n            }, {\n                token: \"comment\",\n                regex: /\\|/\n            }, {\n                token: \"string\",\n                regex: /\\\\./\n            }, {\n                defaultToken: \"string\"\n            }]\n    };\n    this.normalizeRules();\n};\noop.inherits(GherkinHighlightRules, TextHighlightRules);\nexports.GherkinHighlightRules = GherkinHighlightRules;\n\n});\n\nace.define(\"ace/mode/gherkin\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/gherkin_highlight_rules\"], function(require, exports, module){var oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar GherkinHighlightRules = require(\"./gherkin_highlight_rules\").GherkinHighlightRules;\nvar Mode = function () {\n    this.HighlightRules = GherkinHighlightRules;\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n(function () {\n    this.lineCommentStart = \"#\";\n    this.$id = \"ace/mode/gherkin\";\n    this.getNextLineIndent = function (state, line, tab) {\n        var indent = this.$getIndent(line);\n        var space2 = \"  \";\n        var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n        var tokens = tokenizedLine.tokens;\n        if (line.match(\"[ ]*\\\\|\")) {\n            indent += \"| \";\n        }\n        if (tokens.length && tokens[tokens.length - 1].type == \"comment\") {\n            return indent;\n        }\n        if (state == \"start\") {\n            if (line.match(\"Scenario:|Feature:|Scenario Outline:|Background:\")) {\n                indent += space2;\n            }\n            else if (line.match(\"(Given|Then).+(:)$|Examples:\")) {\n                indent += space2;\n            }\n            else if (line.match(\"\\\\*.+\")) {\n                indent += \"* \";\n            }\n        }\n        return indent;\n    };\n}).call(Mode.prototype);\nexports.Mode = Mode;\n\n});                (function() {\n                    ace.require([\"ace/mode/gherkin\"], function(m) {\n                        if ( true && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            \n\n//# sourceURL=webpack://robot-karol-4/./node_modules/ace-builds/src-noconflict/mode-gherkin.js?");

/***/ })

}]);