/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkrobot_karol_4"] = self["webpackChunkrobot_karol_4"] || []).push([["vendors-node_modules_ace-builds_src-noconflict_mode-kotlin_js"],{

/***/ "./node_modules/ace-builds/src-noconflict/mode-kotlin.js":
/*!***************************************************************!*\
  !*** ./node_modules/ace-builds/src-noconflict/mode-kotlin.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nace.define(\"ace/mode/kotlin_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\nvar KotlinHighlightRules = function () {\n    var keywordMapper = this.$keywords = this.createKeywordMapper({\n        \"storage.modifier.kotlin\": \"var|val|public|private|protected|abstract|final|enum|open|attribute|\"\n            + \"annotation|override|inline|var|val|vararg|lazy|in|out|internal|data|tailrec|operator|infix|const|\"\n            + \"yield|typealias|typeof|sealed|inner|value|lateinit|external|suspend|noinline|crossinline|reified|\"\n            + \"expect|actual\",\n        \"keyword\": \"companion|class|object|interface|namespace|type|fun|constructor|if|else|while|for|do|return|when|\"\n            + \"where|break|continue|try|catch|finally|throw|in|is|as|assert|constructor\",\n        \"constant.language.kotlin\": \"true|false|null|this|super\",\n        \"entity.name.function.kotlin\": \"get|set\"\n    }, \"identifier\");\n    this.$rules = {\n        start: [{\n                include: \"#comments\"\n            }, {\n                token: [\n                    \"text\",\n                    \"keyword.other.kotlin\",\n                    \"text\",\n                    \"entity.name.package.kotlin\",\n                    \"text\"\n                ],\n                regex: /^(\\s*)(package)\\b(?:(\\s*)([^ ;$]+)(\\s*))?/\n            }, {\n                token: \"comment\",\n                regex: /^\\s*#!.*$/\n            }, {\n                include: \"#imports\"\n            }, {\n                include: \"#expressions\"\n            }, {\n                token: \"string\",\n                regex: /@[a-zA-Z][a-zA-Z:]*\\b/\n            }, {\n                token: [\"keyword.other.kotlin\", \"text\", \"entity.name.variable.kotlin\"],\n                regex: /\\b(var|val)(\\s+)([a-zA-Z_][\\w]*)\\b/\n            }, {\n                token: [\"keyword.other.kotlin\", \"text\", \"entity.name.variable.kotlin\", \"paren.lparen\"],\n                regex: /(fun)(\\s+)(\\w+)(\\()/,\n                push: [{\n                        token: [\"variable.parameter.function.kotlin\", \"text\", \"keyword.operator\"],\n                        regex: /(\\w+)(\\s*)(:)/\n                    }, {\n                        token: \"paren.rparen\",\n                        regex: /\\)/,\n                        next: \"pop\"\n                    }, {\n                        include: \"#comments\"\n                    }, {\n                        include: \"#types\"\n                    }, {\n                        include: \"#expressions\"\n                    }]\n            }, {\n                token: [\"text\", \"keyword\", \"text\", \"identifier\"],\n                regex: /^(\\s*)(class)(\\s*)([a-zA-Z]+)/,\n                next: \"#classes\"\n            }, {\n                token: [\"identifier\", \"punctuaction\"],\n                regex: /([a-zA-Z_][\\w]*)(<)/,\n                push: [{\n                        include: \"#generics\"\n                    }, {\n                        include: \"#defaultTypes\"\n                    }, {\n                        token: \"punctuation\",\n                        regex: />/,\n                        next: \"pop\"\n                    }]\n            }, {\n                token: keywordMapper,\n                regex: /[a-zA-Z_][\\w]*\\b/\n            }, {\n                token: \"paren.lparen\",\n                regex: /[{(\\[]/\n            }, {\n                token: \"paren.rparen\",\n                regex: /[})\\]]/\n            }],\n        \"#comments\": [{\n                token: \"comment\",\n                regex: /\\/\\*/,\n                push: [{\n                        token: \"comment\",\n                        regex: /\\*\\//,\n                        next: \"pop\"\n                    }, {\n                        defaultToken: \"comment\"\n                    }]\n            }, {\n                token: [\n                    \"text\",\n                    \"comment\"\n                ],\n                regex: /(\\s*)(\\/\\/.*$)/\n            }],\n        \"#constants\": [{\n                token: \"constant.numeric.kotlin\",\n                regex: /\\b(?:0(?:x|X)[0-9a-fA-F]*|(?:[0-9]+\\.?[0-9]*|\\.[0-9]+)(?:(?:e|E)(?:\\+|-)?[0-9]+)?)(?:[LlFfUuDd]|UL|ul)?\\b/\n            }, {\n                token: \"constant.other.kotlin\",\n                regex: /\\b[A-Z][A-Z0-9_]+\\b/\n            }],\n        \"#expressions\": [{\n                include: \"#strings\"\n            }, {\n                include: \"#constants\"\n            }, {\n                include: \"#keywords\"\n            }],\n        \"#imports\": [{\n                token: [\n                    \"text\",\n                    \"keyword.other.kotlin\",\n                    \"text\",\n                    \"keyword.other.kotlin\"\n                ],\n                regex: /^(\\s*)(import)(\\s+[^ $]+\\s+)((?:as)?)/\n            }],\n        \"#generics\": [{\n                token: \"punctuation\",\n                regex: /</,\n                push: [{\n                        token: \"punctuation\",\n                        regex: />/,\n                        next: \"pop\"\n                    }, {\n                        token: \"storage.type.generic.kotlin\",\n                        regex: /\\w+/\n                    }, {\n                        token: \"keyword.operator\",\n                        regex: /:/\n                    }, {\n                        token: \"punctuation\",\n                        regex: /,/\n                    }, {\n                        include: \"#generics\"\n                    }]\n            }],\n        \"#classes\": [{\n                include: \"#generics\"\n            }, {\n                token: \"keyword\",\n                regex: /public|private|constructor/\n            }, {\n                token: \"string\",\n                regex: /@[a-zA-Z][a-zA-Z:]*\\b/\n            }, {\n                token: \"text\",\n                regex: /(?=$|\\(|{)/,\n                next: \"start\"\n            }],\n        \"#keywords\": [{\n                token: \"keyword.operator.kotlin\",\n                regex: /==|!=|===|!==|<=|>=|<|>|=>|->|::|\\?:/\n            }, {\n                token: \"keyword.operator.assignment.kotlin\",\n                regex: /=/\n            }, {\n                token: \"keyword.operator.declaration.kotlin\",\n                regex: /:/,\n                push: [{\n                        token: \"text\",\n                        regex: /(?=$|{|=|,)/,\n                        next: \"pop\"\n                    }, {\n                        include: \"#types\"\n                    }]\n            }, {\n                token: \"keyword.operator.dot.kotlin\",\n                regex: /\\./\n            }, {\n                token: \"keyword.operator.increment-decrement.kotlin\",\n                regex: /\\-\\-|\\+\\+/\n            }, {\n                token: \"keyword.operator.arithmetic.kotlin\",\n                regex: /\\-|\\+|\\*|\\/|%/\n            }, {\n                token: \"keyword.operator.arithmetic.assign.kotlin\",\n                regex: /\\+=|\\-=|\\*=|\\/=/\n            }, {\n                token: \"keyword.operator.logical.kotlin\",\n                regex: /!|&&|\\|\\|/\n            }, {\n                token: \"keyword.operator.range.kotlin\",\n                regex: /\\.\\./\n            }, {\n                token: \"punctuation.kotlin\",\n                regex: /[;,]/\n            }],\n        \"#types\": [{\n                include: \"#defaultTypes\"\n            }, {\n                token: \"paren.lparen\",\n                regex: /\\(/,\n                push: [{\n                        token: \"paren.rparen\",\n                        regex: /\\)/,\n                        next: \"pop\"\n                    }, {\n                        include: \"#defaultTypes\"\n                    }, {\n                        token: \"punctuation\",\n                        regex: /,/\n                    }]\n            }, {\n                include: \"#generics\"\n            }, {\n                token: \"keyword.operator.declaration.kotlin\",\n                regex: /->/\n            }, {\n                token: \"paren.rparen\",\n                regex: /\\)/\n            }, {\n                token: \"keyword.operator.declaration.kotlin\",\n                regex: /:/,\n                push: [{\n                        token: \"text\",\n                        regex: /(?=$|{|=|,)/,\n                        next: \"pop\"\n                    }, {\n                        include: \"#types\"\n                    }]\n            }],\n        \"#defaultTypes\": [{\n                token: \"storage.type.buildin.kotlin\",\n                regex: /\\b(Any|Unit|String|Int|Boolean|Char|Long|Double|Float|Short|Byte|dynamic|IntArray|BooleanArray|CharArray|LongArray|DoubleArray|FloatArray|ShortArray|ByteArray|Array|List|Map|Nothing|Enum|Throwable|Comparable)\\b/\n            }],\n        \"#strings\": [{\n                token: \"string\",\n                regex: /\"\"\"/,\n                push: [{\n                        token: \"string\",\n                        regex: /\"\"\"/,\n                        next: \"pop\"\n                    }, {\n                        token: \"variable.parameter.template.kotlin\",\n                        regex: /\\$\\w+|\\${[^}]+}/\n                    }, {\n                        token: \"constant.character.escape.kotlin\",\n                        regex: /\\\\./\n                    }, {\n                        defaultToken: \"string\"\n                    }]\n            }, {\n                token: \"string\",\n                regex: /\"/,\n                push: [{\n                        token: \"string\",\n                        regex: /\"/,\n                        next: \"pop\"\n                    }, {\n                        token: \"variable.parameter.template.kotlin\",\n                        regex: /\\$\\w+|\\$\\{[^\\}]+\\}/\n                    }, {\n                        token: \"constant.character.escape.kotlin\",\n                        regex: /\\\\./\n                    }, {\n                        defaultToken: \"string\"\n                    }]\n            }, {\n                token: \"string\",\n                regex: /'/,\n                push: [{\n                        token: \"string\",\n                        regex: /'/,\n                        next: \"pop\"\n                    }, {\n                        token: \"constant.character.escape.kotlin\",\n                        regex: /\\\\./\n                    }, {\n                        defaultToken: \"string\"\n                    }]\n            }, {\n                token: \"string\",\n                regex: /`/,\n                push: [{\n                        token: \"string\",\n                        regex: /`/,\n                        next: \"pop\"\n                    }, {\n                        defaultToken: \"string\"\n                    }]\n            }]\n    };\n    this.normalizeRules();\n};\nKotlinHighlightRules.metaData = {\n    fileTypes: [\"kt\", \"kts\"],\n    name: \"Kotlin\",\n    scopeName: \"source.Kotlin\"\n};\noop.inherits(KotlinHighlightRules, TextHighlightRules);\nexports.KotlinHighlightRules = KotlinHighlightRules;\n\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\nvar FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n        this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n(function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n        var line = session.getLine(row);\n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n        return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                }\n                else if (foldStyle != \"all\")\n                    range = null;\n            }\n            return range;\n        }\n        if (foldStyle === \"markbegin\")\n            return;\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    this.getSectionRange = function (session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                }\n                else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                }\n                else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m)\n                continue;\n            if (m[1])\n                depth--;\n            else\n                depth++;\n            if (!depth)\n                break;\n        }\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/kotlin\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/kotlin_highlight_rules\",\"ace/mode/folding/cstyle\"], function(require, exports, module){/*\n  THIS FILE WAS AUTOGENERATED BY mode.tmpl.js\n*/\n\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar KotlinHighlightRules = require(\"./kotlin_highlight_rules\").KotlinHighlightRules;\nvar FoldMode = require(\"./folding/cstyle\").FoldMode;\nvar Mode = function () {\n    this.HighlightRules = KotlinHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n(function () {\n    this.lineCommentStart = \"//\";\n    this.blockComment = { start: \"/*\", end: \"*/\" };\n    this.$id = \"ace/mode/kotlin\";\n}).call(Mode.prototype);\nexports.Mode = Mode;\n\n});                (function() {\n                    ace.require([\"ace/mode/kotlin\"], function(m) {\n                        if ( true && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            \n\n//# sourceURL=webpack://robot-karol-4/./node_modules/ace-builds/src-noconflict/mode-kotlin.js?");

/***/ })

}]);