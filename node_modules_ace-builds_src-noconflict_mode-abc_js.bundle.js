/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkrobot_karol_4"] = self["webpackChunkrobot_karol_4"] || []).push([["node_modules_ace-builds_src-noconflict_mode-abc_js"],{

/***/ "./node_modules/ace-builds/src-noconflict/mode-abc.js":
/*!************************************************************!*\
  !*** ./node_modules/ace-builds/src-noconflict/mode-abc.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nace.define(\"ace/mode/abc_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module){/* This file was partially autogenerated from https://github.com/jimhawkridge/SublimeABC\n\n Modifications\n\n -  more classes to express the abc semantic\n -  added syntax highlighting for Zupfnoter conventions (https://github.com/bwl21/zupfnoter)\n -  separate note pitch and note duration - even if it looks the same\n\n ***********************************************************************************************/\n\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\nvar ABCHighlightRules = function () {\n    this.$rules = {\n        start: [\n            {\n                token: ['zupfnoter.information.comment.line.percentage', 'information.keyword', 'in formation.keyword.embedded'],\n                regex: '(%%%%)(hn\\\\.[a-z]*)(.*)',\n                comment: 'Instruction Comment'\n            },\n            {\n                token: ['information.comment.line.percentage', 'information.keyword.embedded'],\n                regex: '(%%)(.*)',\n                comment: 'Instruction Comment'\n            },\n            {\n                token: 'comment.line.percentage',\n                regex: '%.*',\n                comment: 'Comments'\n            },\n            {\n                token: 'barline.keyword.operator',\n                regex: '[\\\\[:]*[|:][|\\\\]:]*(?:\\\\[?[0-9]+)?|\\\\[[0-9]+',\n                comment: 'Bar lines'\n            },\n            {\n                token: ['information.keyword.embedded', 'information.argument.string.unquoted'],\n                regex: '(\\\\[[A-Za-z]:)([^\\\\]]*\\\\])',\n                comment: 'embedded Header lines'\n            },\n            {\n                token: ['information.keyword', 'information.argument.string.unquoted'],\n                regex: '^([A-Za-z]:)([^%\\\\\\\\]*)',\n                comment: 'Header lines'\n            },\n            {\n                token: ['text', 'entity.name.function', 'string.unquoted', 'text'],\n                regex: '(\\\\[)([A-Z]:)(.*?)(\\\\])',\n                comment: 'Inline fields'\n            },\n            {\n                token: ['accent.constant.language', 'pitch.constant.numeric', 'duration.constant.numeric'],\n                regex: '([\\\\^=_]*)([A-Ga-gz][,\\']*)([0-9]*/*[><0-9]*)',\n                comment: 'Notes'\n            },\n            {\n                token: 'zupfnoter.jumptarget.string.quoted',\n                regex: '[\\\\\"!]\\\\^\\\\:.*?[\\\\\"!]',\n                comment: 'Zupfnoter jumptarget'\n            }, {\n                token: 'zupfnoter.goto.string.quoted',\n                regex: '[\\\\\"!]\\\\^\\\\@.*?[\\\\\"!]',\n                comment: 'Zupfnoter goto'\n            },\n            {\n                token: 'zupfnoter.annotation.string.quoted',\n                regex: '[\\\\\"!]\\\\^\\\\!.*?[\\\\\"!]',\n                comment: 'Zupfnoter annoation'\n            },\n            {\n                token: 'zupfnoter.annotationref.string.quoted',\n                regex: '[\\\\\"!]\\\\^\\\\#.*?[\\\\\"!]',\n                comment: 'Zupfnoter annotation reference'\n            },\n            {\n                token: 'chordname.string.quoted',\n                regex: '[\\\\\"!]\\\\^.*?[\\\\\"!]',\n                comment: 'abc chord'\n            },\n            {\n                token: 'string.quoted',\n                regex: '[\\\\\"!].*?[\\\\\"!]',\n                comment: 'abc annotation'\n            }\n        ]\n    };\n    this.normalizeRules();\n};\nABCHighlightRules.metaData = {\n    fileTypes: ['abc'],\n    name: 'ABC',\n    scopeName: 'text.abcnotation'\n};\noop.inherits(ABCHighlightRules, TextHighlightRules);\nexports.ABCHighlightRules = ABCHighlightRules;\n\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\nvar FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n        this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n(function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n        var line = session.getLine(row);\n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n        return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                }\n                else if (foldStyle != \"all\")\n                    range = null;\n            }\n            return range;\n        }\n        if (foldStyle === \"markbegin\")\n            return;\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    this.getSectionRange = function (session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                }\n                else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                }\n                else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m)\n                continue;\n            if (m[1])\n                depth--;\n            else\n                depth++;\n            if (!depth)\n                break;\n        }\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/abc\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/abc_highlight_rules\",\"ace/mode/folding/cstyle\"], function(require, exports, module){/*\n THIS FILE WAS AUTOGENERATED BY mode.tmpl.js\n */\n\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar ABCHighlightRules = require(\"./abc_highlight_rules\").ABCHighlightRules;\nvar FoldMode = require(\"./folding/cstyle\").FoldMode;\nvar Mode = function () {\n    this.HighlightRules = ABCHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n(function () {\n    this.lineCommentStart = \"%\";\n    this.$id = \"ace/mode/abc\";\n    this.snippetFileId = \"ace/snippets/abc\";\n}).call(Mode.prototype);\nexports.Mode = Mode;\n\n});                (function() {\n                    ace.require([\"ace/mode/abc\"], function(m) {\n                        if ( true && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            \n\n//# sourceURL=webpack://robot-karol-4/./node_modules/ace-builds/src-noconflict/mode-abc.js?");

/***/ })

}]);