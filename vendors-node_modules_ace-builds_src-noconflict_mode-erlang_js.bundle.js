/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkrobot_karol_4"] = self["webpackChunkrobot_karol_4"] || []).push([["vendors-node_modules_ace-builds_src-noconflict_mode-erlang_js"],{

/***/ "./node_modules/ace-builds/src-noconflict/mode-erlang.js":
/*!***************************************************************!*\
  !*** ./node_modules/ace-builds/src-noconflict/mode-erlang.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nace.define(\"ace/mode/erlang_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module){/* This file was autogenerated from tm bundles\\erlang.tmbundle\\Syntaxes\\Erlang.plist (uuid: ) */\n\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\nvar ErlangHighlightRules = function () {\n    this.$rules = { start: [{ include: '#module-directive' },\n            { include: '#import-export-directive' },\n            { include: '#behaviour-directive' },\n            { include: '#record-directive' },\n            { include: '#define-directive' },\n            { include: '#macro-directive' },\n            { include: '#directive' },\n            { include: '#function' },\n            { include: '#everything-else' }],\n        '#atom': [{ token: 'punctuation.definition.symbol.begin.erlang',\n                regex: '\\'',\n                push: [{ token: 'punctuation.definition.symbol.end.erlang',\n                        regex: '\\'',\n                        next: 'pop' },\n                    { token: ['punctuation.definition.escape.erlang',\n                            'constant.other.symbol.escape.erlang',\n                            'punctuation.definition.escape.erlang',\n                            'constant.other.symbol.escape.erlang',\n                            'constant.other.symbol.escape.erlang'],\n                        regex: '(\\\\\\\\)(?:([bdefnrstv\\\\\\\\\\'\"])|(\\\\^)([@-_])|([0-7]{1,3}))' },\n                    { token: 'invalid.illegal.atom.erlang', regex: '\\\\\\\\\\\\^?.?' },\n                    { defaultToken: 'constant.other.symbol.quoted.single.erlang' }] },\n            { token: 'constant.other.symbol.unquoted.erlang',\n                regex: '[a-z][a-zA-Z\\\\d@_]*' }],\n        '#behaviour-directive': [{ token: ['meta.directive.behaviour.erlang',\n                    'punctuation.section.directive.begin.erlang',\n                    'meta.directive.behaviour.erlang',\n                    'keyword.control.directive.behaviour.erlang',\n                    'meta.directive.behaviour.erlang',\n                    'punctuation.definition.parameters.begin.erlang',\n                    'meta.directive.behaviour.erlang',\n                    'entity.name.type.class.behaviour.definition.erlang',\n                    'meta.directive.behaviour.erlang',\n                    'punctuation.definition.parameters.end.erlang',\n                    'meta.directive.behaviour.erlang',\n                    'punctuation.section.directive.end.erlang'],\n                regex: '^(\\\\s*)(-)(\\\\s*)(behaviour)(\\\\s*)(\\\\()(\\\\s*)([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(\\\\))(\\\\s*)(\\\\.)' }],\n        '#binary': [{ token: 'punctuation.definition.binary.begin.erlang',\n                regex: '<<',\n                push: [{ token: 'punctuation.definition.binary.end.erlang',\n                        regex: '>>',\n                        next: 'pop' },\n                    { token: ['punctuation.separator.binary.erlang',\n                            'punctuation.separator.value-size.erlang'],\n                        regex: '(,)|(:)' },\n                    { include: '#internal-type-specifiers' },\n                    { include: '#everything-else' },\n                    { defaultToken: 'meta.structure.binary.erlang' }] }],\n        '#character': [{ token: ['punctuation.definition.character.erlang',\n                    'punctuation.definition.escape.erlang',\n                    'constant.character.escape.erlang',\n                    'punctuation.definition.escape.erlang',\n                    'constant.character.escape.erlang',\n                    'constant.character.escape.erlang'],\n                regex: '(\\\\$)(\\\\\\\\)(?:([bdefnrstv\\\\\\\\\\'\"])|(\\\\^)([@-_])|([0-7]{1,3}))' },\n            { token: 'invalid.illegal.character.erlang',\n                regex: '\\\\$\\\\\\\\\\\\^?.?' },\n            { token: ['punctuation.definition.character.erlang',\n                    'constant.character.erlang'],\n                regex: '(\\\\$)(\\\\S)' },\n            { token: 'invalid.illegal.character.erlang', regex: '\\\\$.?' }],\n        '#comment': [{ token: 'punctuation.definition.comment.erlang',\n                regex: '%.*$',\n                push_: [{ token: 'comment.line.percentage.erlang',\n                        regex: '$',\n                        next: 'pop' },\n                    { defaultToken: 'comment.line.percentage.erlang' }] }],\n        '#define-directive': [{ token: ['meta.directive.define.erlang',\n                    'punctuation.section.directive.begin.erlang',\n                    'meta.directive.define.erlang',\n                    'keyword.control.directive.define.erlang',\n                    'meta.directive.define.erlang',\n                    'punctuation.definition.parameters.begin.erlang',\n                    'meta.directive.define.erlang',\n                    'entity.name.function.macro.definition.erlang',\n                    'meta.directive.define.erlang',\n                    'punctuation.separator.parameters.erlang'],\n                regex: '^(\\\\s*)(-)(\\\\s*)(define)(\\\\s*)(\\\\()(\\\\s*)([a-zA-Z\\\\d@_]+)(\\\\s*)(,)',\n                push: [{ token: ['punctuation.definition.parameters.end.erlang',\n                            'meta.directive.define.erlang',\n                            'punctuation.section.directive.end.erlang'],\n                        regex: '(\\\\))(\\\\s*)(\\\\.)',\n                        next: 'pop' },\n                    { include: '#everything-else' },\n                    { defaultToken: 'meta.directive.define.erlang' }] },\n            { token: 'meta.directive.define.erlang',\n                regex: '(?=^\\\\s*-\\\\s*define\\\\s*\\\\(\\\\s*[a-zA-Z\\\\d@_]+\\\\s*\\\\()',\n                push: [{ token: ['punctuation.definition.parameters.end.erlang',\n                            'meta.directive.define.erlang',\n                            'punctuation.section.directive.end.erlang'],\n                        regex: '(\\\\))(\\\\s*)(\\\\.)',\n                        next: 'pop' },\n                    { token: ['text',\n                            'punctuation.section.directive.begin.erlang',\n                            'text',\n                            'keyword.control.directive.define.erlang',\n                            'text',\n                            'punctuation.definition.parameters.begin.erlang',\n                            'text',\n                            'entity.name.function.macro.definition.erlang',\n                            'text',\n                            'punctuation.definition.parameters.begin.erlang'],\n                        regex: '^(\\\\s*)(-)(\\\\s*)(define)(\\\\s*)(\\\\()(\\\\s*)([a-zA-Z\\\\d@_]+)(\\\\s*)(\\\\()',\n                        push: [{ token: ['punctuation.definition.parameters.end.erlang',\n                                    'text',\n                                    'punctuation.separator.parameters.erlang'],\n                                regex: '(\\\\))(\\\\s*)(,)',\n                                next: 'pop' },\n                            { token: 'punctuation.separator.parameters.erlang', regex: ',' },\n                            { include: '#everything-else' }] },\n                    { token: 'punctuation.separator.define.erlang',\n                        regex: '\\\\|\\\\||\\\\||:|;|,|\\\\.|->' },\n                    { include: '#everything-else' },\n                    { defaultToken: 'meta.directive.define.erlang' }] }],\n        '#directive': [{ token: ['meta.directive.erlang',\n                    'punctuation.section.directive.begin.erlang',\n                    'meta.directive.erlang',\n                    'keyword.control.directive.erlang',\n                    'meta.directive.erlang',\n                    'punctuation.definition.parameters.begin.erlang'],\n                regex: '^(\\\\s*)(-)(\\\\s*)([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(\\\\(?)',\n                push: [{ token: ['punctuation.definition.parameters.end.erlang',\n                            'meta.directive.erlang',\n                            'punctuation.section.directive.end.erlang'],\n                        regex: '(\\\\)?)(\\\\s*)(\\\\.)',\n                        next: 'pop' },\n                    { include: '#everything-else' },\n                    { defaultToken: 'meta.directive.erlang' }] },\n            { token: ['meta.directive.erlang',\n                    'punctuation.section.directive.begin.erlang',\n                    'meta.directive.erlang',\n                    'keyword.control.directive.erlang',\n                    'meta.directive.erlang',\n                    'punctuation.section.directive.end.erlang'],\n                regex: '^(\\\\s*)(-)(\\\\s*)([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(\\\\.)' }],\n        '#everything-else': [{ include: '#comment' },\n            { include: '#record-usage' },\n            { include: '#macro-usage' },\n            { include: '#expression' },\n            { include: '#keyword' },\n            { include: '#textual-operator' },\n            { include: '#function-call' },\n            { include: '#tuple' },\n            { include: '#list' },\n            { include: '#binary' },\n            { include: '#parenthesized-expression' },\n            { include: '#character' },\n            { include: '#number' },\n            { include: '#atom' },\n            { include: '#string' },\n            { include: '#symbolic-operator' },\n            { include: '#variable' }],\n        '#expression': [{ token: 'keyword.control.if.erlang',\n                regex: '\\\\bif\\\\b',\n                push: [{ token: 'keyword.control.end.erlang',\n                        regex: '\\\\bend\\\\b',\n                        next: 'pop' },\n                    { include: '#internal-expression-punctuation' },\n                    { include: '#everything-else' },\n                    { defaultToken: 'meta.expression.if.erlang' }] },\n            { token: 'keyword.control.case.erlang',\n                regex: '\\\\bcase\\\\b',\n                push: [{ token: 'keyword.control.end.erlang',\n                        regex: '\\\\bend\\\\b',\n                        next: 'pop' },\n                    { include: '#internal-expression-punctuation' },\n                    { include: '#everything-else' },\n                    { defaultToken: 'meta.expression.case.erlang' }] },\n            { token: 'keyword.control.receive.erlang',\n                regex: '\\\\breceive\\\\b',\n                push: [{ token: 'keyword.control.end.erlang',\n                        regex: '\\\\bend\\\\b',\n                        next: 'pop' },\n                    { include: '#internal-expression-punctuation' },\n                    { include: '#everything-else' },\n                    { defaultToken: 'meta.expression.receive.erlang' }] },\n            { token: ['keyword.control.fun.erlang',\n                    'text',\n                    'entity.name.type.class.module.erlang',\n                    'text',\n                    'punctuation.separator.module-function.erlang',\n                    'text',\n                    'entity.name.function.erlang',\n                    'text',\n                    'punctuation.separator.function-arity.erlang'],\n                regex: '\\\\b(fun)(\\\\s*)(?:([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(:)(\\\\s*))?([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(/)' },\n            { token: 'keyword.control.fun.erlang',\n                regex: '\\\\bfun\\\\b',\n                push: [{ token: 'keyword.control.end.erlang',\n                        regex: '\\\\bend\\\\b',\n                        next: 'pop' },\n                    { token: 'text',\n                        regex: '(?=\\\\()',\n                        push: [{ token: 'punctuation.separator.clauses.erlang',\n                                regex: ';|(?=\\\\bend\\\\b)',\n                                next: 'pop' },\n                            { include: '#internal-function-parts' }] },\n                    { include: '#everything-else' },\n                    { defaultToken: 'meta.expression.fun.erlang' }] },\n            { token: 'keyword.control.try.erlang',\n                regex: '\\\\btry\\\\b',\n                push: [{ token: 'keyword.control.end.erlang',\n                        regex: '\\\\bend\\\\b',\n                        next: 'pop' },\n                    { include: '#internal-expression-punctuation' },\n                    { include: '#everything-else' },\n                    { defaultToken: 'meta.expression.try.erlang' }] },\n            { token: 'keyword.control.begin.erlang',\n                regex: '\\\\bbegin\\\\b',\n                push: [{ token: 'keyword.control.end.erlang',\n                        regex: '\\\\bend\\\\b',\n                        next: 'pop' },\n                    { include: '#internal-expression-punctuation' },\n                    { include: '#everything-else' },\n                    { defaultToken: 'meta.expression.begin.erlang' }] },\n            { token: 'keyword.control.query.erlang',\n                regex: '\\\\bquery\\\\b',\n                push: [{ token: 'keyword.control.end.erlang',\n                        regex: '\\\\bend\\\\b',\n                        next: 'pop' },\n                    { include: '#everything-else' },\n                    { defaultToken: 'meta.expression.query.erlang' }] }],\n        '#function': [{ token: ['meta.function.erlang',\n                    'entity.name.function.definition.erlang',\n                    'meta.function.erlang'],\n                regex: '^(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(?=\\\\()',\n                push: [{ token: 'punctuation.terminator.function.erlang',\n                        regex: '\\\\.',\n                        next: 'pop' },\n                    { token: ['text', 'entity.name.function.erlang', 'text'],\n                        regex: '^(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(?=\\\\()' },\n                    { token: 'text',\n                        regex: '(?=\\\\()',\n                        push: [{ token: 'punctuation.separator.clauses.erlang',\n                                regex: ';|(?=\\\\.)',\n                                next: 'pop' },\n                            { include: '#parenthesized-expression' },\n                            { include: '#internal-function-parts' }] },\n                    { include: '#everything-else' },\n                    { defaultToken: 'meta.function.erlang' }] }],\n        '#function-call': [{ token: 'meta.function-call.erlang',\n                regex: '(?=(?:[a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')\\\\s*(?:\\\\(|:\\\\s*(?:[a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')\\\\s*\\\\())',\n                push: [{ token: 'punctuation.definition.parameters.end.erlang',\n                        regex: '\\\\)',\n                        next: 'pop' },\n                    { token: ['entity.name.type.class.module.erlang',\n                            'text',\n                            'punctuation.separator.module-function.erlang',\n                            'text',\n                            'entity.name.function.guard.erlang',\n                            'text',\n                            'punctuation.definition.parameters.begin.erlang'],\n                        regex: '(?:(erlang)(\\\\s*)(:)(\\\\s*))?(is_atom|is_binary|is_constant|is_float|is_function|is_integer|is_list|is_number|is_pid|is_port|is_reference|is_tuple|is_record|abs|element|hd|length|node|round|self|size|tl|trunc)(\\\\s*)(\\\\()',\n                        push: [{ token: 'text', regex: '(?=\\\\))', next: 'pop' },\n                            { token: 'punctuation.separator.parameters.erlang', regex: ',' },\n                            { include: '#everything-else' }] },\n                    { token: ['entity.name.type.class.module.erlang',\n                            'text',\n                            'punctuation.separator.module-function.erlang',\n                            'text',\n                            'entity.name.function.erlang',\n                            'text',\n                            'punctuation.definition.parameters.begin.erlang'],\n                        regex: '(?:([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(:)(\\\\s*))?([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(\\\\()',\n                        push: [{ token: 'text', regex: '(?=\\\\))', next: 'pop' },\n                            { token: 'punctuation.separator.parameters.erlang', regex: ',' },\n                            { include: '#everything-else' }] },\n                    { defaultToken: 'meta.function-call.erlang' }] }],\n        '#import-export-directive': [{ token: ['meta.directive.import.erlang',\n                    'punctuation.section.directive.begin.erlang',\n                    'meta.directive.import.erlang',\n                    'keyword.control.directive.import.erlang',\n                    'meta.directive.import.erlang',\n                    'punctuation.definition.parameters.begin.erlang',\n                    'meta.directive.import.erlang',\n                    'entity.name.type.class.module.erlang',\n                    'meta.directive.import.erlang',\n                    'punctuation.separator.parameters.erlang'],\n                regex: '^(\\\\s*)(-)(\\\\s*)(import)(\\\\s*)(\\\\()(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(,)',\n                push: [{ token: ['punctuation.definition.parameters.end.erlang',\n                            'meta.directive.import.erlang',\n                            'punctuation.section.directive.end.erlang'],\n                        regex: '(\\\\))(\\\\s*)(\\\\.)',\n                        next: 'pop' },\n                    { include: '#internal-function-list' },\n                    { defaultToken: 'meta.directive.import.erlang' }] },\n            { token: ['meta.directive.export.erlang',\n                    'punctuation.section.directive.begin.erlang',\n                    'meta.directive.export.erlang',\n                    'keyword.control.directive.export.erlang',\n                    'meta.directive.export.erlang',\n                    'punctuation.definition.parameters.begin.erlang'],\n                regex: '^(\\\\s*)(-)(\\\\s*)(export)(\\\\s*)(\\\\()',\n                push: [{ token: ['punctuation.definition.parameters.end.erlang',\n                            'meta.directive.export.erlang',\n                            'punctuation.section.directive.end.erlang'],\n                        regex: '(\\\\))(\\\\s*)(\\\\.)',\n                        next: 'pop' },\n                    { include: '#internal-function-list' },\n                    { defaultToken: 'meta.directive.export.erlang' }] }],\n        '#internal-expression-punctuation': [{ token: ['punctuation.separator.clause-head-body.erlang',\n                    'punctuation.separator.clauses.erlang',\n                    'punctuation.separator.expressions.erlang'],\n                regex: '(->)|(;)|(,)' }],\n        '#internal-function-list': [{ token: 'punctuation.definition.list.begin.erlang',\n                regex: '\\\\[',\n                push: [{ token: 'punctuation.definition.list.end.erlang',\n                        regex: '\\\\]',\n                        next: 'pop' },\n                    { token: ['entity.name.function.erlang',\n                            'text',\n                            'punctuation.separator.function-arity.erlang'],\n                        regex: '([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(/)',\n                        push: [{ token: 'punctuation.separator.list.erlang',\n                                regex: ',|(?=\\\\])',\n                                next: 'pop' },\n                            { include: '#everything-else' }] },\n                    { include: '#everything-else' },\n                    { defaultToken: 'meta.structure.list.function.erlang' }] }],\n        '#internal-function-parts': [{ token: 'text',\n                regex: '(?=\\\\()',\n                push: [{ token: 'punctuation.separator.clause-head-body.erlang',\n                        regex: '->',\n                        next: 'pop' },\n                    { token: 'punctuation.definition.parameters.begin.erlang',\n                        regex: '\\\\(',\n                        push: [{ token: 'punctuation.definition.parameters.end.erlang',\n                                regex: '\\\\)',\n                                next: 'pop' },\n                            { token: 'punctuation.separator.parameters.erlang', regex: ',' },\n                            { include: '#everything-else' }] },\n                    { token: 'punctuation.separator.guards.erlang', regex: ',|;' },\n                    { include: '#everything-else' }] },\n            { token: 'punctuation.separator.expressions.erlang',\n                regex: ',' },\n            { include: '#everything-else' }],\n        '#internal-record-body': [{ token: 'punctuation.definition.class.record.begin.erlang',\n                regex: '\\\\{',\n                push: [{ token: 'meta.structure.record.erlang',\n                        regex: '(?=\\\\})',\n                        next: 'pop' },\n                    { token: ['variable.other.field.erlang',\n                            'variable.language.omitted.field.erlang',\n                            'text',\n                            'keyword.operator.assignment.erlang'],\n                        regex: '(?:([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')|(_))(\\\\s*)(=|::)',\n                        push: [{ token: 'punctuation.separator.class.record.erlang',\n                                regex: ',|(?=\\\\})',\n                                next: 'pop' },\n                            { include: '#everything-else' }] },\n                    { token: ['variable.other.field.erlang',\n                            'text',\n                            'punctuation.separator.class.record.erlang'],\n                        regex: '([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)((?:,)?)' },\n                    { include: '#everything-else' },\n                    { defaultToken: 'meta.structure.record.erlang' }] }],\n        '#internal-type-specifiers': [{ token: 'punctuation.separator.value-type.erlang',\n                regex: '/',\n                push: [{ token: 'text', regex: '(?=,|:|>>)', next: 'pop' },\n                    { token: ['storage.type.erlang',\n                            'storage.modifier.signedness.erlang',\n                            'storage.modifier.endianness.erlang',\n                            'storage.modifier.unit.erlang',\n                            'punctuation.separator.type-specifiers.erlang'],\n                        regex: '(integer|float|binary|bytes|bitstring|bits)|(signed|unsigned)|(big|little|native)|(unit)|(-)' }] }],\n        '#keyword': [{ token: 'keyword.control.erlang',\n                regex: '\\\\b(?:after|begin|case|catch|cond|end|fun|if|let|of|query|try|receive|when)\\\\b' }],\n        '#list': [{ token: 'punctuation.definition.list.begin.erlang',\n                regex: '\\\\[',\n                push: [{ token: 'punctuation.definition.list.end.erlang',\n                        regex: '\\\\]',\n                        next: 'pop' },\n                    { token: 'punctuation.separator.list.erlang',\n                        regex: '\\\\||\\\\|\\\\||,' },\n                    { include: '#everything-else' },\n                    { defaultToken: 'meta.structure.list.erlang' }] }],\n        '#macro-directive': [{ token: ['meta.directive.ifdef.erlang',\n                    'punctuation.section.directive.begin.erlang',\n                    'meta.directive.ifdef.erlang',\n                    'keyword.control.directive.ifdef.erlang',\n                    'meta.directive.ifdef.erlang',\n                    'punctuation.definition.parameters.begin.erlang',\n                    'meta.directive.ifdef.erlang',\n                    'entity.name.function.macro.erlang',\n                    'meta.directive.ifdef.erlang',\n                    'punctuation.definition.parameters.end.erlang',\n                    'meta.directive.ifdef.erlang',\n                    'punctuation.section.directive.end.erlang'],\n                regex: '^(\\\\s*)(-)(\\\\s*)(ifdef)(\\\\s*)(\\\\()(\\\\s*)([a-zA-Z\\\\d@_]+)(\\\\s*)(\\\\))(\\\\s*)(\\\\.)' },\n            { token: ['meta.directive.ifndef.erlang',\n                    'punctuation.section.directive.begin.erlang',\n                    'meta.directive.ifndef.erlang',\n                    'keyword.control.directive.ifndef.erlang',\n                    'meta.directive.ifndef.erlang',\n                    'punctuation.definition.parameters.begin.erlang',\n                    'meta.directive.ifndef.erlang',\n                    'entity.name.function.macro.erlang',\n                    'meta.directive.ifndef.erlang',\n                    'punctuation.definition.parameters.end.erlang',\n                    'meta.directive.ifndef.erlang',\n                    'punctuation.section.directive.end.erlang'],\n                regex: '^(\\\\s*)(-)(\\\\s*)(ifndef)(\\\\s*)(\\\\()(\\\\s*)([a-zA-Z\\\\d@_]+)(\\\\s*)(\\\\))(\\\\s*)(\\\\.)' },\n            { token: ['meta.directive.undef.erlang',\n                    'punctuation.section.directive.begin.erlang',\n                    'meta.directive.undef.erlang',\n                    'keyword.control.directive.undef.erlang',\n                    'meta.directive.undef.erlang',\n                    'punctuation.definition.parameters.begin.erlang',\n                    'meta.directive.undef.erlang',\n                    'entity.name.function.macro.erlang',\n                    'meta.directive.undef.erlang',\n                    'punctuation.definition.parameters.end.erlang',\n                    'meta.directive.undef.erlang',\n                    'punctuation.section.directive.end.erlang'],\n                regex: '^(\\\\s*)(-)(\\\\s*)(undef)(\\\\s*)(\\\\()(\\\\s*)([a-zA-Z\\\\d@_]+)(\\\\s*)(\\\\))(\\\\s*)(\\\\.)' }],\n        '#macro-usage': [{ token: ['keyword.operator.macro.erlang',\n                    'meta.macro-usage.erlang',\n                    'entity.name.function.macro.erlang'],\n                regex: '(\\\\?\\\\??)(\\\\s*)([a-zA-Z\\\\d@_]+)' }],\n        '#module-directive': [{ token: ['meta.directive.module.erlang',\n                    'punctuation.section.directive.begin.erlang',\n                    'meta.directive.module.erlang',\n                    'keyword.control.directive.module.erlang',\n                    'meta.directive.module.erlang',\n                    'punctuation.definition.parameters.begin.erlang',\n                    'meta.directive.module.erlang',\n                    'entity.name.type.class.module.definition.erlang',\n                    'meta.directive.module.erlang',\n                    'punctuation.definition.parameters.end.erlang',\n                    'meta.directive.module.erlang',\n                    'punctuation.section.directive.end.erlang'],\n                regex: '^(\\\\s*)(-)(\\\\s*)(module)(\\\\s*)(\\\\()(\\\\s*)([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(\\\\))(\\\\s*)(\\\\.)' }],\n        '#number': [{ token: 'text',\n                regex: '(?=\\\\d)',\n                push: [{ token: 'text', regex: '(?!\\\\d)', next: 'pop' },\n                    { token: ['constant.numeric.float.erlang',\n                            'punctuation.separator.integer-float.erlang',\n                            'constant.numeric.float.erlang',\n                            'punctuation.separator.float-exponent.erlang'],\n                        regex: '(\\\\d+)(\\\\.)(\\\\d+)((?:[eE][\\\\+\\\\-]?\\\\d+)?)' },\n                    { token: ['constant.numeric.integer.binary.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.binary.erlang'],\n                        regex: '(2)(#)([0-1]+)' },\n                    { token: ['constant.numeric.integer.base-3.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-3.erlang'],\n                        regex: '(3)(#)([0-2]+)' },\n                    { token: ['constant.numeric.integer.base-4.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-4.erlang'],\n                        regex: '(4)(#)([0-3]+)' },\n                    { token: ['constant.numeric.integer.base-5.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-5.erlang'],\n                        regex: '(5)(#)([0-4]+)' },\n                    { token: ['constant.numeric.integer.base-6.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-6.erlang'],\n                        regex: '(6)(#)([0-5]+)' },\n                    { token: ['constant.numeric.integer.base-7.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-7.erlang'],\n                        regex: '(7)(#)([0-6]+)' },\n                    { token: ['constant.numeric.integer.octal.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.octal.erlang'],\n                        regex: '(8)(#)([0-7]+)' },\n                    { token: ['constant.numeric.integer.base-9.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-9.erlang'],\n                        regex: '(9)(#)([0-8]+)' },\n                    { token: ['constant.numeric.integer.decimal.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.decimal.erlang'],\n                        regex: '(10)(#)(\\\\d+)' },\n                    { token: ['constant.numeric.integer.base-11.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-11.erlang'],\n                        regex: '(11)(#)([\\\\daA]+)' },\n                    { token: ['constant.numeric.integer.base-12.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-12.erlang'],\n                        regex: '(12)(#)([\\\\da-bA-B]+)' },\n                    { token: ['constant.numeric.integer.base-13.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-13.erlang'],\n                        regex: '(13)(#)([\\\\da-cA-C]+)' },\n                    { token: ['constant.numeric.integer.base-14.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-14.erlang'],\n                        regex: '(14)(#)([\\\\da-dA-D]+)' },\n                    { token: ['constant.numeric.integer.base-15.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-15.erlang'],\n                        regex: '(15)(#)([\\\\da-eA-E]+)' },\n                    { token: ['constant.numeric.integer.hexadecimal.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.hexadecimal.erlang'],\n                        regex: '(16)(#)([\\\\da-fA-F]+)' },\n                    { token: ['constant.numeric.integer.base-17.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-17.erlang'],\n                        regex: '(17)(#)([\\\\da-gA-G]+)' },\n                    { token: ['constant.numeric.integer.base-18.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-18.erlang'],\n                        regex: '(18)(#)([\\\\da-hA-H]+)' },\n                    { token: ['constant.numeric.integer.base-19.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-19.erlang'],\n                        regex: '(19)(#)([\\\\da-iA-I]+)' },\n                    { token: ['constant.numeric.integer.base-20.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-20.erlang'],\n                        regex: '(20)(#)([\\\\da-jA-J]+)' },\n                    { token: ['constant.numeric.integer.base-21.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-21.erlang'],\n                        regex: '(21)(#)([\\\\da-kA-K]+)' },\n                    { token: ['constant.numeric.integer.base-22.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-22.erlang'],\n                        regex: '(22)(#)([\\\\da-lA-L]+)' },\n                    { token: ['constant.numeric.integer.base-23.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-23.erlang'],\n                        regex: '(23)(#)([\\\\da-mA-M]+)' },\n                    { token: ['constant.numeric.integer.base-24.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-24.erlang'],\n                        regex: '(24)(#)([\\\\da-nA-N]+)' },\n                    { token: ['constant.numeric.integer.base-25.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-25.erlang'],\n                        regex: '(25)(#)([\\\\da-oA-O]+)' },\n                    { token: ['constant.numeric.integer.base-26.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-26.erlang'],\n                        regex: '(26)(#)([\\\\da-pA-P]+)' },\n                    { token: ['constant.numeric.integer.base-27.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-27.erlang'],\n                        regex: '(27)(#)([\\\\da-qA-Q]+)' },\n                    { token: ['constant.numeric.integer.base-28.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-28.erlang'],\n                        regex: '(28)(#)([\\\\da-rA-R]+)' },\n                    { token: ['constant.numeric.integer.base-29.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-29.erlang'],\n                        regex: '(29)(#)([\\\\da-sA-S]+)' },\n                    { token: ['constant.numeric.integer.base-30.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-30.erlang'],\n                        regex: '(30)(#)([\\\\da-tA-T]+)' },\n                    { token: ['constant.numeric.integer.base-31.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-31.erlang'],\n                        regex: '(31)(#)([\\\\da-uA-U]+)' },\n                    { token: ['constant.numeric.integer.base-32.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-32.erlang'],\n                        regex: '(32)(#)([\\\\da-vA-V]+)' },\n                    { token: ['constant.numeric.integer.base-33.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-33.erlang'],\n                        regex: '(33)(#)([\\\\da-wA-W]+)' },\n                    { token: ['constant.numeric.integer.base-34.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-34.erlang'],\n                        regex: '(34)(#)([\\\\da-xA-X]+)' },\n                    { token: ['constant.numeric.integer.base-35.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-35.erlang'],\n                        regex: '(35)(#)([\\\\da-yA-Y]+)' },\n                    { token: ['constant.numeric.integer.base-36.erlang',\n                            'punctuation.separator.base-integer.erlang',\n                            'constant.numeric.integer.base-36.erlang'],\n                        regex: '(36)(#)([\\\\da-zA-Z]+)' },\n                    { token: 'invalid.illegal.integer.erlang',\n                        regex: '\\\\d+#[\\\\da-zA-Z]+' },\n                    { token: 'constant.numeric.integer.decimal.erlang',\n                        regex: '\\\\d+' }] }],\n        '#parenthesized-expression': [{ token: 'punctuation.section.expression.begin.erlang',\n                regex: '\\\\(',\n                push: [{ token: 'punctuation.section.expression.end.erlang',\n                        regex: '\\\\)',\n                        next: 'pop' },\n                    { include: '#everything-else' },\n                    { defaultToken: 'meta.expression.parenthesized' }] }],\n        '#record-directive': [{ token: ['meta.directive.record.erlang',\n                    'punctuation.section.directive.begin.erlang',\n                    'meta.directive.record.erlang',\n                    'keyword.control.directive.import.erlang',\n                    'meta.directive.record.erlang',\n                    'punctuation.definition.parameters.begin.erlang',\n                    'meta.directive.record.erlang',\n                    'entity.name.type.class.record.definition.erlang',\n                    'meta.directive.record.erlang',\n                    'punctuation.separator.parameters.erlang'],\n                regex: '^(\\\\s*)(-)(\\\\s*)(record)(\\\\s*)(\\\\()(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(,)',\n                push: [{ token: ['punctuation.definition.class.record.end.erlang',\n                            'meta.directive.record.erlang',\n                            'punctuation.definition.parameters.end.erlang',\n                            'meta.directive.record.erlang',\n                            'punctuation.section.directive.end.erlang'],\n                        regex: '(\\\\})(\\\\s*)(\\\\))(\\\\s*)(\\\\.)',\n                        next: 'pop' },\n                    { include: '#internal-record-body' },\n                    { defaultToken: 'meta.directive.record.erlang' }] }],\n        '#record-usage': [{ token: ['keyword.operator.record.erlang',\n                    'meta.record-usage.erlang',\n                    'entity.name.type.class.record.erlang',\n                    'meta.record-usage.erlang',\n                    'punctuation.separator.record-field.erlang',\n                    'meta.record-usage.erlang',\n                    'variable.other.field.erlang'],\n                regex: '(#)(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(\\\\.)(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')' },\n            { token: ['keyword.operator.record.erlang',\n                    'meta.record-usage.erlang',\n                    'entity.name.type.class.record.erlang'],\n                regex: '(#)(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')',\n                push: [{ token: 'punctuation.definition.class.record.end.erlang',\n                        regex: '\\\\}',\n                        next: 'pop' },\n                    { include: '#internal-record-body' },\n                    { defaultToken: 'meta.record-usage.erlang' }] }],\n        '#string': [{ token: 'punctuation.definition.string.begin.erlang',\n                regex: '\"',\n                push: [{ token: 'punctuation.definition.string.end.erlang',\n                        regex: '\"',\n                        next: 'pop' },\n                    { token: ['punctuation.definition.escape.erlang',\n                            'constant.character.escape.erlang',\n                            'punctuation.definition.escape.erlang',\n                            'constant.character.escape.erlang',\n                            'constant.character.escape.erlang'],\n                        regex: '(\\\\\\\\)(?:([bdefnrstv\\\\\\\\\\'\"])|(\\\\^)([@-_])|([0-7]{1,3}))' },\n                    { token: 'invalid.illegal.string.erlang', regex: '\\\\\\\\\\\\^?.?' },\n                    { token: ['punctuation.definition.erlang',\n                            'punctuation.separator.erlang',\n                            'constant.other.erlang',\n                            'punctuation.separator.erlang',\n                            'punctuation.separator.erlang',\n                            'constant.other.erlang',\n                            'punctuation.separator.erlang',\n                            'punctuation.separator.erlang',\n                            'punctuation.separator.erlang',\n                            'constant.other.erlang',\n                            'constant.other.erlang'],\n                        regex: '(~)(?:((?:\\\\-)?)(\\\\d+)|(\\\\*))?(?:(\\\\.)(?:(\\\\d+)|(\\\\*)))?(?:(\\\\.)(?:(\\\\*)|(.)))?([~cfegswpWPBX#bx\\\\+ni])' },\n                    { token: ['punctuation.definition.erlang',\n                            'punctuation.separator.erlang',\n                            'constant.other.erlang',\n                            'constant.other.erlang'],\n                        regex: '(~)((?:\\\\*)?)((?:\\\\d+)?)([~du\\\\-#fsacl])' },\n                    { token: 'invalid.illegal.string.erlang', regex: '~.?' },\n                    { defaultToken: 'string.quoted.double.erlang' }] }],\n        '#symbolic-operator': [{ token: 'keyword.operator.symbolic.erlang',\n                regex: '\\\\+\\\\+|\\\\+|--|-|\\\\*|/=|/|=/=|=:=|==|=<|=|<-|<|>=|>|!|::' }],\n        '#textual-operator': [{ token: 'keyword.operator.textual.erlang',\n                regex: '\\\\b(?:andalso|band|and|bxor|xor|bor|orelse|or|bnot|not|bsl|bsr|div|rem)\\\\b' }],\n        '#tuple': [{ token: 'punctuation.definition.tuple.begin.erlang',\n                regex: '\\\\{',\n                push: [{ token: 'punctuation.definition.tuple.end.erlang',\n                        regex: '\\\\}',\n                        next: 'pop' },\n                    { token: 'punctuation.separator.tuple.erlang', regex: ',' },\n                    { include: '#everything-else' },\n                    { defaultToken: 'meta.structure.tuple.erlang' }] }],\n        '#variable': [{ token: ['variable.other.erlang', 'variable.language.omitted.erlang'],\n                regex: '(_[a-zA-Z\\\\d@_]+|[A-Z][a-zA-Z\\\\d@_]*)|(_)' }] };\n    this.normalizeRules();\n};\nErlangHighlightRules.metaData = { comment: 'The recognition of function definitions and compiler directives (such as module, record and macro definitions) requires that each of the aforementioned constructs must be the first string inside a line (except for whitespace).  Also, the function/module/record/macro names must be given unquoted.  -- desp',\n    fileTypes: ['erl', 'hrl'],\n    keyEquivalent: '^~E',\n    name: 'Erlang',\n    scopeName: 'source.erlang' };\noop.inherits(ErlangHighlightRules, TextHighlightRules);\nexports.ErlangHighlightRules = ErlangHighlightRules;\n\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\nvar FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n        this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n(function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n        var line = session.getLine(row);\n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n        return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                }\n                else if (foldStyle != \"all\")\n                    range = null;\n            }\n            return range;\n        }\n        if (foldStyle === \"markbegin\")\n            return;\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    this.getSectionRange = function (session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                }\n                else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                }\n                else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m)\n                continue;\n            if (m[1])\n                depth--;\n            else\n                depth++;\n            if (!depth)\n                break;\n        }\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/erlang\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/erlang_highlight_rules\",\"ace/mode/folding/cstyle\"], function(require, exports, module){/*\n  THIS FILE WAS AUTOGENERATED BY mode.tmpl.js\n*/\n\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar ErlangHighlightRules = require(\"./erlang_highlight_rules\").ErlangHighlightRules;\nvar FoldMode = require(\"./folding/cstyle\").FoldMode;\nvar Mode = function () {\n    this.HighlightRules = ErlangHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n(function () {\n    this.lineCommentStart = \"%\";\n    this.blockComment = null;\n    this.$id = \"ace/mode/erlang\";\n    this.snippetFileId = \"ace/snippets/erlang\";\n}).call(Mode.prototype);\nexports.Mode = Mode;\n\n});                (function() {\n                    ace.require([\"ace/mode/erlang\"], function(m) {\n                        if ( true && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            \n\n//# sourceURL=webpack://robot-karol-4/./node_modules/ace-builds/src-noconflict/mode-erlang.js?");

/***/ })

}]);