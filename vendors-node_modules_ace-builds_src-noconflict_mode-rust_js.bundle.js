/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkrobot_karol_4"] = self["webpackChunkrobot_karol_4"] || []).push([["vendors-node_modules_ace-builds_src-noconflict_mode-rust_js"],{

/***/ "./node_modules/ace-builds/src-noconflict/mode-rust.js":
/*!*************************************************************!*\
  !*** ./node_modules/ace-builds/src-noconflict/mode-rust.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nace.define(\"ace/mode/doc_comment_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\nvar DocCommentHighlightRules = function () {\n    this.$rules = {\n        \"start\": [\n            {\n                token: \"comment.doc.tag\",\n                regex: \"@\\\\w+(?=\\\\s|$)\"\n            }, DocCommentHighlightRules.getTagRule(), {\n                defaultToken: \"comment.doc.body\",\n                caseInsensitive: true\n            }\n        ]\n    };\n};\noop.inherits(DocCommentHighlightRules, TextHighlightRules);\nDocCommentHighlightRules.getTagRule = function (start) {\n    return {\n        token: \"comment.doc.tag.storage.type\",\n        regex: \"\\\\b(?:TODO|FIXME|XXX|HACK)\\\\b\"\n    };\n};\nDocCommentHighlightRules.getStartRule = function (start) {\n    return {\n        token: \"comment.doc\", // doc comment\n        regex: /\\/\\*\\*(?!\\/)/,\n        next: start\n    };\n};\nDocCommentHighlightRules.getEndRule = function (start) {\n    return {\n        token: \"comment.doc\", // closing comment\n        regex: \"\\\\*\\\\/\",\n        next: start\n    };\n};\nexports.DocCommentHighlightRules = DocCommentHighlightRules;\n\n});\n\nace.define(\"ace/mode/rust_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\",\"ace/mode/doc_comment_highlight_rules\"], function(require, exports, module){/* This file was autogenerated from https://raw.github.com/dbp/sublime-rust/master/Rust.tmLanguage (uuid: ) */\n\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\nvar DocCommentHighlightRules = require(\"./doc_comment_highlight_rules\").DocCommentHighlightRules;\nvar stringEscape = /\\\\(?:[nrt0'\"\\\\]|x[\\da-fA-F]{2}|u\\{[\\da-fA-F]{6}\\})/.source;\nvar wordPattern = /[a-zA-Z_\\xa1-\\uffff][a-zA-Z0-9_\\xa1-\\uffff]*/.source;\nvar RustHighlightRules = function () {\n    var keywordMapper = this.createKeywordMapper({\n        \"keyword.source.rust\": \"abstract|alignof|as|async|await|become|box|break|catch|continue|const|crate|\"\n            + \"default|do|dyn|else|enum|extern|for|final|if|impl|in|let|loop|macro|match|mod|move|mut|offsetof|\"\n            + \"override|priv|proc|pub|pure|ref|return|self|sizeof|static|struct|super|trait|type|typeof|union|\"\n            + \"unsafe|unsized|use|virtual|where|while|yield|try\",\n        \"storage.type.source.rust\": \"Self|isize|usize|char|bool|u8|u16|u32|u64|u128|f16|f32|f64|i8|i16|i32|i64|\"\n            + \"i128|str|option|either|c_float|c_double|c_void|FILE|fpos_t|DIR|dirent|c_char|c_schar|c_uchar|c_short|\"\n            + \"c_ushort|c_int|c_uint|c_long|c_ulong|size_t|ptrdiff_t|clock_t|time_t|c_longlong|c_ulonglong|intptr_t|\"\n            + \"uintptr_t|off_t|dev_t|ino_t|pid_t|mode_t|ssize_t\",\n        \"constant.language.source.rust\": \"true|false|Some|None|Ok|Err|FALSE|TRUE\",\n        \"support.constant.source.rust\": \"EXIT_FAILURE|EXIT_SUCCESS|RAND_MAX|EOF|SEEK_SET|SEEK_CUR|SEEK_END|_IOFBF|\"\n            + \"_IONBF|_IOLBF|\"\n            + \"BUFSIZ|FOPEN_MAX|FILENAME_MAX|L_tmpnam|TMP_MAX|O_RDONLY|O_WRONLY|O_RDWR|O_APPEND|O_CREAT|O_EXCL|O_TRUNC|\"\n            + \"S_IFIFO|S_IFCHR|S_IFBLK|S_IFDIR|S_IFREG|S_IFMT|S_IEXEC|S_IWRITE|S_IREAD|S_IRWXU|S_IXUSR|S_IWUSR|S_IRUSR|\"\n            + \"F_OK|R_OK|W_OK|X_OK|STDIN_FILENO|STDOUT_FILENO|STDERR_FILENO\",\n        \"constant.language\": \"macro_rules|mac_variant\"\n    }, \"identifier\");\n    this.$rules = {\n        start: [\n            {\n                token: 'variable.other.source.rust', // `(?![\\\\\\'])` to keep a lifetime name highlighting from continuing one character\n                regex: '\\'' + wordPattern + '(?![\\\\\\'])'\n            }, {\n                token: 'string.quoted.single.source.rust',\n                regex: \"'(?:[^'\\\\\\\\]|\" + stringEscape + \")'\"\n            }, {\n                token: 'identifier',\n                regex: \"r#\" + wordPattern + \"\\\\b\"\n            }, {\n                stateName: \"bracketedComment\",\n                onMatch: function (value, currentState, stack) {\n                    stack.unshift(this.next, value.length - 1, currentState);\n                    return \"string.quoted.raw.source.rust\";\n                },\n                regex: /r#*\"/,\n                next: [\n                    {\n                        onMatch: function (value, currentState, stack) {\n                            var token = \"string.quoted.raw.source.rust\";\n                            if (value.length >= stack[1]) {\n                                if (value.length > stack[1])\n                                    token = \"invalid\";\n                                stack.shift();\n                                stack.shift();\n                                this.next = stack.shift();\n                            }\n                            else {\n                                this.next = \"\";\n                            }\n                            return token;\n                        },\n                        regex: /\"#*/,\n                        next: \"start\"\n                    }, {\n                        defaultToken: \"string.quoted.raw.source.rust\"\n                    }\n                ]\n            }, {\n                token: 'string.quoted.double.source.rust',\n                regex: '\"',\n                push: [\n                    {\n                        token: 'string.quoted.double.source.rust',\n                        regex: '\"',\n                        next: 'pop'\n                    }, {\n                        token: 'constant.character.escape.source.rust',\n                        regex: stringEscape\n                    }, { defaultToken: 'string.quoted.double.source.rust' }\n                ]\n            }, {\n                token: ['keyword.source.rust', 'text', 'entity.name.function.source.rust', 'punctuation'],\n                regex: '\\\\b(fn)(\\\\s+)((?:r#)?' + wordPattern + ')(<)(?!<)',\n                push: \"generics\"\n            }, {\n                token: ['keyword.source.rust', 'text', 'entity.name.function.source.rust'],\n                regex: '\\\\b(fn)(\\\\s+)((?:r#)?' + wordPattern + ')'\n            }, {\n                token: ['support.constant', \"punctuation\"],\n                regex: \"(\" + wordPattern + '::)(<)(?!<)',\n                push: \"generics\"\n            }, {\n                token: 'support.constant',\n                regex: wordPattern + '::'\n            }, {\n                token: 'variable.language.source.rust',\n                regex: '\\\\bself\\\\b'\n            }, DocCommentHighlightRules.getStartRule(\"doc-start\"), {\n                token: 'comment.line.doc.source.rust',\n                regex: '///.*$'\n            }, {\n                token: 'comment.line.doc.source.rust',\n                regex: '//!.*$'\n            }, {\n                token: 'comment.line.double-dash.source.rust',\n                regex: '//.*$'\n            }, {\n                token: 'comment.start.block.source.rust',\n                regex: '/\\\\*',\n                stateName: 'comment',\n                push: [\n                    {\n                        token: 'comment.start.block.source.rust',\n                        regex: '/\\\\*',\n                        push: 'comment'\n                    }, {\n                        token: 'comment.end.block.source.rust',\n                        regex: '\\\\*/',\n                        next: 'pop'\n                    }, { defaultToken: 'comment.block.source.rust' }\n                ]\n            }, {\n                token: [\"keyword.source.rust\", \"identifier\", \"punctuaction\"],\n                regex: \"(?:(impl)|(\" + wordPattern + \"))(<)(?!<)\",\n                stateName: 'generics',\n                push: [\n                    {\n                        token: 'keyword.operator',\n                        regex: /<<|=/\n                    }, {\n                        token: \"punctuaction\",\n                        regex: \"<(?!<)\",\n                        push: \"generics\"\n                    }, {\n                        token: 'variable.other.source.rust', // `(?![\\\\\\'])` to keep a lifetime name highlighting from continuing one character\n                        regex: '\\'' + wordPattern + '(?![\\\\\\'])'\n                    }, {\n                        token: \"storage.type.source.rust\",\n                        regex: \"\\\\b(u8|u16|u32|u64|u128|usize|i8|i16|i32|i64|i128|isize|char|bool)\\\\b\"\n                    }, {\n                        token: \"keyword\",\n                        regex: \"\\\\b(?:const|dyn)\\\\b\"\n                    }, {\n                        token: \"punctuation\",\n                        regex: \">\",\n                        next: \"pop\"\n                    },\n                    { include: \"punctuation\" },\n                    { include: \"operators\" },\n                    { include: \"constants\" },\n                    {\n                        token: \"identifier\",\n                        regex: \"\\\\b\" + wordPattern + \"\\\\b\"\n                    }\n                ]\n            }, {\n                token: keywordMapper,\n                regex: wordPattern\n            }, {\n                token: 'meta.preprocessor.source.rust',\n                regex: '\\\\b\\\\w\\\\(\\\\w\\\\)*!|#\\\\[[\\\\w=\\\\(\\\\)_]+\\\\]\\\\b'\n            },\n            { include: \"punctuation\" },\n            { include: \"operators\" },\n            { include: \"constants\" }\n        ],\n        punctuation: [\n            {\n                token: \"paren.lparen\",\n                regex: /[\\[({]/\n            }, {\n                token: \"paren.rparen\",\n                regex: /[\\])}]/\n            }, {\n                token: \"punctuation.operator\",\n                regex: /[?:,;.]/\n            }\n        ],\n        operators: [\n            {\n                token: 'keyword.operator', // `[*/](?![*/])=?` is separated because `//` and `/* */` become comments and must be\n                regex: /\\$|[-=]>|[-+%^=!&|<>]=?|[*/](?![*/])=?/\n            }\n        ],\n        constants: [\n            {\n                token: 'constant.numeric.source.rust',\n                regex: /\\b(?:0x[a-fA-F0-9_]+|0o[0-7_]+|0b[01_]+|[0-9][0-9_]*(?!\\.))(?:[iu](?:size|8|16|32|64|128))?\\b/\n            }, {\n                token: 'constant.numeric.source.rust',\n                regex: /\\b(?:[0-9][0-9_]*)(?:\\.[0-9][0-9_]*)?(?:[Ee][+-][0-9][0-9_]*)?(?:f32|f64)?\\b/\n            }\n        ]\n    };\n    this.embedRules(DocCommentHighlightRules, \"doc-\", [DocCommentHighlightRules.getEndRule(\"start\")]);\n    this.normalizeRules();\n};\nRustHighlightRules.metaData = { fileTypes: ['rs', 'rc'],\n    foldingStartMarker: '^.*\\\\bfn\\\\s*(\\\\w+\\\\s*)?\\\\([^\\\\)]*\\\\)(\\\\s*\\\\{[^\\\\}]*)?\\\\s*$',\n    foldingStopMarker: '^\\\\s*\\\\}',\n    name: 'Rust',\n    scopeName: 'source.rust' };\noop.inherits(RustHighlightRules, TextHighlightRules);\nexports.RustHighlightRules = RustHighlightRules;\n\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\nvar FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n        this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n(function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n        var line = session.getLine(row);\n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n        return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                }\n                else if (foldStyle != \"all\")\n                    range = null;\n            }\n            return range;\n        }\n        if (foldStyle === \"markbegin\")\n            return;\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    this.getSectionRange = function (session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                }\n                else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                }\n                else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m)\n                continue;\n            if (m[1])\n                depth--;\n            else\n                depth++;\n            if (!depth)\n                break;\n        }\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/rust\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/rust_highlight_rules\",\"ace/mode/folding/cstyle\"], function(require, exports, module){/*\n  THIS FILE WAS AUTOGENERATED BY mode.tmpl.js\n*/\n\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar RustHighlightRules = require(\"./rust_highlight_rules\").RustHighlightRules;\nvar FoldMode = require(\"./folding/cstyle\").FoldMode;\nvar Mode = function () {\n    this.HighlightRules = RustHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n(function () {\n    this.lineCommentStart = \"//\";\n    this.blockComment = { start: \"/*\", end: \"*/\", nestable: true };\n    this.$quotes = { '\"': '\"' };\n    this.$id = \"ace/mode/rust\";\n}).call(Mode.prototype);\nexports.Mode = Mode;\n\n});                (function() {\n                    ace.require([\"ace/mode/rust\"], function(m) {\n                        if ( true && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            \n\n//# sourceURL=webpack://robot-karol-4/./node_modules/ace-builds/src-noconflict/mode-rust.js?");

/***/ })

}]);