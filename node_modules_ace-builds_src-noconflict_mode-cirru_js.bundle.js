/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkrobot_karol_4"] = self["webpackChunkrobot_karol_4"] || []).push([["node_modules_ace-builds_src-noconflict_mode-cirru_js"],{

/***/ "./node_modules/ace-builds/src-noconflict/mode-cirru.js":
/*!**************************************************************!*\
  !*** ./node_modules/ace-builds/src-noconflict/mode-cirru.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nace.define(\"ace/mode/cirru_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\nvar CirruHighlightRules = function () {\n    this.$rules = {\n        start: [{\n                token: 'constant.numeric',\n                regex: /[\\d\\.]+/\n            }, {\n                token: 'comment.line.double-dash',\n                regex: /--/,\n                next: 'comment'\n            }, {\n                token: 'storage.modifier',\n                regex: /\\(/\n            }, {\n                token: 'storage.modifier',\n                regex: /,/,\n                next: 'line'\n            }, {\n                token: 'support.function',\n                regex: /[^\\(\\)\"\\s{}\\[\\]]+/,\n                next: 'line'\n            }, {\n                token: 'string.quoted.double',\n                regex: /\"/,\n                next: 'string'\n            }, {\n                token: 'storage.modifier',\n                regex: /\\)/\n            }],\n        comment: [{\n                token: 'comment.line.double-dash',\n                regex: / +[^\\n]+/,\n                next: 'start'\n            }],\n        string: [{\n                token: 'string.quoted.double',\n                regex: /\"/,\n                next: 'line'\n            }, {\n                token: 'constant.character.escape',\n                regex: /\\\\/,\n                next: 'escape'\n            }, {\n                token: 'string.quoted.double',\n                regex: /[^\\\\\"]+/\n            }],\n        escape: [{\n                token: 'constant.character.escape',\n                regex: /./,\n                next: 'string'\n            }],\n        line: [{\n                token: 'constant.numeric',\n                regex: /[\\d\\.]+/\n            }, {\n                token: 'markup.raw',\n                regex: /^\\s*/,\n                next: 'start'\n            }, {\n                token: 'storage.modifier',\n                regex: /\\$/,\n                next: 'start'\n            }, {\n                token: 'variable.parameter',\n                regex: /[^\\(\\)\"\\s{}\\[\\]]+/\n            }, {\n                token: 'storage.modifier',\n                regex: /\\(/,\n                next: 'start'\n            }, {\n                token: 'storage.modifier',\n                regex: /\\)/\n            }, {\n                token: 'markup.raw',\n                regex: /^ */,\n                next: 'start'\n            }, {\n                token: 'string.quoted.double',\n                regex: /\"/,\n                next: 'string'\n            }]\n    };\n};\noop.inherits(CirruHighlightRules, TextHighlightRules);\nexports.CirruHighlightRules = CirruHighlightRules;\n\n});\n\nace.define(\"ace/mode/folding/coffee\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/folding/fold_mode\",\"ace/range\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../../lib/oop\");\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\nvar Range = require(\"../../range\").Range;\nvar FoldMode = exports.FoldMode = function () { };\noop.inherits(FoldMode, BaseFoldMode);\n(function () {\n    this.commentBlock = function (session, row) {\n        var re = /\\S/;\n        var line = session.getLine(row);\n        var startLevel = line.search(re);\n        if (startLevel == -1 || line[startLevel] != \"#\")\n            return;\n        var startColumn = line.length;\n        var maxRow = session.getLength();\n        var startRow = row;\n        var endRow = row;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var level = line.search(re);\n            if (level == -1)\n                continue;\n            if (line[level] != \"#\")\n                break;\n            endRow = row;\n        }\n        if (endRow > startRow) {\n            var endColumn = session.getLine(endRow).length;\n            return new Range(startRow, startColumn, endRow, endColumn);\n        }\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row) {\n        var range = this.indentationBlock(session, row);\n        if (range)\n            return range;\n        range = this.commentBlock(session, row);\n        if (range)\n            return range;\n    };\n    this.getFoldWidget = function (session, foldStyle, row) {\n        var line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        var next = session.getLine(row + 1);\n        var prev = session.getLine(row - 1);\n        var prevIndent = prev.search(/\\S/);\n        var nextIndent = next.search(/\\S/);\n        if (indent == -1) {\n            session.foldWidgets[row - 1] = prevIndent != -1 && prevIndent < nextIndent ? \"start\" : \"\";\n            return \"\";\n        }\n        if (prevIndent == -1) {\n            if (indent == nextIndent && line[indent] == \"#\" && next[indent] == \"#\") {\n                session.foldWidgets[row - 1] = \"\";\n                session.foldWidgets[row + 1] = \"\";\n                return \"start\";\n            }\n        }\n        else if (prevIndent == indent && line[indent] == \"#\" && prev[indent] == \"#\") {\n            if (session.getLine(row - 2).search(/\\S/) == -1) {\n                session.foldWidgets[row - 1] = \"start\";\n                session.foldWidgets[row + 1] = \"\";\n                return \"\";\n            }\n        }\n        if (prevIndent != -1 && prevIndent < indent)\n            session.foldWidgets[row - 1] = \"start\";\n        else\n            session.foldWidgets[row - 1] = \"\";\n        if (indent < nextIndent)\n            return \"start\";\n        else\n            return \"\";\n    };\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/cirru\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/cirru_highlight_rules\",\"ace/mode/folding/coffee\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar CirruHighlightRules = require(\"./cirru_highlight_rules\").CirruHighlightRules;\nvar CoffeeFoldMode = require(\"./folding/coffee\").FoldMode;\nvar Mode = function () {\n    this.HighlightRules = CirruHighlightRules;\n    this.foldingRules = new CoffeeFoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n(function () {\n    this.lineCommentStart = \"--\";\n    this.$id = \"ace/mode/cirru\";\n}).call(Mode.prototype);\nexports.Mode = Mode;\n\n});                (function() {\n                    ace.require([\"ace/mode/cirru\"], function(m) {\n                        if ( true && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            \n\n//# sourceURL=webpack://robot-karol-4/./node_modules/ace-builds/src-noconflict/mode-cirru.js?");

/***/ })

}]);