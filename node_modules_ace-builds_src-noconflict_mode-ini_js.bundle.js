/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkrobot_karol_4"] = self["webpackChunkrobot_karol_4"] || []).push([["node_modules_ace-builds_src-noconflict_mode-ini_js"],{

/***/ "./node_modules/ace-builds/src-noconflict/mode-ini.js":
/*!************************************************************!*\
  !*** ./node_modules/ace-builds/src-noconflict/mode-ini.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nace.define(\"ace/mode/ini_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module){/* This file was autogenerated from tool\\tm bundles\\ini.tmbundle\\Syntaxes\\Ini.plist (uuid: ) */\n\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\nvar escapeRe = \"\\\\\\\\(?:[\\\\\\\\0abtrn;#=:]|x[a-fA-F\\\\d]{4})\";\nvar IniHighlightRules = function () {\n    this.$rules = {\n        start: [{\n                token: 'punctuation.definition.comment.ini',\n                regex: '#.*',\n                push_: [{\n                        token: 'comment.line.number-sign.ini',\n                        regex: '$|^',\n                        next: 'pop'\n                    }, {\n                        defaultToken: 'comment.line.number-sign.ini'\n                    }]\n            }, {\n                token: 'punctuation.definition.comment.ini',\n                regex: ';.*',\n                push_: [{\n                        token: 'comment.line.semicolon.ini',\n                        regex: '$|^',\n                        next: 'pop'\n                    }, {\n                        defaultToken: 'comment.line.semicolon.ini'\n                    }]\n            }, {\n                token: ['keyword.other.definition.ini', 'text', 'punctuation.separator.key-value.ini'],\n                regex: '\\\\b([a-zA-Z0-9_.-]+)\\\\b(\\\\s*)(=)'\n            }, {\n                token: ['punctuation.definition.entity.ini', 'constant.section.group-title.ini', 'punctuation.definition.entity.ini'],\n                regex: '^(\\\\[)(.*?)(\\\\])'\n            }, {\n                token: 'punctuation.definition.string.begin.ini',\n                regex: \"'\",\n                push: [{\n                        token: 'punctuation.definition.string.end.ini',\n                        regex: \"'\",\n                        next: 'pop'\n                    }, {\n                        token: \"constant.language.escape\",\n                        regex: escapeRe\n                    }, {\n                        defaultToken: 'string.quoted.single.ini'\n                    }]\n            }, {\n                token: 'punctuation.definition.string.begin.ini',\n                regex: '\"',\n                push: [{\n                        token: \"constant.language.escape\",\n                        regex: escapeRe\n                    }, {\n                        token: 'punctuation.definition.string.end.ini',\n                        regex: '\"',\n                        next: 'pop'\n                    }, {\n                        defaultToken: 'string.quoted.double.ini'\n                    }]\n            }]\n    };\n    this.normalizeRules();\n};\nIniHighlightRules.metaData = {\n    fileTypes: ['ini', 'conf'],\n    keyEquivalent: '^~I',\n    name: 'Ini',\n    scopeName: 'source.ini'\n};\noop.inherits(IniHighlightRules, TextHighlightRules);\nexports.IniHighlightRules = IniHighlightRules;\n\n});\n\nace.define(\"ace/mode/folding/ini\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\nvar FoldMode = exports.FoldMode = function () {\n};\noop.inherits(FoldMode, BaseFoldMode);\n(function () {\n    this.foldingStartMarker = /^\\s*\\[([^\\])]*)]\\s*(?:$|[;#])/;\n    this.getFoldWidgetRange = function (session, foldStyle, row) {\n        var re = this.foldingStartMarker;\n        var line = session.getLine(row);\n        var m = line.match(re);\n        if (!m)\n            return;\n        var startName = m[1] + \".\";\n        var startColumn = line.length;\n        var maxRow = session.getLength();\n        var startRow = row;\n        var endRow = row;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            if (/^\\s*$/.test(line))\n                continue;\n            m = line.match(re);\n            if (m && m[1].lastIndexOf(startName, 0) !== 0)\n                break;\n            endRow = row;\n        }\n        if (endRow > startRow) {\n            var endColumn = session.getLine(endRow).length;\n            return new Range(startRow, startColumn, endRow, endColumn);\n        }\n    };\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/ini\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/ini_highlight_rules\",\"ace/mode/folding/ini\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar IniHighlightRules = require(\"./ini_highlight_rules\").IniHighlightRules;\nvar FoldMode = require(\"./folding/ini\").FoldMode;\nvar Mode = function () {\n    this.HighlightRules = IniHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n(function () {\n    this.lineCommentStart = \";\";\n    this.blockComment = null;\n    this.$id = \"ace/mode/ini\";\n}).call(Mode.prototype);\nexports.Mode = Mode;\n\n});                (function() {\n                    ace.require([\"ace/mode/ini\"], function(m) {\n                        if ( true && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            \n\n//# sourceURL=webpack://robot-karol-4/./node_modules/ace-builds/src-noconflict/mode-ini.js?");

/***/ })

}]);