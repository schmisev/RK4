/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkrobot_karol_4"] = self["webpackChunkrobot_karol_4"] || []).push([["node_modules_ace-builds_src-noconflict_mode-snippets_js"],{

/***/ "./node_modules/ace-builds/src-noconflict/mode-snippets.js":
/*!*****************************************************************!*\
  !*** ./node_modules/ace-builds/src-noconflict/mode-snippets.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nace.define(\"ace/mode/folding/coffee\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/folding/fold_mode\",\"ace/range\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../../lib/oop\");\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\nvar Range = require(\"../../range\").Range;\nvar FoldMode = exports.FoldMode = function () { };\noop.inherits(FoldMode, BaseFoldMode);\n(function () {\n    this.commentBlock = function (session, row) {\n        var re = /\\S/;\n        var line = session.getLine(row);\n        var startLevel = line.search(re);\n        if (startLevel == -1 || line[startLevel] != \"#\")\n            return;\n        var startColumn = line.length;\n        var maxRow = session.getLength();\n        var startRow = row;\n        var endRow = row;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var level = line.search(re);\n            if (level == -1)\n                continue;\n            if (line[level] != \"#\")\n                break;\n            endRow = row;\n        }\n        if (endRow > startRow) {\n            var endColumn = session.getLine(endRow).length;\n            return new Range(startRow, startColumn, endRow, endColumn);\n        }\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row) {\n        var range = this.indentationBlock(session, row);\n        if (range)\n            return range;\n        range = this.commentBlock(session, row);\n        if (range)\n            return range;\n    };\n    this.getFoldWidget = function (session, foldStyle, row) {\n        var line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        var next = session.getLine(row + 1);\n        var prev = session.getLine(row - 1);\n        var prevIndent = prev.search(/\\S/);\n        var nextIndent = next.search(/\\S/);\n        if (indent == -1) {\n            session.foldWidgets[row - 1] = prevIndent != -1 && prevIndent < nextIndent ? \"start\" : \"\";\n            return \"\";\n        }\n        if (prevIndent == -1) {\n            if (indent == nextIndent && line[indent] == \"#\" && next[indent] == \"#\") {\n                session.foldWidgets[row - 1] = \"\";\n                session.foldWidgets[row + 1] = \"\";\n                return \"start\";\n            }\n        }\n        else if (prevIndent == indent && line[indent] == \"#\" && prev[indent] == \"#\") {\n            if (session.getLine(row - 2).search(/\\S/) == -1) {\n                session.foldWidgets[row - 1] = \"start\";\n                session.foldWidgets[row + 1] = \"\";\n                return \"\";\n            }\n        }\n        if (prevIndent != -1 && prevIndent < indent)\n            session.foldWidgets[row - 1] = \"start\";\n        else\n            session.foldWidgets[row - 1] = \"\";\n        if (indent < nextIndent)\n            return \"start\";\n        else\n            return \"\";\n    };\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/snippets\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/text_highlight_rules\",\"ace/mode/folding/coffee\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\nvar SnippetHighlightRules = function () {\n    var builtins = \"SELECTION|CURRENT_WORD|SELECTED_TEXT|CURRENT_LINE|LINE_INDEX|\" +\n        \"LINE_NUMBER|SOFT_TABS|TAB_SIZE|FILENAME|FILEPATH|FULLNAME\";\n    this.$rules = {\n        \"start\": [\n            { token: \"constant.language.escape\", regex: /\\\\[\\$}`\\\\]/ },\n            { token: \"keyword\", regex: \"\\\\$(?:TM_)?(?:\" + builtins + \")\\\\b\" },\n            { token: \"variable\", regex: \"\\\\$\\\\w+\" },\n            { onMatch: function (value, state, stack) {\n                    if (stack[1])\n                        stack[1]++;\n                    else\n                        stack.unshift(state, 1);\n                    return this.tokenName;\n                }, tokenName: \"markup.list\", regex: \"\\\\${\", next: \"varDecl\" },\n            { onMatch: function (value, state, stack) {\n                    if (!stack[1])\n                        return \"text\";\n                    stack[1]--;\n                    if (!stack[1])\n                        stack.splice(0, 2);\n                    return this.tokenName;\n                }, tokenName: \"markup.list\", regex: \"}\" },\n            { token: \"doc.comment\", regex: /^\\${2}-{5,}$/ }\n        ],\n        \"varDecl\": [\n            { regex: /\\d+\\b/, token: \"constant.numeric\" },\n            { token: \"keyword\", regex: \"(?:TM_)?(?:\" + builtins + \")\\\\b\" },\n            { token: \"variable\", regex: \"\\\\w+\" },\n            { regex: /:/, token: \"punctuation.operator\", next: \"start\" },\n            { regex: /\\//, token: \"string.regex\", next: \"regexp\" },\n            { regex: \"\", next: \"start\" }\n        ],\n        \"regexp\": [\n            { regex: /\\\\./, token: \"escape\" },\n            { regex: /\\[/, token: \"regex.start\", next: \"charClass\" },\n            { regex: \"/\", token: \"string.regex\", next: \"format\" },\n            { \"token\": \"string.regex\", regex: \".\" }\n        ],\n        charClass: [\n            { regex: \"\\\\.\", token: \"escape\" },\n            { regex: \"\\\\]\", token: \"regex.end\", next: \"regexp\" },\n            { \"token\": \"string.regex\", regex: \".\" }\n        ],\n        \"format\": [\n            { regex: /\\\\[ulULE]/, token: \"keyword\" },\n            { regex: /\\$\\d+/, token: \"variable\" },\n            { regex: \"/[gim]*:?\", token: \"string.regex\", next: \"start\" },\n            { \"token\": \"string\", regex: \".\" }\n        ]\n    };\n};\noop.inherits(SnippetHighlightRules, TextHighlightRules);\nexports.SnippetHighlightRules = SnippetHighlightRules;\nvar SnippetGroupHighlightRules = function () {\n    this.$rules = {\n        \"start\": [\n            { token: \"text\", regex: \"^\\\\t\", next: \"sn-start\" },\n            { token: \"invalid\", regex: /^ \\s*/ },\n            { token: \"comment\", regex: /^#.*/ },\n            { token: \"constant.language.escape\", regex: \"^regex \", next: \"regex\" },\n            { token: \"constant.language.escape\", regex: \"^(trigger|endTrigger|name|snippet|guard|endGuard|tabTrigger|key)\\\\b\" }\n        ],\n        \"regex\": [\n            { token: \"text\", regex: \"\\\\.\" },\n            { token: \"keyword\", regex: \"/\" },\n            { token: \"empty\", regex: \"$\", next: \"start\" }\n        ]\n    };\n    this.embedRules(SnippetHighlightRules, \"sn-\", [\n        { token: \"text\", regex: \"^\\\\t\", next: \"sn-start\" },\n        { onMatch: function (value, state, stack) {\n                stack.splice(stack.length);\n                return this.tokenName;\n            }, tokenName: \"text\", regex: \"^(?!\\t)\", next: \"start\" }\n    ]);\n};\noop.inherits(SnippetGroupHighlightRules, TextHighlightRules);\nexports.SnippetGroupHighlightRules = SnippetGroupHighlightRules;\nvar FoldMode = require(\"./folding/coffee\").FoldMode;\nvar Mode = function () {\n    this.HighlightRules = SnippetGroupHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n(function () {\n    this.$indentWithTabs = true;\n    this.lineCommentStart = \"#\";\n    this.$id = \"ace/mode/snippets\";\n    this.snippetFileId = \"ace/snippets/snippets\";\n}).call(Mode.prototype);\nexports.Mode = Mode;\n\n});                (function() {\n                    ace.require([\"ace/mode/snippets\"], function(m) {\n                        if ( true && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            \n\n//# sourceURL=webpack://robot-karol-4/./node_modules/ace-builds/src-noconflict/mode-snippets.js?");

/***/ })

}]);