/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkrobot_karol_4"] = self["webpackChunkrobot_karol_4"] || []).push([["vendors-node_modules_ace-builds_src-noconflict_mode-csound_score_js"],{

/***/ "./node_modules/ace-builds/src-noconflict/mode-csound_score.js":
/*!*********************************************************************!*\
  !*** ./node_modules/ace-builds/src-noconflict/mode-csound_score.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nace.define(\"ace/mode/csound_preprocessor_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\nvar CsoundPreprocessorHighlightRules = function (embeddedRulePrefix) {\n    this.embeddedRulePrefix = embeddedRulePrefix === undefined ? \"\" : embeddedRulePrefix;\n    this.semicolonComments = {\n        token: \"comment.line.semicolon.csound\",\n        regex: \";.*$\"\n    };\n    this.comments = [\n        {\n            token: \"punctuation.definition.comment.begin.csound\",\n            regex: \"/\\\\*\",\n            push: [\n                {\n                    token: \"punctuation.definition.comment.end.csound\",\n                    regex: \"\\\\*/\",\n                    next: \"pop\"\n                }, {\n                    defaultToken: \"comment.block.csound\"\n                }\n            ]\n        }, {\n            token: \"comment.line.double-slash.csound\",\n            regex: \"//.*$\"\n        },\n        this.semicolonComments\n    ];\n    this.macroUses = [\n        {\n            token: [\"entity.name.function.preprocessor.csound\", \"punctuation.definition.macro-parameter-value-list.begin.csound\"],\n            regex: /(\\$[A-Z_a-z]\\w*\\.?)(\\()/,\n            next: \"macro parameter value list\"\n        }, {\n            token: \"entity.name.function.preprocessor.csound\",\n            regex: /\\$[A-Z_a-z]\\w*(?:\\.|\\b)/\n        }\n    ];\n    this.numbers = [\n        {\n            token: \"constant.numeric.float.csound\",\n            regex: /(?:\\d+[Ee][+-]?\\d+)|(?:\\d+\\.\\d*|\\d*\\.\\d+)(?:[Ee][+-]?\\d+)?/\n        }, {\n            token: [\"storage.type.number.csound\", \"constant.numeric.integer.hexadecimal.csound\"],\n            regex: /(0[Xx])([0-9A-Fa-f]+)/\n        }, {\n            token: \"constant.numeric.integer.decimal.csound\",\n            regex: /\\d+/\n        }\n    ];\n    this.bracedStringContents = [\n        {\n            token: \"constant.character.escape.csound\",\n            regex: /\\\\(?:[\\\\abnrt\"]|[0-7]{1,3})/\n        },\n        {\n            token: \"constant.character.placeholder.csound\",\n            regex: /%[#0\\- +]*\\d*(?:\\.\\d+)?[diuoxXfFeEgGaAcs]/\n        }, {\n            token: \"constant.character.escape.csound\",\n            regex: /%%/\n        }\n    ];\n    this.quotedStringContents = [\n        this.macroUses,\n        this.bracedStringContents\n    ];\n    var start = [\n        this.comments,\n        {\n            token: \"keyword.preprocessor.csound\",\n            regex: /#(?:e(?:nd(?:if)?|lse)\\b|##)|@@?[ \\t]*\\d+/\n        }, {\n            token: \"keyword.preprocessor.csound\",\n            regex: /#include/,\n            push: [\n                this.comments,\n                {\n                    token: \"string.csound\",\n                    regex: /([^ \\t])(?:.*?\\1)/,\n                    next: \"pop\"\n                }\n            ]\n        }, {\n            token: \"keyword.preprocessor.csound\",\n            regex: /#includestr/,\n            push: [\n                this.comments,\n                {\n                    token: \"string.csound\",\n                    regex: /([^ \\t])(?:.*?\\1)/,\n                    next: \"pop\"\n                }\n            ]\n        }, {\n            token: \"keyword.preprocessor.csound\",\n            regex: /#[ \\t]*define/,\n            next: \"define directive\"\n        }, {\n            token: \"keyword.preprocessor.csound\",\n            regex: /#(?:ifn?def|undef)\\b/,\n            next: \"macro directive\"\n        },\n        this.macroUses\n    ];\n    this.$rules = {\n        \"start\": start,\n        \"define directive\": [\n            this.comments,\n            {\n                token: \"entity.name.function.preprocessor.csound\",\n                regex: /[A-Z_a-z]\\w*/\n            }, {\n                token: \"punctuation.definition.macro-parameter-name-list.begin.csound\",\n                regex: /\\(/,\n                next: \"macro parameter name list\"\n            }, {\n                token: \"punctuation.definition.macro.begin.csound\",\n                regex: /#/,\n                next: \"macro body\"\n            }\n        ],\n        \"macro parameter name list\": [\n            {\n                token: \"variable.parameter.preprocessor.csound\",\n                regex: /[A-Z_a-z]\\w*/\n            }, {\n                token: \"punctuation.definition.macro-parameter-name-list.end.csound\",\n                regex: /\\)/,\n                next: \"define directive\"\n            }\n        ],\n        \"macro body\": [\n            {\n                token: \"constant.character.escape.csound\",\n                regex: /\\\\#/\n            }, {\n                token: \"punctuation.definition.macro.end.csound\",\n                regex: /#/,\n                next: \"start\"\n            },\n            start\n        ],\n        \"macro directive\": [\n            this.comments,\n            {\n                token: \"entity.name.function.preprocessor.csound\",\n                regex: /[A-Z_a-z]\\w*/,\n                next: \"start\"\n            }\n        ],\n        \"macro parameter value list\": [\n            {\n                token: \"punctuation.definition.macro-parameter-value-list.end.csound\",\n                regex: /\\)/,\n                next: \"start\"\n            }, {\n                token: \"punctuation.definition.string.begin.csound\",\n                regex: /\"/,\n                next: \"macro parameter value quoted string\"\n            }, this.pushRule({\n                token: \"punctuation.macro-parameter-value-parenthetical.begin.csound\",\n                regex: /\\(/,\n                next: \"macro parameter value parenthetical\"\n            }), {\n                token: \"punctuation.macro-parameter-value-separator.csound\",\n                regex: \"[#']\"\n            }\n        ],\n        \"macro parameter value quoted string\": [\n            {\n                token: \"constant.character.escape.csound\",\n                regex: /\\\\[#'()]/\n            }, {\n                token: \"invalid.illegal.csound\",\n                regex: /[#'()]/\n            }, {\n                token: \"punctuation.definition.string.end.csound\",\n                regex: /\"/,\n                next: \"macro parameter value list\"\n            },\n            this.quotedStringContents,\n            {\n                defaultToken: \"string.quoted.csound\"\n            }\n        ],\n        \"macro parameter value parenthetical\": [\n            {\n                token: \"constant.character.escape.csound\",\n                regex: /\\\\\\)/\n            }, this.popRule({\n                token: \"punctuation.macro-parameter-value-parenthetical.end.csound\",\n                regex: /\\)/\n            }), this.pushRule({\n                token: \"punctuation.macro-parameter-value-parenthetical.begin.csound\",\n                regex: /\\(/,\n                next: \"macro parameter value parenthetical\"\n            }),\n            start\n        ]\n    };\n};\noop.inherits(CsoundPreprocessorHighlightRules, TextHighlightRules);\n(function () {\n    this.pushRule = function (params) {\n        if (Array.isArray(params.next)) {\n            for (var i = 0; i < params.next.length; i++) {\n                params.next[i] = this.embeddedRulePrefix + params.next[i];\n            }\n        }\n        return {\n            regex: params.regex, onMatch: function (value, currentState, stack, line) {\n                if (stack.length === 0)\n                    stack.push(currentState);\n                if (Array.isArray(params.next)) {\n                    for (var i = 0; i < params.next.length; i++) {\n                        stack.push(params.next[i]);\n                    }\n                }\n                else {\n                    stack.push(params.next);\n                }\n                this.next = stack[stack.length - 1];\n                return params.token;\n            },\n            get next() { return Array.isArray(params.next) ? params.next[params.next.length - 1] : params.next; },\n            set next(next) {\n                if (!Array.isArray(params.next)) {\n                    params.next = next;\n                }\n            },\n            get token() { return params.token; }\n        };\n    };\n    this.popRule = function (params) {\n        if (params.next) {\n            params.next = this.embeddedRulePrefix + params.next;\n        }\n        return {\n            regex: params.regex, onMatch: function (value, currentState, stack, line) {\n                stack.pop();\n                if (params.next) {\n                    stack.push(params.next);\n                    this.next = stack[stack.length - 1];\n                }\n                else {\n                    this.next = stack.length > 1 ? stack[stack.length - 1] : stack.pop();\n                }\n                return params.token;\n            }\n        };\n    };\n}).call(CsoundPreprocessorHighlightRules.prototype);\nexports.CsoundPreprocessorHighlightRules = CsoundPreprocessorHighlightRules;\n\n});\n\nace.define(\"ace/mode/csound_score_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/csound_preprocessor_highlight_rules\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar CsoundPreprocessorHighlightRules = require(\"./csound_preprocessor_highlight_rules\").CsoundPreprocessorHighlightRules;\nvar CsoundScoreHighlightRules = function (embeddedRulePrefix) {\n    CsoundPreprocessorHighlightRules.call(this, embeddedRulePrefix);\n    this.quotedStringContents.push({\n        token: \"invalid.illegal.csound-score\",\n        regex: /[^\"]*$/\n    });\n    var start = this.$rules.start;\n    start.push({\n        token: \"keyword.control.csound-score\",\n        regex: /[aBbCdefiqstvxy]/\n    }, {\n        token: \"invalid.illegal.csound-score\",\n        regex: /w/\n    }, {\n        token: \"constant.numeric.language.csound-score\",\n        regex: /z/\n    }, {\n        token: [\"keyword.control.csound-score\", \"constant.numeric.integer.decimal.csound-score\"],\n        regex: /([nNpP][pP])(\\d+)/\n    }, {\n        token: \"keyword.other.csound-score\",\n        regex: /[mn]/,\n        push: [\n            {\n                token: \"empty\",\n                regex: /$/,\n                next: \"pop\"\n            },\n            this.comments,\n            {\n                token: \"entity.name.label.csound-score\",\n                regex: /[A-Z_a-z]\\w*/\n            }\n        ]\n    }, {\n        token: \"keyword.preprocessor.csound-score\",\n        regex: /r\\b/,\n        next: \"repeat section\"\n    }, this.numbers, {\n        token: \"keyword.operator.csound-score\",\n        regex: \"[!+\\\\-*/^%&|<>#~.]\"\n    }, this.pushRule({\n        token: \"punctuation.definition.string.begin.csound-score\",\n        regex: /\"/,\n        next: \"quoted string\"\n    }), this.pushRule({\n        token: \"punctuation.braced-loop.begin.csound-score\",\n        regex: /{/,\n        next: \"loop after left brace\"\n    }));\n    this.addRules({\n        \"repeat section\": [\n            {\n                token: \"empty\",\n                regex: /$/,\n                next: \"start\"\n            },\n            this.comments,\n            {\n                token: \"constant.numeric.integer.decimal.csound-score\",\n                regex: /\\d+/,\n                next: \"repeat section before label\"\n            }\n        ],\n        \"repeat section before label\": [\n            {\n                token: \"empty\",\n                regex: /$/,\n                next: \"start\"\n            },\n            this.comments,\n            {\n                token: \"entity.name.label.csound-score\",\n                regex: /[A-Z_a-z]\\w*/,\n                next: \"start\"\n            }\n        ],\n        \"quoted string\": [\n            this.popRule({\n                token: \"punctuation.definition.string.end.csound-score\",\n                regex: /\"/\n            }),\n            this.quotedStringContents,\n            {\n                defaultToken: \"string.quoted.csound-score\"\n            }\n        ],\n        \"loop after left brace\": [\n            this.popRule({\n                token: \"constant.numeric.integer.decimal.csound-score\",\n                regex: /\\d+/,\n                next: \"loop after repeat count\"\n            }),\n            this.comments,\n            {\n                token: \"invalid.illegal.csound\",\n                regex: /\\S.*/\n            }\n        ],\n        \"loop after repeat count\": [\n            this.popRule({\n                token: \"entity.name.function.preprocessor.csound-score\",\n                regex: /[A-Z_a-z]\\w*\\b/,\n                next: \"loop after macro name\"\n            }),\n            this.comments,\n            {\n                token: \"invalid.illegal.csound\",\n                regex: /\\S.*/\n            }\n        ],\n        \"loop after macro name\": [\n            start,\n            this.popRule({\n                token: \"punctuation.braced-loop.end.csound-score\",\n                regex: /}/\n            })\n        ]\n    });\n    this.normalizeRules();\n};\noop.inherits(CsoundScoreHighlightRules, CsoundPreprocessorHighlightRules);\nexports.CsoundScoreHighlightRules = CsoundScoreHighlightRules;\n\n});\n\nace.define(\"ace/mode/csound_score\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/csound_score_highlight_rules\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar CsoundScoreHighlightRules = require(\"./csound_score_highlight_rules\").CsoundScoreHighlightRules;\nvar Mode = function () {\n    this.HighlightRules = CsoundScoreHighlightRules;\n};\noop.inherits(Mode, TextMode);\n(function () {\n    this.lineCommentStart = \";\";\n    this.blockComment = { start: \"/*\", end: \"*/\" };\n    this.$id = \"ace/mode/csound_score\";\n}).call(Mode.prototype);\nexports.Mode = Mode;\n\n});                (function() {\n                    ace.require([\"ace/mode/csound_score\"], function(m) {\n                        if ( true && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            \n\n//# sourceURL=webpack://robot-karol-4/./node_modules/ace-builds/src-noconflict/mode-csound_score.js?");

/***/ })

}]);