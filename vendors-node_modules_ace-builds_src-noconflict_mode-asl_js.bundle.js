/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkrobot_karol_4"] = self["webpackChunkrobot_karol_4"] || []).push([["vendors-node_modules_ace-builds_src-noconflict_mode-asl_js"],{

/***/ "./node_modules/ace-builds/src-noconflict/mode-asl.js":
/*!************************************************************!*\
  !*** ./node_modules/ace-builds/src-noconflict/mode-asl.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nace.define(\"ace/mode/doc_comment_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\nvar DocCommentHighlightRules = function () {\n    this.$rules = {\n        \"start\": [\n            {\n                token: \"comment.doc.tag\",\n                regex: \"@\\\\w+(?=\\\\s|$)\"\n            }, DocCommentHighlightRules.getTagRule(), {\n                defaultToken: \"comment.doc.body\",\n                caseInsensitive: true\n            }\n        ]\n    };\n};\noop.inherits(DocCommentHighlightRules, TextHighlightRules);\nDocCommentHighlightRules.getTagRule = function (start) {\n    return {\n        token: \"comment.doc.tag.storage.type\",\n        regex: \"\\\\b(?:TODO|FIXME|XXX|HACK)\\\\b\"\n    };\n};\nDocCommentHighlightRules.getStartRule = function (start) {\n    return {\n        token: \"comment.doc\", // doc comment\n        regex: /\\/\\*\\*(?!\\/)/,\n        next: start\n    };\n};\nDocCommentHighlightRules.getEndRule = function (start) {\n    return {\n        token: \"comment.doc\", // closing comment\n        regex: \"\\\\*\\\\/\",\n        next: start\n    };\n};\nexports.DocCommentHighlightRules = DocCommentHighlightRules;\n\n});\n\nace.define(\"ace/mode/asl_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/doc_comment_highlight_rules\",\"ace/mode/text_highlight_rules\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar DocCommentHighlightRules = require(\"./doc_comment_highlight_rules\").DocCommentHighlightRules;\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\nvar ASLHighlightRules = function () {\n    var keywords = (\"Default|DefinitionBlock|Device|Method|Else|ElseIf|For|Function|If|Include|Method|Return|\" +\n        \"Scope|Switch|Case|While|Break|BreakPoint|Continue|NoOp|Wait|True|False|\" +\n        \"AccessAs|Acquire|Alias|BankField|Buffer|Concatenate|ConcatenateResTemplate|\" +\n        \"CondRefOf|Connection|CopyObject|CreateBitField|CreateByteField|CreateDWordField|\" +\n        \"CreateField|CreateQWordField|CreateWordField|DataTableRegion|Debug|\" +\n        \"DMA|DWordIO|DWordMemory|DWordSpace|EisaId|EISAID|EndDependentFn|Event|ExtendedIO|\" +\n        \"ExtendedMemory|ExtendedSpace|External|Fatal|Field|FindSetLeftBit|FindSetRightBit|\" +\n        \"FixedDMA|FixedIO|Fprintf|FromBCD|GpioInt|GpioIo|I2CSerialBusV2|IndexField|\" +\n        \"Interrupt|IO|IRQ|IRQNoFlags|Load|LoadTable|Match|Memory32|Memory32Fixed|\" +\n        \"Mid|Mutex|Name|Notify|Offset|ObjectType|OperationRegion|Package|PowerResource|Printf|\" +\n        \"QWordIO|QWordMemory|QWordSpace|RawDataBuffer|Register|Release|Reset|ResourceTemplate|\" +\n        \"Signal|SizeOf|Sleep|SPISerialBusV2|Stall|StartDependentFn|StartDependentFnNoPri|\" +\n        \"Store|ThermalZone|Timer|ToBCD|ToBuffer|ToDecimalString|ToInteger|ToPLD|ToString|\" +\n        \"ToUUID|UARTSerialBusV2|Unicode|Unload|VendorLong|VendorShort|WordBusNumber|WordIO|\" +\n        \"WordSpace\");\n    var keywordOperators = (\"Add|And|Decrement|Divide|Increment|Index|LAnd|LEqual|LGreater|LGreaterEqual|\" +\n        \"LLess|LLessEqual|LNot|LNotEqual|LOr|Mod|Multiply|NAnd|NOr|Not|Or|RefOf|Revision|\" +\n        \"ShiftLeft|ShiftRight|Subtract|XOr|DerefOf\");\n    var flags = (\"AttribQuick|AttribSendReceive|AttribByte|AttribBytes|AttribRawBytes|\" +\n        \"AttribRawProcessBytes|AttribWord|AttribBlock|AttribProcessCall|AttribBlockProcessCall|\" +\n        \"AnyAcc|ByteAcc|WordAcc|DWordAcc|QWordAcc|BufferAcc|\" +\n        \"AddressRangeMemory|AddressRangeReserved|AddressRangeNVS|AddressRangeACPI|\" +\n        \"RegionSpaceKeyword|FFixedHW|PCC|\" +\n        \"AddressingMode7Bit|AddressingMode10Bit|\" +\n        \"DataBitsFive|DataBitsSix|DataBitsSeven|DataBitsEight|DataBitsNine|\" +\n        \"BusMaster|NotBusMaster|\" +\n        \"ClockPhaseFirst|ClockPhaseSecond|ClockPolarityLow|ClockPolarityHigh|\" +\n        \"SubDecode|PosDecode|\" +\n        \"BigEndianing|LittleEndian|\" +\n        \"FlowControlNone|FlowControlXon|FlowControlHardware|\" +\n        \"Edge|Level|ActiveHigh|ActiveLow|ActiveBoth|Decode16|Decode10|\" +\n        \"IoRestrictionNone|IoRestrictionInputOnly|IoRestrictionOutputOnly|\" +\n        \"IoRestrictionNoneAndPreserve|Lock|NoLock|MTR|MEQ|MLE|MLT|MGE|MGT|\" +\n        \"MaxFixed|MaxNotFixed|Cacheable|WriteCombining|Prefetchable|NonCacheable|\" +\n        \"MinFixed|MinNotFixed|\" +\n        \"ParityTypeNone|ParityTypeSpace|ParityTypeMark|ParityTypeOdd|ParityTypeEven|\" +\n        \"PullDefault|PullUp|PullDown|PullNone|PolarityHigh|PolarityLow|\" +\n        \"ISAOnlyRanges|NonISAOnlyRanges|EntireRange|ReadWrite|ReadOnly|\" +\n        \"UserDefRegionSpace|SystemIO|SystemMemory|PCI_Config|EmbeddedControl|\" +\n        \"SMBus|SystemCMOS|PciBarTarget|IPMI|GeneralPurposeIO|GenericSerialBus|\" +\n        \"ResourceConsumer|ResourceProducer|Serialized|NotSerialized|\" +\n        \"Shared|Exclusive|SharedAndWake|ExclusiveAndWake|ControllerInitiated|DeviceInitiated|\" +\n        \"StopBitsZero|StopBitsOne|StopBitsOnePlusHalf|StopBitsTwo|\" +\n        \"Width8Bit|Width16Bit|Width32Bit|Width64Bit|Width128Bit|Width256Bit|\" +\n        \"SparseTranslation|DenseTranslation|TypeTranslation|TypeStatic|\" +\n        \"Preserve|WriteAsOnes|WriteAsZeros|Transfer8|Transfer16|Transfer8_16|\" +\n        \"ThreeWireMode|FourWireMode\");\n    var storageTypes = (\"UnknownObj|IntObj|StrObj|BuffObj|PkgObj|FieldUnitObj|DeviceObj|\" +\n        \"EventObj|MethodObj|MutexObj|OpRegionObj|PowerResObj|ProcessorObj|\" +\n        \"ThermalZoneObj|BuffFieldObj|DDBHandleObj\");\n    var builtinConstants = (\"__FILE__|__PATH__|__LINE__|__DATE__|__IASL__\");\n    var strNumbers = (\"One|Ones|Zero\");\n    var deprecated = (\"Memory24|Processor\");\n    var keywordMapper = this.createKeywordMapper({\n        \"keyword\": keywords,\n        \"constant.numeric\": strNumbers,\n        \"keyword.operator\": keywordOperators,\n        \"constant.language\": builtinConstants,\n        \"storage.type\": storageTypes,\n        \"constant.library\": flags,\n        \"invalid.deprecated\": deprecated\n    }, \"identifier\");\n    this.$rules = {\n        \"start\": [\n            {\n                token: \"comment\",\n                regex: \"\\\\/\\\\/.*$\"\n            },\n            DocCommentHighlightRules.getStartRule(\"doc-start\"),\n            {\n                token: \"comment\", // multi line comment\n                regex: \"\\\\/\\\\*\",\n                next: \"comment\"\n            },\n            DocCommentHighlightRules.getStartRule(\"doc-start\"),\n            {\n                token: \"comment\", // ignored fields / comments\n                regex: \"\\\\\\[\",\n                next: \"ignoredfield\"\n            }, {\n                token: \"variable\",\n                regex: \"\\\\Local[0-7]|\\\\Arg[0-6]\"\n            }, {\n                token: \"keyword\", // pre-compiler directives\n                regex: \"#\\\\s*(?:define|elif|else|endif|error|if|ifdef|ifndef|include|includebuffer|line|pragma|undef|warning)\\\\b\",\n                next: \"directive\"\n            }, {\n                token: \"string\", // single line\n                regex: '[\"](?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?[\"]'\n            }, {\n                token: \"constant.character\", // single line\n                regex: \"['](?:(?:\\\\\\\\.)|(?:[^'\\\\\\\\]))*?[']\"\n            }, {\n                token: \"constant.numeric\", // hex\n                regex: /0[xX][0-9a-fA-F]+\\b/\n            }, {\n                token: \"constant.numeric\",\n                regex: /[0-9]+\\b/\n            }, {\n                token: keywordMapper,\n                regex: \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\n            }, {\n                token: \"keyword.operator\",\n                regex: /[!\\~\\*\\/%+-<>\\^|=&]/\n            }, {\n                token: \"lparen\",\n                regex: \"[[({]\"\n            }, {\n                token: \"rparen\",\n                regex: \"[\\\\])}]\"\n            }, {\n                token: \"text\",\n                regex: \"\\\\s+\"\n            }\n        ],\n        \"comment\": [\n            {\n                token: \"comment\", // closing comment\n                regex: \"\\\\*\\\\/\",\n                next: \"start\"\n            }, {\n                defaultToken: \"comment\"\n            }\n        ],\n        \"ignoredfield\": [\n            {\n                token: \"comment\", // closing ignored fields / comments\n                regex: \"\\\\\\]\",\n                next: \"start\"\n            }, {\n                defaultToken: \"comment\"\n            }\n        ],\n        \"directive\": [\n            {\n                token: \"constant.other.multiline\",\n                regex: /\\\\/\n            },\n            {\n                token: \"constant.other.multiline\",\n                regex: /.*\\\\/\n            },\n            {\n                token: \"constant.other\",\n                regex: \"\\\\s*<.+?>*s\",\n                next: \"start\"\n            },\n            {\n                token: \"constant.other\", // single line\n                regex: '\\\\s*[\"](?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?[\"]*s',\n                next: \"start\"\n            },\n            {\n                token: \"constant.other\", // single line\n                regex: \"\\\\s*['](?:(?:\\\\\\\\.)|(?:[^'\\\\\\\\]))*?[']\",\n                next: \"start\"\n            },\n            {\n                token: \"constant.other\",\n                regex: /[^\\\\\\/]+/,\n                next: \"start\"\n            }\n        ]\n    };\n    this.embedRules(DocCommentHighlightRules, \"doc-\", [DocCommentHighlightRules.getEndRule(\"start\")]);\n};\noop.inherits(ASLHighlightRules, TextHighlightRules);\nexports.ASLHighlightRules = ASLHighlightRules;\n\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\nvar FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n        this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n(function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n        var line = session.getLine(row);\n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n        return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                }\n                else if (foldStyle != \"all\")\n                    range = null;\n            }\n            return range;\n        }\n        if (foldStyle === \"markbegin\")\n            return;\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    this.getSectionRange = function (session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                }\n                else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                }\n                else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m)\n                continue;\n            if (m[1])\n                depth--;\n            else\n                depth++;\n            if (!depth)\n                break;\n        }\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/asl\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/asl_highlight_rules\",\"ace/mode/folding/cstyle\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar ASLHighlightRules = require(\"./asl_highlight_rules\").ASLHighlightRules;\nvar FoldMode = require(\"./folding/cstyle\").FoldMode;\nvar Mode = function () {\n    this.HighlightRules = ASLHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n(function () {\n    this.$id = \"ace/mode/asl\";\n}).call(Mode.prototype);\nexports.Mode = Mode;\n\n});                (function() {\n                    ace.require([\"ace/mode/asl\"], function(m) {\n                        if ( true && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            \n\n//# sourceURL=webpack://robot-karol-4/./node_modules/ace-builds/src-noconflict/mode-asl.js?");

/***/ })

}]);