/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkrobot_karol_4"] = self["webpackChunkrobot_karol_4"] || []).push([["vendors-node_modules_ace-builds_src-noconflict_keybinding-emacs_js"],{

/***/ "./node_modules/ace-builds/src-noconflict/keybinding-emacs.js":
/*!********************************************************************!*\
  !*** ./node_modules/ace-builds/src-noconflict/keybinding-emacs.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nace.define(\"ace/occur\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/search\",\"ace/edit_session\",\"ace/search_highlight\",\"ace/lib/dom\"], function(require, exports, module){\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar oop = require(\"./lib/oop\");\nvar Search = require(\"./search\").Search;\nvar EditSession = require(\"./edit_session\").EditSession;\nvar SearchHighlight = require(\"./search_highlight\").SearchHighlight;\nvar Occur = /** @class */ (function (_super) {\n    __extends(Occur, _super);\n    function Occur() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Occur.prototype.enter = function (editor, options) {\n        if (!options.needle)\n            return false;\n        var pos = editor.getCursorPosition();\n        this.displayOccurContent(editor, options);\n        var translatedPos = this.originalToOccurPosition(editor.session, pos);\n        editor.moveCursorToPosition(translatedPos);\n        return true;\n    };\n    Occur.prototype.exit = function (editor, options) {\n        var pos = options.translatePosition && editor.getCursorPosition();\n        var translatedPos = pos && this.occurToOriginalPosition(editor.session, pos);\n        this.displayOriginalContent(editor);\n        if (translatedPos)\n            editor.moveCursorToPosition(translatedPos);\n        return true;\n    };\n    Occur.prototype.highlight = function (sess, regexp) {\n        var hl = sess.$occurHighlight = sess.$occurHighlight || sess.addDynamicMarker(new SearchHighlight(null, \"ace_occur-highlight\", \"text\"));\n        hl.setRegexp(regexp);\n        sess._emit(\"changeBackMarker\"); // force highlight layer redraw\n    };\n    Occur.prototype.displayOccurContent = function (editor, options) {\n        this.$originalSession = editor.session;\n        var found = this.matchingLines(editor.session, options);\n        var lines = found.map(function (foundLine) { return foundLine.content; });\n        var occurSession = new EditSession(lines.join('\\n'));\n        occurSession.$occur = this;\n        occurSession.$occurMatchingLines = found;\n        editor.setSession(occurSession);\n        this.$useEmacsStyleLineStart = this.$originalSession.$useEmacsStyleLineStart;\n        occurSession.$useEmacsStyleLineStart = this.$useEmacsStyleLineStart;\n        this.highlight(occurSession, options.re);\n        occurSession._emit('changeBackMarker');\n    };\n    Occur.prototype.displayOriginalContent = function (editor) {\n        editor.setSession(this.$originalSession);\n        this.$originalSession.$useEmacsStyleLineStart = this.$useEmacsStyleLineStart;\n    };\n    Occur.prototype.originalToOccurPosition = function (session, pos) {\n        var lines = session.$occurMatchingLines;\n        var nullPos = { row: 0, column: 0 };\n        if (!lines)\n            return nullPos;\n        for (var i = 0; i < lines.length; i++) {\n            if (lines[i].row === pos.row)\n                return { row: i, column: pos.column };\n        }\n        return nullPos;\n    };\n    Occur.prototype.occurToOriginalPosition = function (session, pos) {\n        var lines = session.$occurMatchingLines;\n        if (!lines || !lines[pos.row])\n            return pos;\n        return { row: lines[pos.row].row, column: pos.column };\n    };\n    Occur.prototype.matchingLines = function (session, options) {\n        options = oop.mixin({}, options);\n        if (!session || !options.needle)\n            return [];\n        var search = new Search();\n        search.set(options);\n        return search.findAll(session).reduce(function (lines, range) {\n            var row = range.start.row;\n            var last = lines[lines.length - 1];\n            return last && last.row === row ?\n                lines :\n                lines.concat({ row: row, content: session.getLine(row) });\n        }, []);\n    };\n    return Occur;\n}(Search));\nvar dom = require('./lib/dom');\ndom.importCssString(\".ace_occur-highlight {\\n\\\n    border-radius: 4px;\\n\\\n    background-color: rgba(87, 255, 8, 0.25);\\n\\\n    position: absolute;\\n\\\n    z-index: 4;\\n\\\n    box-sizing: border-box;\\n\\\n    box-shadow: 0 0 4px rgb(91, 255, 50);\\n\\\n}\\n\\\n.ace_dark .ace_occur-highlight {\\n\\\n    background-color: rgb(80, 140, 85);\\n\\\n    box-shadow: 0 0 4px rgb(60, 120, 70);\\n\\\n}\\n\", \"incremental-occur-highlighting\", false);\nexports.Occur = Occur;\n\n});\n\nace.define(\"ace/commands/occur_commands\",[\"require\",\"exports\",\"module\",\"ace/config\",\"ace/occur\",\"ace/keyboard/hash_handler\",\"ace/lib/oop\"], function(require, exports, module){var config = require(\"../config\"), Occur = require(\"../occur\").Occur;\nvar occurStartCommand = {\n    name: \"occur\",\n    exec: function (editor, options) {\n        var alreadyInOccur = !!editor.session.$occur;\n        var occurSessionActive = new Occur().enter(editor, options);\n        if (occurSessionActive && !alreadyInOccur)\n            OccurKeyboardHandler.installIn(editor);\n    },\n    readOnly: true\n};\nvar occurCommands = [{\n        name: \"occurexit\",\n        bindKey: 'esc|Ctrl-G',\n        exec: function (editor) {\n            var occur = editor.session.$occur;\n            if (!occur)\n                return;\n            occur.exit(editor, {});\n            if (!editor.session.$occur)\n                OccurKeyboardHandler.uninstallFrom(editor);\n        },\n        readOnly: true\n    }, {\n        name: \"occuraccept\",\n        bindKey: 'enter',\n        exec: function (editor) {\n            var occur = editor.session.$occur;\n            if (!occur)\n                return;\n            occur.exit(editor, { translatePosition: true });\n            if (!editor.session.$occur)\n                OccurKeyboardHandler.uninstallFrom(editor);\n        },\n        readOnly: true\n    }];\nvar HashHandler = require(\"../keyboard/hash_handler\").HashHandler;\nvar oop = require(\"../lib/oop\");\nfunction OccurKeyboardHandler() { }\noop.inherits(OccurKeyboardHandler, HashHandler);\n(function () {\n    this.isOccurHandler = true;\n    this.attach = function (editor) {\n        HashHandler.call(this, occurCommands, editor.commands.platform);\n        this.$editor = editor;\n    };\n    var handleKeyboard$super = this.handleKeyboard;\n    this.handleKeyboard = function (data, hashId, key, keyCode) {\n        var cmd = handleKeyboard$super.call(this, data, hashId, key, keyCode);\n        return (cmd && cmd.command) ? cmd : undefined;\n    };\n}).call(OccurKeyboardHandler.prototype);\nOccurKeyboardHandler.installIn = function (editor) {\n    var handler = new this();\n    editor.keyBinding.addKeyboardHandler(handler);\n    editor.commands.addCommands(occurCommands);\n};\nOccurKeyboardHandler.uninstallFrom = function (editor) {\n    editor.commands.removeCommands(occurCommands);\n    var handler = editor.getKeyboardHandler();\n    if (handler.isOccurHandler)\n        editor.keyBinding.removeKeyboardHandler(handler);\n};\nexports.occurStartCommand = occurStartCommand;\n\n});\n\nace.define(\"ace/commands/incremental_search_commands\",[\"require\",\"exports\",\"module\",\"ace/config\",\"ace/lib/oop\",\"ace/keyboard/hash_handler\",\"ace/commands/occur_commands\"], function(require, exports, module){var config = require(\"../config\");\nvar oop = require(\"../lib/oop\");\nvar HashHandler = require(\"../keyboard/hash_handler\").HashHandler;\nvar occurStartCommand = require(\"./occur_commands\").occurStartCommand;\nexports.iSearchStartCommands = [{\n        name: \"iSearch\",\n        bindKey: { win: \"Ctrl-F\", mac: \"Command-F\" },\n        exec: function (editor, options) {\n            config.loadModule([\"core\", \"ace/incremental_search\"], function (e) {\n                var iSearch = e.iSearch = e.iSearch || new e.IncrementalSearch();\n                iSearch.activate(editor, options.backwards);\n                if (options.jumpToFirstMatch)\n                    iSearch.next(options);\n            });\n        },\n        readOnly: true\n    }, {\n        name: \"iSearchBackwards\",\n        exec: function (editor, jumpToNext) { editor.execCommand('iSearch', { backwards: true }); },\n        readOnly: true\n    }, {\n        name: \"iSearchAndGo\",\n        bindKey: { win: \"Ctrl-K\", mac: \"Command-G\" },\n        exec: function (editor, jumpToNext) { editor.execCommand('iSearch', { jumpToFirstMatch: true, useCurrentOrPrevSearch: true }); },\n        readOnly: true\n    }, {\n        name: \"iSearchBackwardsAndGo\",\n        bindKey: { win: \"Ctrl-Shift-K\", mac: \"Command-Shift-G\" },\n        exec: function (editor) { editor.execCommand('iSearch', { jumpToFirstMatch: true, backwards: true, useCurrentOrPrevSearch: true }); },\n        readOnly: true\n    }];\nexports.iSearchCommands = [{\n        name: \"restartSearch\",\n        bindKey: { win: \"Ctrl-F\", mac: \"Command-F\" },\n        exec: function (iSearch) {\n            iSearch.cancelSearch(true);\n        }\n    }, {\n        name: \"searchForward\",\n        bindKey: { win: \"Ctrl-S|Ctrl-K\", mac: \"Ctrl-S|Command-G\" },\n        exec: function (iSearch, options) {\n            options.useCurrentOrPrevSearch = true;\n            iSearch.next(options);\n        }\n    }, {\n        name: \"searchBackward\",\n        bindKey: { win: \"Ctrl-R|Ctrl-Shift-K\", mac: \"Ctrl-R|Command-Shift-G\" },\n        exec: function (iSearch, options) {\n            options.useCurrentOrPrevSearch = true;\n            options.backwards = true;\n            iSearch.next(options);\n        }\n    }, {\n        name: \"extendSearchTerm\",\n        exec: function (iSearch, string) {\n            iSearch.addString(string);\n        }\n    }, {\n        name: \"extendSearchTermSpace\",\n        bindKey: \"space\",\n        exec: function (iSearch) { iSearch.addString(' '); }\n    }, {\n        name: \"shrinkSearchTerm\",\n        bindKey: \"backspace\",\n        exec: function (iSearch) {\n            iSearch.removeChar();\n        }\n    }, {\n        name: 'confirmSearch',\n        bindKey: 'return',\n        exec: function (iSearch) { iSearch.deactivate(); }\n    }, {\n        name: 'cancelSearch',\n        bindKey: 'esc|Ctrl-G',\n        exec: function (iSearch) { iSearch.deactivate(true); }\n    }, {\n        name: 'occurisearch',\n        bindKey: 'Ctrl-O',\n        exec: function (iSearch) {\n            var options = oop.mixin({}, iSearch.$options);\n            iSearch.deactivate();\n            occurStartCommand.exec(iSearch.$editor, options);\n        }\n    }, {\n        name: \"yankNextWord\",\n        bindKey: \"Ctrl-w\",\n        exec: function (iSearch) {\n            var ed = iSearch.$editor, range = ed.selection.getRangeOfMovements(function (sel) { sel.moveCursorWordRight(); }), string = ed.session.getTextRange(range);\n            iSearch.addString(string);\n        }\n    }, {\n        name: \"yankNextChar\",\n        bindKey: \"Ctrl-Alt-y\",\n        exec: function (iSearch) {\n            var ed = iSearch.$editor, range = ed.selection.getRangeOfMovements(function (sel) { sel.moveCursorRight(); }), string = ed.session.getTextRange(range);\n            iSearch.addString(string);\n        }\n    }, {\n        name: 'recenterTopBottom',\n        bindKey: 'Ctrl-l',\n        exec: function (iSearch) { iSearch.$editor.execCommand('recenterTopBottom'); }\n    }, {\n        name: 'selectAllMatches',\n        bindKey: 'Ctrl-space',\n        exec: function (iSearch) {\n            var ed = iSearch.$editor, hl = ed.session.$isearchHighlight, ranges = hl && hl.cache ? hl.cache\n                .reduce(function (ranges, ea) {\n                return ranges.concat(ea ? ea : []);\n            }, []) : [];\n            iSearch.deactivate(false);\n            ranges.forEach(ed.selection.addRange.bind(ed.selection));\n        }\n    }, {\n        name: 'searchAsRegExp',\n        bindKey: 'Alt-r',\n        exec: function (iSearch) {\n            iSearch.convertNeedleToRegExp();\n        }\n    }].map(function (cmd) {\n    cmd.readOnly = true;\n    cmd.isIncrementalSearchCommand = true;\n    cmd.scrollIntoView = \"animate-cursor\";\n    return cmd;\n});\nfunction IncrementalSearchKeyboardHandler(iSearch) {\n    this.$iSearch = iSearch;\n}\noop.inherits(IncrementalSearchKeyboardHandler, HashHandler);\n(function () {\n    this.attach = function (editor) {\n        var iSearch = this.$iSearch;\n        HashHandler.call(this, exports.iSearchCommands, editor.commands.platform);\n        this.$commandExecHandler = editor.commands.on('exec', function (e) {\n            if (!e.command.isIncrementalSearchCommand)\n                return iSearch.deactivate();\n            e.stopPropagation();\n            e.preventDefault();\n            var scrollTop = editor.session.getScrollTop();\n            var result = e.command.exec(iSearch, e.args || {});\n            editor.renderer.scrollCursorIntoView(null, 0.5);\n            editor.renderer.animateScrolling(scrollTop);\n            return result;\n        });\n    };\n    this.detach = function (editor) {\n        if (!this.$commandExecHandler)\n            return;\n        editor.commands.off('exec', this.$commandExecHandler);\n        delete this.$commandExecHandler;\n    };\n    var handleKeyboard$super = this.handleKeyboard;\n    this.handleKeyboard = function (data, hashId, key, keyCode) {\n        if (((hashId === 1 /*ctrl*/ || hashId === 8 /*command*/) && key === 'v')\n            || (hashId === 1 /*ctrl*/ && key === 'y'))\n            return null;\n        var cmd = handleKeyboard$super.call(this, data, hashId, key, keyCode);\n        if (cmd && cmd.command) {\n            return cmd;\n        }\n        if (hashId == -1) {\n            var extendCmd = this.commands.extendSearchTerm;\n            if (extendCmd) {\n                return { command: extendCmd, args: key };\n            }\n        }\n        return false;\n    };\n}).call(IncrementalSearchKeyboardHandler.prototype);\nexports.IncrementalSearchKeyboardHandler = IncrementalSearchKeyboardHandler;\n\n});\n\nace.define(\"ace/incremental_search\",[\"require\",\"exports\",\"module\",\"ace/range\",\"ace/search\",\"ace/search_highlight\",\"ace/commands/incremental_search_commands\",\"ace/lib/dom\",\"ace/commands/command_manager\",\"ace/editor\",\"ace/config\"], function(require, exports, module){\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar Range = require(\"./range\").Range;\nvar Search = require(\"./search\").Search;\nvar SearchHighlight = require(\"./search_highlight\").SearchHighlight;\nvar iSearchCommandModule = require(\"./commands/incremental_search_commands\");\nvar ISearchKbd = iSearchCommandModule.IncrementalSearchKeyboardHandler;\nfunction isRegExp(obj) {\n    return obj instanceof RegExp;\n}\nfunction regExpToObject(re) {\n    var string = String(re), start = string.indexOf('/'), flagStart = string.lastIndexOf('/');\n    return {\n        expression: string.slice(start + 1, flagStart),\n        flags: string.slice(flagStart + 1)\n    };\n}\nfunction stringToRegExp(string, flags) {\n    try {\n        return new RegExp(string, flags);\n    }\n    catch (e) {\n        return string;\n    }\n}\nfunction objectToRegExp(obj) {\n    return stringToRegExp(obj.expression, obj.flags);\n}\nvar IncrementalSearch = /** @class */ (function (_super) {\n    __extends(IncrementalSearch, _super);\n    function IncrementalSearch() {\n        var _this = _super.call(this) || this;\n        _this.$options = { wrap: false, skipCurrent: false };\n        _this.$keyboardHandler = new ISearchKbd(_this);\n        return _this;\n    }\n    IncrementalSearch.prototype.activate = function (editor, backwards) {\n        this.$editor = editor;\n        this.$startPos = this.$currentPos = editor.getCursorPosition();\n        this.$options.needle = '';\n        this.$options.backwards = backwards;\n        editor.keyBinding.addKeyboardHandler(this.$keyboardHandler);\n        this.$originalEditorOnPaste = editor.onPaste;\n        editor.onPaste = this.onPaste.bind(this);\n        this.$mousedownHandler = editor.on('mousedown', this.onMouseDown.bind(this));\n        this.selectionFix(editor);\n        this.statusMessage(true);\n    };\n    IncrementalSearch.prototype.deactivate = function (reset) {\n        this.cancelSearch(reset);\n        var editor = this.$editor;\n        editor.keyBinding.removeKeyboardHandler(this.$keyboardHandler);\n        if (this.$mousedownHandler) {\n            editor.off('mousedown', this.$mousedownHandler);\n            delete this.$mousedownHandler;\n        }\n        editor.onPaste = this.$originalEditorOnPaste;\n        this.message('');\n    };\n    IncrementalSearch.prototype.selectionFix = function (editor) {\n        if (editor.selection.isEmpty() && !editor.session.$emacsMark) {\n            editor.clearSelection();\n        }\n    };\n    IncrementalSearch.prototype.highlight = function (regexp) {\n        var sess = this.$editor.session, hl = sess.$isearchHighlight = sess.$isearchHighlight || sess.addDynamicMarker(new SearchHighlight(null, \"ace_isearch-result\", \"text\"));\n        hl.setRegexp(regexp);\n        sess._emit(\"changeBackMarker\"); // force highlight layer redraw\n    };\n    IncrementalSearch.prototype.cancelSearch = function (reset) {\n        var e = this.$editor;\n        this.$prevNeedle = this.$options.needle;\n        this.$options.needle = '';\n        if (reset) {\n            e.moveCursorToPosition(this.$startPos);\n            this.$currentPos = this.$startPos;\n        }\n        else {\n            e.pushEmacsMark && e.pushEmacsMark(this.$startPos, false);\n        }\n        this.highlight(null);\n        return Range.fromPoints(this.$currentPos, this.$currentPos);\n    };\n    IncrementalSearch.prototype.highlightAndFindWithNeedle = function (moveToNext, needleUpdateFunc) {\n        if (!this.$editor)\n            return null;\n        var options = this.$options;\n        if (needleUpdateFunc) {\n            options.needle = needleUpdateFunc.call(this, options.needle || '') || '';\n        }\n        if (options.needle.length === 0) {\n            this.statusMessage(true);\n            return this.cancelSearch(true);\n        }\n        options.start = this.$currentPos;\n        var session = this.$editor.session, found = this.find(session), shouldSelect = this.$editor.emacsMark ?\n            !!this.$editor.emacsMark() : !this.$editor.selection.isEmpty();\n        if (found) {\n            if (options.backwards)\n                found = Range.fromPoints(found.end, found.start);\n            this.$editor.selection.setRange(Range.fromPoints(shouldSelect ? this.$startPos : found.end, found.end));\n            if (moveToNext)\n                this.$currentPos = found.end;\n            this.highlight(options.re);\n        }\n        this.statusMessage(found);\n        return found;\n    };\n    IncrementalSearch.prototype.addString = function (s) {\n        return this.highlightAndFindWithNeedle(false, function (needle) {\n            if (!isRegExp(needle))\n                return needle + s;\n            var reObj = regExpToObject(needle);\n            reObj.expression += s;\n            return objectToRegExp(reObj);\n        });\n    };\n    IncrementalSearch.prototype.removeChar = function (c) {\n        return this.highlightAndFindWithNeedle(false, function (needle) {\n            if (!isRegExp(needle))\n                return needle.substring(0, needle.length - 1);\n            var reObj = regExpToObject(needle);\n            reObj.expression = reObj.expression.substring(0, reObj.expression.length - 1);\n            return objectToRegExp(reObj);\n        });\n    };\n    IncrementalSearch.prototype.next = function (options) {\n        options = options || {};\n        this.$options.backwards = !!options.backwards;\n        this.$currentPos = this.$editor.getCursorPosition();\n        return this.highlightAndFindWithNeedle(true, function (needle) {\n            return options.useCurrentOrPrevSearch && needle.length === 0 ?\n                this.$prevNeedle || '' : needle;\n        });\n    };\n    IncrementalSearch.prototype.onMouseDown = function (evt) {\n        this.deactivate();\n        return true;\n    };\n    IncrementalSearch.prototype.onPaste = function (text) {\n        this.addString(text);\n    };\n    IncrementalSearch.prototype.convertNeedleToRegExp = function () {\n        return this.highlightAndFindWithNeedle(false, function (needle) {\n            return isRegExp(needle) ? needle : stringToRegExp(needle, 'ig');\n        });\n    };\n    IncrementalSearch.prototype.convertNeedleToString = function () {\n        return this.highlightAndFindWithNeedle(false, function (needle) {\n            return isRegExp(needle) ? regExpToObject(needle).expression : needle;\n        });\n    };\n    IncrementalSearch.prototype.statusMessage = function (found) {\n        var options = this.$options, msg = '';\n        msg += options.backwards ? 'reverse-' : '';\n        msg += 'isearch: ' + options.needle;\n        msg += found ? '' : ' (not found)';\n        this.message(msg);\n    };\n    IncrementalSearch.prototype.message = function (msg) {\n        if (this.$editor.showCommandLine) {\n            this.$editor.showCommandLine(msg);\n            this.$editor.focus();\n        }\n    };\n    return IncrementalSearch;\n}(Search));\nexports.IncrementalSearch = IncrementalSearch;\nvar dom = require('./lib/dom');\ndom.importCssString(\"\\n.ace_marker-layer .ace_isearch-result {\\n  position: absolute;\\n  z-index: 6;\\n  box-sizing: border-box;\\n}\\ndiv.ace_isearch-result {\\n  border-radius: 4px;\\n  background-color: rgba(255, 200, 0, 0.5);\\n  box-shadow: 0 0 4px rgb(255, 200, 0);\\n}\\n.ace_dark div.ace_isearch-result {\\n  background-color: rgb(100, 110, 160);\\n  box-shadow: 0 0 4px rgb(80, 90, 140);\\n}\", \"incremental-search-highlighting\", false);\nvar commands = require(\"./commands/command_manager\");\n(function () {\n    this.setupIncrementalSearch = function (editor, val) {\n        if (this.usesIncrementalSearch == val)\n            return;\n        this.usesIncrementalSearch = val;\n        var iSearchCommands = iSearchCommandModule.iSearchStartCommands;\n        var method = val ? 'addCommands' : 'removeCommands';\n        this[method](iSearchCommands);\n    };\n}).call(commands.CommandManager.prototype);\nvar Editor = require(\"./editor\").Editor;\nrequire(\"./config\").defineOptions(Editor.prototype, \"editor\", {\n    useIncrementalSearch: {\n        set: function (val) {\n            this.keyBinding.$handlers.forEach(function (handler) {\n                if (handler.setupIncrementalSearch) {\n                    handler.setupIncrementalSearch(this, val);\n                }\n            });\n            this._emit('incrementalSearchSettingChanged', { isEnabled: val });\n        }\n    }\n});\n\n});\n\nace.define(\"ace/keyboard/emacs\",[\"require\",\"exports\",\"module\",\"ace/lib/dom\",\"ace/incremental_search\",\"ace/commands/incremental_search_commands\",\"ace/keyboard/hash_handler\",\"ace/lib/keys\"], function(require, exports, module){\"use strict\";\nvar dom = require(\"../lib/dom\");\nrequire(\"../incremental_search\");\nvar iSearchCommandModule = require(\"../commands/incremental_search_commands\");\nvar HashHandler = require(\"./hash_handler\").HashHandler;\nexports.handler = new HashHandler();\nexports.handler.isEmacs = true;\nexports.handler.$id = \"ace/keyboard/emacs\";\ndom.importCssString(\"\\n.emacs-mode .ace_cursor{\\n    border: 1px rgba(50,250,50,0.8) solid!important;\\n    box-sizing: border-box!important;\\n    background-color: rgba(0,250,0,0.9);\\n    opacity: 0.5;\\n}\\n.emacs-mode .ace_hidden-cursors .ace_cursor{\\n    opacity: 1;\\n    background-color: transparent;\\n}\\n.emacs-mode .ace_overwrite-cursors .ace_cursor {\\n    opacity: 1;\\n    background-color: transparent;\\n    border-width: 0 0 2px 2px !important;\\n}\\n.emacs-mode .ace_text-layer {\\n    z-index: 4\\n}\\n.emacs-mode .ace_cursor-layer {\\n    z-index: 2\\n}\", 'emacsMode');\nvar $formerLongWords;\nvar $formerLineStart;\nexports.handler.attach = function (editor) {\n    $formerLongWords = editor.session.$selectLongWords;\n    editor.session.$selectLongWords = true;\n    $formerLineStart = editor.session.$useEmacsStyleLineStart;\n    editor.session.$useEmacsStyleLineStart = true;\n    editor.session.$emacsMark = null; // the active mark\n    editor.session.$emacsMarkRing = editor.session.$emacsMarkRing || [];\n    editor.emacsMark = function () {\n        return this.session.$emacsMark;\n    };\n    editor.setEmacsMark = function (p) {\n        this.session.$emacsMark = p;\n    };\n    editor.pushEmacsMark = function (p, activate) {\n        var prevMark = this.session.$emacsMark;\n        if (prevMark)\n            pushUnique(this.session.$emacsMarkRing, prevMark);\n        if (!p || activate)\n            this.setEmacsMark(p);\n        else\n            pushUnique(this.session.$emacsMarkRing, p);\n    };\n    editor.popEmacsMark = function () {\n        var mark = this.emacsMark();\n        if (mark) {\n            this.setEmacsMark(null);\n            return mark;\n        }\n        return this.session.$emacsMarkRing.pop();\n    };\n    editor.getLastEmacsMark = function (p) {\n        return this.session.$emacsMark || this.session.$emacsMarkRing.slice(-1)[0];\n    };\n    editor.emacsMarkForSelection = function (replacement) {\n        var sel = this.selection, multiRangeLength = this.multiSelect ?\n            this.multiSelect.getAllRanges().length : 1, selIndex = sel.index || 0, markRing = this.session.$emacsMarkRing, markIndex = markRing.length - (multiRangeLength - selIndex), lastMark = markRing[markIndex] || sel.anchor;\n        if (replacement) {\n            markRing.splice(markIndex, 1, \"row\" in replacement && \"column\" in replacement ?\n                replacement : undefined);\n        }\n        return lastMark;\n    };\n    editor.on(\"click\", $resetMarkMode);\n    editor.on(\"changeSession\", $kbSessionChange);\n    editor.renderer.$blockCursor = true;\n    editor.setStyle(\"emacs-mode\");\n    editor.commands.addCommands(commands);\n    exports.handler.platform = editor.commands.platform;\n    editor.$emacsModeHandler = this;\n    editor.on('copy', this.onCopy);\n    editor.on('paste', this.onPaste);\n};\nfunction pushUnique(ring, mark) {\n    var last = ring[ring.length - 1];\n    if (last && last.row === mark.row && last.column === mark.column) {\n        return;\n    }\n    ring.push(mark);\n}\nexports.handler.detach = function (editor) {\n    editor.renderer.$blockCursor = false;\n    editor.session.$selectLongWords = $formerLongWords;\n    editor.session.$useEmacsStyleLineStart = $formerLineStart;\n    editor.off(\"click\", $resetMarkMode);\n    editor.off(\"changeSession\", $kbSessionChange);\n    editor.unsetStyle(\"emacs-mode\");\n    editor.commands.removeCommands(commands);\n    editor.off('copy', this.onCopy);\n    editor.off('paste', this.onPaste);\n    editor.$emacsModeHandler = null;\n};\nvar $kbSessionChange = function (e) {\n    if (e.oldSession) {\n        e.oldSession.$selectLongWords = $formerLongWords;\n        e.oldSession.$useEmacsStyleLineStart = $formerLineStart;\n    }\n    $formerLongWords = e.session.$selectLongWords;\n    e.session.$selectLongWords = true;\n    $formerLineStart = e.session.$useEmacsStyleLineStart;\n    e.session.$useEmacsStyleLineStart = true;\n    if (!e.session.hasOwnProperty('$emacsMark'))\n        e.session.$emacsMark = null;\n    if (!e.session.hasOwnProperty('$emacsMarkRing'))\n        e.session.$emacsMarkRing = [];\n};\nvar $resetMarkMode = function (e) {\n    e.editor.session.$emacsMark = null;\n};\nvar keys = require(\"../lib/keys\").KEY_MODS;\nvar eMods = { C: \"ctrl\", S: \"shift\", M: \"alt\", CMD: \"command\" };\nvar combinations = [\"C-S-M-CMD\",\n    \"S-M-CMD\", \"C-M-CMD\", \"C-S-CMD\", \"C-S-M\",\n    \"M-CMD\", \"S-CMD\", \"S-M\", \"C-CMD\", \"C-M\", \"C-S\",\n    \"CMD\", \"M\", \"S\", \"C\"];\ncombinations.forEach(function (c) {\n    var hashId = 0;\n    c.split(\"-\").forEach(function (c) {\n        hashId = hashId | keys[eMods[c]];\n    });\n    eMods[hashId] = c.toLowerCase() + \"-\";\n});\nexports.handler.onCopy = function (e, editor) {\n    if (editor.$handlesEmacsOnCopy)\n        return;\n    editor.$handlesEmacsOnCopy = true;\n    exports.handler.commands.killRingSave.exec(editor);\n    editor.$handlesEmacsOnCopy = false;\n};\nexports.handler.onPaste = function (e, editor) {\n    editor.pushEmacsMark(editor.getCursorPosition());\n};\nexports.handler.bindKey = function (key, command) {\n    if (typeof key == \"object\")\n        key = key[this.platform];\n    if (!key)\n        return;\n    var ckb = this.commandKeyBinding;\n    key.split(\"|\").forEach(function (keyPart) {\n        keyPart = keyPart.toLowerCase();\n        ckb[keyPart] = command;\n        var keyParts = keyPart.split(\" \").slice(0, -1);\n        keyParts.reduce(function (keyMapKeys, keyPart, i) {\n            var prefix = keyMapKeys[i - 1] ? keyMapKeys[i - 1] + ' ' : '';\n            return keyMapKeys.concat([prefix + keyPart]);\n        }, []).forEach(function (keyPart) {\n            if (!ckb[keyPart])\n                ckb[keyPart] = \"null\";\n        });\n    }, this);\n};\nexports.handler.getStatusText = function (editor, data) {\n    var str = \"\";\n    if (data.count)\n        str += data.count;\n    if (data.keyChain)\n        str += \" \" + data.keyChain;\n    return str;\n};\nexports.handler.handleKeyboard = function (data, hashId, key, keyCode) {\n    if (keyCode === -1)\n        return undefined;\n    var editor = data.editor;\n    editor._signal(\"changeStatus\");\n    if (hashId == -1) {\n        editor.pushEmacsMark();\n        if (data.count) {\n            var str = new Array(data.count + 1).join(key);\n            data.count = null;\n            return { command: \"insertstring\", args: str };\n        }\n    }\n    var modifier = eMods[hashId];\n    if (modifier == \"c-\" || data.count) {\n        var count = parseInt(key[key.length - 1]);\n        if (typeof count === 'number' && !isNaN(count)) {\n            data.count = Math.max(data.count, 0) || 0;\n            data.count = 10 * data.count + count;\n            return { command: \"null\" };\n        }\n    }\n    if (modifier)\n        key = modifier + key;\n    if (data.keyChain)\n        key = data.keyChain += \" \" + key;\n    var command = this.commandKeyBinding[key];\n    data.keyChain = command == \"null\" ? key : \"\";\n    if (!command)\n        return undefined;\n    if (command === \"null\")\n        return { command: \"null\" };\n    if (command === \"universalArgument\") {\n        data.count = -4;\n        return { command: \"null\" };\n    }\n    var args;\n    if (typeof command !== \"string\") {\n        args = command.args;\n        if (command.command)\n            command = command.command;\n        if (command === \"goorselect\") {\n            command = editor.emacsMark() ? args[1] : args[0];\n            args = null;\n        }\n    }\n    if (typeof command === \"string\") {\n        if (command === \"insertstring\" ||\n            command === \"splitline\" ||\n            command === \"togglecomment\") {\n            editor.pushEmacsMark();\n        }\n        command = this.commands[command] || editor.commands.commands[command];\n        if (!command)\n            return undefined;\n    }\n    if (!command.readOnly && !command.isYank)\n        data.lastCommand = null;\n    if (!command.readOnly && editor.emacsMark())\n        editor.setEmacsMark(null);\n    if (data.count) {\n        var count = data.count;\n        data.count = 0;\n        if (!command || !command.handlesCount) {\n            return {\n                args: args,\n                command: {\n                    exec: function (editor, args) {\n                        for (var i = 0; i < count; i++)\n                            command.exec(editor, args);\n                    },\n                    multiSelectAction: command.multiSelectAction\n                }\n            };\n        }\n        else {\n            if (!args)\n                args = {};\n            if (typeof args === 'object')\n                args.count = count;\n        }\n    }\n    return { command: command, args: args };\n};\nexports.emacsKeys = {\n    \"Up|C-p\": { command: \"goorselect\", args: [\"golineup\", \"selectup\"] },\n    \"Down|C-n\": { command: \"goorselect\", args: [\"golinedown\", \"selectdown\"] },\n    \"Left|C-b\": { command: \"goorselect\", args: [\"gotoleft\", \"selectleft\"] },\n    \"Right|C-f\": { command: \"goorselect\", args: [\"gotoright\", \"selectright\"] },\n    \"C-Left|M-b\": { command: \"goorselect\", args: [\"gotowordleft\", \"selectwordleft\"] },\n    \"C-Right|M-f\": { command: \"goorselect\", args: [\"gotowordright\", \"selectwordright\"] },\n    \"Home|C-a\": { command: \"goorselect\", args: [\"gotolinestart\", \"selecttolinestart\"] },\n    \"End|C-e\": { command: \"goorselect\", args: [\"gotolineend\", \"selecttolineend\"] },\n    \"C-Home|S-M-,\": { command: \"goorselect\", args: [\"gotostart\", \"selecttostart\"] },\n    \"C-End|S-M-.\": { command: \"goorselect\", args: [\"gotoend\", \"selecttoend\"] },\n    \"S-Up|S-C-p\": \"selectup\",\n    \"S-Down|S-C-n\": \"selectdown\",\n    \"S-Left|S-C-b\": \"selectleft\",\n    \"S-Right|S-C-f\": \"selectright\",\n    \"S-C-Left|S-M-b\": \"selectwordleft\",\n    \"S-C-Right|S-M-f\": \"selectwordright\",\n    \"S-Home|S-C-a\": \"selecttolinestart\",\n    \"S-End|S-C-e\": \"selecttolineend\",\n    \"S-C-Home\": \"selecttostart\",\n    \"S-C-End\": \"selecttoend\",\n    \"C-l\": \"recenterTopBottom\",\n    \"M-s\": \"centerselection\",\n    \"M-g\": \"gotoline\",\n    \"C-x C-p\": \"selectall\",\n    \"C-Down\": { command: \"goorselect\", args: [\"gotopagedown\", \"selectpagedown\"] },\n    \"C-Up\": { command: \"goorselect\", args: [\"gotopageup\", \"selectpageup\"] },\n    \"PageDown|C-v\": { command: \"goorselect\", args: [\"gotopagedown\", \"selectpagedown\"] },\n    \"PageUp|M-v\": { command: \"goorselect\", args: [\"gotopageup\", \"selectpageup\"] },\n    \"S-C-Down\": \"selectpagedown\",\n    \"S-C-Up\": \"selectpageup\",\n    \"C-s\": \"iSearch\",\n    \"C-r\": \"iSearchBackwards\",\n    \"M-C-s\": \"findnext\",\n    \"M-C-r\": \"findprevious\",\n    \"S-M-5\": \"replace\",\n    \"Backspace\": \"backspace\",\n    \"Delete|C-d\": \"del\",\n    \"Return|C-m\": { command: \"insertstring\", args: \"\\n\" }, // \"newline\"\n    \"C-o\": \"splitline\",\n    \"M-d|C-Delete\": { command: \"killWord\", args: \"right\" },\n    \"C-Backspace|M-Backspace|M-Delete\": { command: \"killWord\", args: \"left\" },\n    \"C-k\": \"killLine\",\n    \"C-y|S-Delete\": \"yank\",\n    \"M-y\": \"yankRotate\",\n    \"C-g\": \"keyboardQuit\",\n    \"C-w|C-S-W\": \"killRegion\",\n    \"M-w\": \"killRingSave\",\n    \"C-Space\": \"setMark\",\n    \"C-x C-x\": \"exchangePointAndMark\",\n    \"C-t\": \"transposeletters\",\n    \"M-u\": \"touppercase\", // Doesn't work\n    \"M-l\": \"tolowercase\",\n    \"M-/\": \"autocomplete\", // Doesn't work\n    \"C-u\": \"universalArgument\",\n    \"M-;\": \"togglecomment\",\n    \"C-/|C-x u|S-C--|C-z\": \"undo\",\n    \"S-C-/|S-C-x u|C--|S-C-z\": \"redo\", // infinite undo?\n    \"C-x r\": \"selectRectangularRegion\",\n    \"M-x\": { command: \"focusCommandLine\", args: \"M-x \" }\n};\nexports.handler.bindKeys(exports.emacsKeys);\nexports.handler.addCommands({\n    recenterTopBottom: function (editor) {\n        var renderer = editor.renderer;\n        var pos = renderer.$cursorLayer.getPixelPosition();\n        var h = renderer.$size.scrollerHeight - renderer.lineHeight;\n        var scrollTop = renderer.scrollTop;\n        if (Math.abs(pos.top - scrollTop) < 2) {\n            scrollTop = pos.top - h;\n        }\n        else if (Math.abs(pos.top - scrollTop - h * 0.5) < 2) {\n            scrollTop = pos.top;\n        }\n        else {\n            scrollTop = pos.top - h * 0.5;\n        }\n        editor.session.setScrollTop(scrollTop);\n    },\n    selectRectangularRegion: function (editor) {\n        editor.multiSelect.toggleBlockSelection();\n    },\n    setMark: {\n        exec: function (editor, args) {\n            if (args && args.count) {\n                if (editor.inMultiSelectMode)\n                    editor.forEachSelection(moveToMark);\n                else\n                    moveToMark();\n                moveToMark();\n                return;\n            }\n            var mark = editor.emacsMark(), ranges = editor.selection.getAllRanges(), rangePositions = ranges.map(function (r) { return { row: r.start.row, column: r.start.column }; }), transientMarkModeActive = true, hasNoSelection = ranges.every(function (range) { return range.isEmpty(); });\n            if (transientMarkModeActive && (mark || !hasNoSelection)) {\n                if (editor.inMultiSelectMode)\n                    editor.forEachSelection({ exec: editor.clearSelection.bind(editor) });\n                else\n                    editor.clearSelection();\n                if (mark)\n                    editor.pushEmacsMark(null);\n                return;\n            }\n            if (!mark) {\n                rangePositions.forEach(function (pos) { editor.pushEmacsMark(pos); });\n                editor.setEmacsMark(rangePositions[rangePositions.length - 1]);\n                return;\n            }\n            function moveToMark() {\n                var mark = editor.popEmacsMark();\n                mark && editor.moveCursorToPosition(mark);\n            }\n        },\n        readOnly: true,\n        handlesCount: true\n    },\n    exchangePointAndMark: {\n        exec: function exchangePointAndMark$exec(editor, args) {\n            var sel = editor.selection;\n            if (!args.count && !sel.isEmpty()) { // just invert selection\n                sel.setSelectionRange(sel.getRange(), !sel.isBackwards());\n                return;\n            }\n            if (args.count) { // replace mark and point\n                var pos = { row: sel.lead.row, column: sel.lead.column };\n                sel.clearSelection();\n                sel.moveCursorToPosition(editor.emacsMarkForSelection(pos));\n            }\n            else { // create selection to last mark\n                sel.selectToPosition(editor.emacsMarkForSelection());\n            }\n        },\n        readOnly: true,\n        handlesCount: true,\n        multiSelectAction: \"forEach\"\n    },\n    killWord: {\n        exec: function (editor, dir) {\n            editor.clearSelection();\n            if (dir == \"left\")\n                editor.selection.selectWordLeft();\n            else\n                editor.selection.selectWordRight();\n            var range = editor.getSelectionRange();\n            var text = editor.session.getTextRange(range);\n            exports.killRing.add(text);\n            editor.session.remove(range);\n            editor.clearSelection();\n        },\n        multiSelectAction: \"forEach\"\n    },\n    killLine: function (editor) {\n        editor.pushEmacsMark(null);\n        editor.clearSelection();\n        var range = editor.getSelectionRange();\n        var line = editor.session.getLine(range.start.row);\n        range.end.column = line.length;\n        line = line.substr(range.start.column);\n        var foldLine = editor.session.getFoldLine(range.start.row);\n        if (foldLine && range.end.row != foldLine.end.row) {\n            range.end.row = foldLine.end.row;\n            line = \"x\";\n        }\n        if (/^\\s*$/.test(line)) {\n            range.end.row++;\n            line = editor.session.getLine(range.end.row);\n            range.end.column = /^\\s*$/.test(line) ? line.length : 0;\n        }\n        var text = editor.session.getTextRange(range);\n        if (editor.prevOp.command == this)\n            exports.killRing.append(text);\n        else\n            exports.killRing.add(text);\n        editor.session.remove(range);\n        editor.clearSelection();\n    },\n    yank: function (editor) {\n        editor.onPaste(exports.killRing.get() || '');\n        editor.keyBinding.$data.lastCommand = \"yank\";\n    },\n    yankRotate: function (editor) {\n        if (editor.keyBinding.$data.lastCommand != \"yank\")\n            return;\n        editor.undo();\n        editor.session.$emacsMarkRing.pop(); // also undo recording mark\n        editor.onPaste(exports.killRing.rotate());\n        editor.keyBinding.$data.lastCommand = \"yank\";\n    },\n    killRegion: {\n        exec: function (editor) {\n            exports.killRing.add(editor.getCopyText());\n            editor.commands.byName.cut.exec(editor);\n            editor.setEmacsMark(null);\n        },\n        readOnly: true,\n        multiSelectAction: \"forEach\"\n    },\n    killRingSave: {\n        exec: function (editor) {\n            editor.$handlesEmacsOnCopy = true;\n            var marks = editor.session.$emacsMarkRing.slice(), deselectedMarks = [];\n            exports.killRing.add(editor.getCopyText());\n            setTimeout(function () {\n                function deselect() {\n                    var sel = editor.selection, range = sel.getRange(), pos = sel.isBackwards() ? range.end : range.start;\n                    deselectedMarks.push({ row: pos.row, column: pos.column });\n                    sel.clearSelection();\n                }\n                editor.$handlesEmacsOnCopy = false;\n                if (editor.inMultiSelectMode)\n                    editor.forEachSelection({ exec: deselect });\n                else\n                    deselect();\n                editor.setEmacsMark(null);\n                editor.session.$emacsMarkRing = marks.concat(deselectedMarks.reverse());\n            }, 0);\n        },\n        readOnly: true\n    },\n    keyboardQuit: function (editor) {\n        editor.selection.clearSelection();\n        editor.setEmacsMark(null);\n        editor.keyBinding.$data.count = null;\n    },\n    focusCommandLine: function (editor, arg) {\n        if (editor.showCommandLine)\n            editor.showCommandLine(arg);\n    }\n});\nexports.handler.addCommands(iSearchCommandModule.iSearchStartCommands);\nvar commands = exports.handler.commands;\ncommands.yank.isYank = true;\ncommands.yankRotate.isYank = true;\nexports.killRing = {\n    $data: [],\n    add: function (str) {\n        str && this.$data.push(str);\n        if (this.$data.length > 30)\n            this.$data.shift();\n    },\n    append: function (str) {\n        var idx = this.$data.length - 1;\n        var text = this.$data[idx] || \"\";\n        if (str)\n            text += str;\n        if (text)\n            this.$data[idx] = text;\n    },\n    get: function (n) {\n        n = n || 1;\n        return this.$data.slice(this.$data.length - n, this.$data.length).reverse().join('\\n');\n    },\n    pop: function () {\n        if (this.$data.length > 1)\n            this.$data.pop();\n        return this.get();\n    },\n    rotate: function () {\n        this.$data.unshift(this.$data.pop());\n        return this.get();\n    }\n};\n\n});                (function() {\n                    ace.require([\"ace/keyboard/emacs\"], function(m) {\n                        if ( true && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            \n\n//# sourceURL=webpack://robot-karol-4/./node_modules/ace-builds/src-noconflict/keybinding-emacs.js?");

/***/ })

}]);