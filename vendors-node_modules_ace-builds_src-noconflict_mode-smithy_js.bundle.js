/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkrobot_karol_4"] = self["webpackChunkrobot_karol_4"] || []).push([["vendors-node_modules_ace-builds_src-noconflict_mode-smithy_js"],{

/***/ "./node_modules/ace-builds/src-noconflict/mode-smithy.js":
/*!***************************************************************!*\
  !*** ./node_modules/ace-builds/src-noconflict/mode-smithy.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nace.define(\"ace/mode/smithy_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module){/* This file was autogenerated from https://raw.githubusercontent.com/awslabs/smithy-vscode/master/syntaxes/smithy.tmLanguage (uuid: ) */\n\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\nvar SmithyHighlightRules = function () {\n    this.$rules = {\n        start: [{\n                include: \"#comment\"\n            }, {\n                token: [\n                    \"meta.keyword.statement.smithy\",\n                    \"variable.other.smithy\",\n                    \"text\",\n                    \"keyword.operator.smithy\"\n                ],\n                regex: /^(\\$)(\\s+.+)(\\s*)(=)/\n            }, {\n                token: [\n                    \"keyword.statement.smithy\",\n                    \"text\",\n                    \"entity.name.type.namespace.smithy\"\n                ],\n                regex: /^(namespace)(\\s+)([A-Z-a-z0-9_\\.#$-]+)/\n            }, {\n                token: [\n                    \"keyword.statement.smithy\",\n                    \"text\",\n                    \"keyword.statement.smithy\",\n                    \"text\",\n                    \"entity.name.type.smithy\"\n                ],\n                regex: /^(use)(\\s+)(shape|trait)(\\s+)([A-Z-a-z0-9_\\.#$-]+)\\b/\n            }, {\n                token: [\n                    \"keyword.statement.smithy\",\n                    \"variable.other.smithy\",\n                    \"text\",\n                    \"keyword.operator.smithy\"\n                ],\n                regex: /^(metadata)(\\s+.+)(\\s*)(=)/\n            }, {\n                token: [\n                    \"keyword.statement.smithy\",\n                    \"text\",\n                    \"entity.name.type.smithy\"\n                ],\n                regex: /^(apply|byte|short|integer|long|float|double|bigInteger|bigDecimal|boolean|blob|string|timestamp|service|resource|trait|list|map|set|structure|union|document)(\\s+)([A-Z-a-z0-9_\\.#$-]+)\\b/\n            }, {\n                token: [\n                    \"keyword.operator.smithy\",\n                    \"text\",\n                    \"entity.name.type.smithy\",\n                    \"text\",\n                    \"text\",\n                    \"support.function.smithy\",\n                    \"text\",\n                    \"text\",\n                    \"support.function.smithy\"\n                ],\n                regex: /^(operation)(\\s+)([A-Z-a-z0-9_\\.#$-]+)(\\(.*\\))(?:(\\s*)(->)(\\s*[A-Z-a-z0-9_\\.#$-]+))?(?:(\\s+)(errors))?/\n            }, {\n                include: \"#trait\"\n            }, {\n                token: [\n                    \"support.type.property-name.smithy\",\n                    \"punctuation.separator.dictionary.pair.smithy\"\n                ],\n                regex: /([A-Z-a-z0-9_\\.#$-]+)(:)/\n            }, {\n                include: \"#value\"\n            }, {\n                token: \"keyword.other.smithy\",\n                regex: /\\->/\n            }],\n        \"#comment\": [{\n                include: \"#doc_comment\"\n            }, {\n                include: \"#line_comment\"\n            }],\n        \"#doc_comment\": [{\n                token: \"comment.block.documentation.smithy\",\n                regex: /\\/\\/\\/.*/\n            }],\n        \"#line_comment\": [{\n                token: \"comment.line.double-slash.smithy\",\n                regex: /\\/\\/.*/\n            }],\n        \"#trait\": [{\n                token: [\n                    \"punctuation.definition.annotation.smithy\",\n                    \"storage.type.annotation.smithy\"\n                ],\n                regex: /(@)([0-9a-zA-Z\\.#-]+)/\n            }, {\n                token: [\n                    \"punctuation.definition.annotation.smithy\",\n                    \"punctuation.definition.object.end.smithy\",\n                    \"meta.structure.smithy\"\n                ],\n                regex: /(@)([0-9a-zA-Z\\.#-]+)(\\()/,\n                push: [{\n                        token: \"punctuation.definition.object.end.smithy\",\n                        regex: /\\)/,\n                        next: \"pop\"\n                    }, {\n                        include: \"#value\"\n                    }, {\n                        include: \"#object_inner\"\n                    }, {\n                        defaultToken: \"meta.structure.smithy\"\n                    }]\n            }],\n        \"#value\": [{\n                include: \"#constant\"\n            }, {\n                include: \"#number\"\n            }, {\n                include: \"#string\"\n            }, {\n                include: \"#array\"\n            }, {\n                include: \"#object\"\n            }],\n        \"#array\": [{\n                token: \"punctuation.definition.array.begin.smithy\",\n                regex: /\\[/,\n                push: [{\n                        token: \"punctuation.definition.array.end.smithy\",\n                        regex: /\\]/,\n                        next: \"pop\"\n                    }, {\n                        include: \"#comment\"\n                    }, {\n                        include: \"#value\"\n                    }, {\n                        token: \"punctuation.separator.array.smithy\",\n                        regex: /,/\n                    }, {\n                        token: \"invalid.illegal.expected-array-separator.smithy\",\n                        regex: /[^\\s\\]]/\n                    }, {\n                        defaultToken: \"meta.structure.array.smithy\"\n                    }]\n            }],\n        \"#constant\": [{\n                token: \"constant.language.smithy\",\n                regex: /\\b(?:true|false|null)\\b/\n            }],\n        \"#number\": [{\n                token: \"constant.numeric.smithy\",\n                regex: /-?(?:0|[1-9]\\d*)(?:(?:\\.\\d+)?(?:[eE][+-]?\\d+)?)?/\n            }],\n        \"#object\": [{\n                token: \"punctuation.definition.dictionary.begin.smithy\",\n                regex: /\\{/,\n                push: [{\n                        token: \"punctuation.definition.dictionary.end.smithy\",\n                        regex: /\\}/,\n                        next: \"pop\"\n                    }, {\n                        include: \"#trait\"\n                    }, {\n                        include: \"#object_inner\"\n                    }, {\n                        defaultToken: \"meta.structure.dictionary.smithy\"\n                    }]\n            }],\n        \"#object_inner\": [{\n                include: \"#comment\"\n            }, {\n                include: \"#string_key\"\n            }, {\n                token: \"punctuation.separator.dictionary.key-value.smithy\",\n                regex: /:/,\n                push: [{\n                        token: \"punctuation.separator.dictionary.pair.smithy\",\n                        regex: /,|(?=\\})/,\n                        next: \"pop\"\n                    }, {\n                        include: \"#value\"\n                    }, {\n                        token: \"invalid.illegal.expected-dictionary-separator.smithy\",\n                        regex: /[^\\s,]/\n                    }, {\n                        defaultToken: \"meta.structure.dictionary.value.smithy\"\n                    }]\n            }, {\n                token: \"invalid.illegal.expected-dictionary-separator.smithy\",\n                regex: /[^\\s\\}]/\n            }],\n        \"#string_key\": [{\n                include: \"#identifier_key\"\n            }, {\n                include: \"#dquote_key\"\n            }, {\n                include: \"#squote_key\"\n            }],\n        \"#identifier_key\": [{\n                token: \"support.type.property-name.smithy\",\n                regex: /[A-Z-a-z0-9_\\.#$-]+/\n            }],\n        \"#dquote_key\": [{\n                include: \"#dquote\"\n            }],\n        \"#squote_key\": [{\n                include: \"#squote\"\n            }],\n        \"#string\": [{\n                include: \"#textblock\"\n            }, {\n                include: \"#dquote\"\n            }, {\n                include: \"#squote\"\n            }, {\n                include: \"#identifier\"\n            }],\n        \"#textblock\": [{\n                token: \"punctuation.definition.string.begin.smithy\",\n                regex: /\"\"\"/,\n                push: [{\n                        token: \"punctuation.definition.string.end.smithy\",\n                        regex: /\"\"\"/,\n                        next: \"pop\"\n                    }, {\n                        token: \"constant.character.escape.smithy\",\n                        regex: /\\\\./\n                    }, {\n                        defaultToken: \"string.quoted.double.smithy\"\n                    }]\n            }],\n        \"#dquote\": [{\n                token: \"punctuation.definition.string.begin.smithy\",\n                regex: /\"/,\n                push: [{\n                        token: \"punctuation.definition.string.end.smithy\",\n                        regex: /\"/,\n                        next: \"pop\"\n                    }, {\n                        token: \"constant.character.escape.smithy\",\n                        regex: /\\\\./\n                    }, {\n                        defaultToken: \"string.quoted.double.smithy\"\n                    }]\n            }],\n        \"#squote\": [{\n                token: \"punctuation.definition.string.begin.smithy\",\n                regex: /'/,\n                push: [{\n                        token: \"punctuation.definition.string.end.smithy\",\n                        regex: /'/,\n                        next: \"pop\"\n                    }, {\n                        token: \"constant.character.escape.smithy\",\n                        regex: /\\\\./\n                    }, {\n                        defaultToken: \"string.quoted.single.smithy\"\n                    }]\n            }],\n        \"#identifier\": [{\n                token: \"storage.type.smithy\",\n                regex: /[A-Z-a-z_][A-Z-a-z0-9_\\.#$-]*/\n            }]\n    };\n    this.normalizeRules();\n};\nSmithyHighlightRules.metaData = {\n    name: \"Smithy\",\n    fileTypes: [\"smithy\"],\n    scopeName: \"source.smithy\",\n    foldingStartMarker: \"(\\\\{|\\\\[)\\\\s*\",\n    foldingStopMarker: \"\\\\s*(\\\\}|\\\\])\"\n};\noop.inherits(SmithyHighlightRules, TextHighlightRules);\nexports.SmithyHighlightRules = SmithyHighlightRules;\n\n});\n\nace.define(\"ace/mode/matching_brace_outdent\",[\"require\",\"exports\",\"module\",\"ace/range\"], function(require, exports, module){\"use strict\";\nvar Range = require(\"../range\").Range;\nvar MatchingBraceOutdent = function () { };\n(function () {\n    this.checkOutdent = function (line, input) {\n        if (!/^\\s+$/.test(line))\n            return false;\n        return /^\\s*\\}/.test(input);\n    };\n    this.autoOutdent = function (doc, row) {\n        var line = doc.getLine(row);\n        var match = line.match(/^(\\s*\\})/);\n        if (!match)\n            return 0;\n        var column = match[1].length;\n        var openBracePos = doc.findMatchingBracket({ row: row, column: column });\n        if (!openBracePos || openBracePos.row == row)\n            return 0;\n        var indent = this.$getIndent(doc.getLine(openBracePos.row));\n        doc.replace(new Range(row, 0, row, column - 1), indent);\n    };\n    this.$getIndent = function (line) {\n        return line.match(/^\\s*/)[0];\n    };\n}).call(MatchingBraceOutdent.prototype);\nexports.MatchingBraceOutdent = MatchingBraceOutdent;\n\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\nvar FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n        this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n(function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n        var line = session.getLine(row);\n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n        return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                }\n                else if (foldStyle != \"all\")\n                    range = null;\n            }\n            return range;\n        }\n        if (foldStyle === \"markbegin\")\n            return;\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    this.getSectionRange = function (session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                }\n                else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                }\n                else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m)\n                continue;\n            if (m[1])\n                depth--;\n            else\n                depth++;\n            if (!depth)\n                break;\n        }\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/smithy\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/smithy_highlight_rules\",\"ace/mode/matching_brace_outdent\",\"ace/mode/folding/cstyle\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar SmithyHighlightRules = require(\"./smithy_highlight_rules\").SmithyHighlightRules;\nvar MatchingBraceOutdent = require(\"./matching_brace_outdent\").MatchingBraceOutdent;\nvar CStyleFoldMode = require(\"./folding/cstyle\").FoldMode;\nvar Mode = function () {\n    this.HighlightRules = SmithyHighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n    this.$behaviour = this.$defaultBehaviour;\n    this.foldingRules = new CStyleFoldMode();\n};\noop.inherits(Mode, TextMode);\n(function () {\n    this.lineCommentStart = \"//\";\n    this.$quotes = { '\"': '\"' };\n    this.checkOutdent = function (state, line, input) {\n        return this.$outdent.checkOutdent(line, input);\n    };\n    this.autoOutdent = function (state, doc, row) {\n        this.$outdent.autoOutdent(doc, row);\n    };\n    this.$id = \"ace/mode/smithy\";\n}).call(Mode.prototype);\nexports.Mode = Mode;\n\n});                (function() {\n                    ace.require([\"ace/mode/smithy\"], function(m) {\n                        if ( true && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            \n\n//# sourceURL=webpack://robot-karol-4/./node_modules/ace-builds/src-noconflict/mode-smithy.js?");

/***/ })

}]);