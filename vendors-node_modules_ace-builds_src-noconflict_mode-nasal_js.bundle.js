/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkrobot_karol_4"] = self["webpackChunkrobot_karol_4"] || []).push([["vendors-node_modules_ace-builds_src-noconflict_mode-nasal_js"],{

/***/ "./node_modules/ace-builds/src-noconflict/mode-nasal.js":
/*!**************************************************************!*\
  !*** ./node_modules/ace-builds/src-noconflict/mode-nasal.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nace.define(\"ace/mode/nasal_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module){/* ***** BEGIN LICENSE BLOCK *****\n * Distributed under the BSD license:\n *\n * Copyright (c) 2012, Ajax.org B.V.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *     * Redistributions of source code must retain the above copyright\n *       notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n *       notice, this list of conditions and the following disclaimer in the\n *       documentation and/or other materials provided with the distribution.\n *     * Neither the name of Ajax.org B.V. nor the\n *       names of its contributors may be used to endorse or promote products\n *       derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * ***** END LICENSE BLOCK ***** */\n\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\nvar NasalHighlightRules = function () {\n    this.$rules = {\n        start: [{\n                token: \"constant.other.allcaps.nasal\",\n                regex: /\\b[[:upper:]_][[:upper:][:digit:]_]*\\b(?![\\.\\(\\'\\\"])/,\n                comment: \"Match identifiers in ALL_CAPS as constants, except when followed by `.`, `(`, `'`, or `\\\"`.\"\n            }, {\n                todo: {\n                    token: [\n                        \"support.class.nasal\",\n                        \"meta.function.nasal\",\n                        \"entity.name.function.nasal\",\n                        \"meta.function.nasal\",\n                        \"keyword.operator.nasal\",\n                        \"meta.function.nasal\",\n                        \"storage.type.function.nasal\",\n                        \"meta.function.nasal\",\n                        \"punctuation.definition.parameters.begin.nasal\"\n                    ],\n                    regex: /([a-zA-Z_?.$][\\w?.$]*)(\\.)([a-zA-Z_?.$][\\w?.$]*)(\\s*)(=)(\\s*)(func)(\\s*)(\\()/,\n                    push: [{\n                            token: \"punctuation.definition.parameters.end.nasal\",\n                            regex: /\\)/,\n                            next: \"pop\"\n                        }, {\n                            include: \"$self\"\n                        }, {\n                            token: \"variable.parameter.nasal\",\n                            regex: /\\w/\n                        }, {\n                            defaultToken: \"meta.function.nasal\"\n                        }]\n                },\n                comment: \"match stuff like: Sound.play = func() { … }\"\n            }, {\n                todo: {\n                    token: [\n                        \"entity.name.function.nasal\",\n                        \"meta.function.nasal\",\n                        \"keyword.operator.nasal\",\n                        \"meta.function.nasal\",\n                        \"storage.type.function.nasal\",\n                        \"meta.function.nasal\",\n                        \"punctuation.definition.parameters.begin.nasal\"\n                    ],\n                    regex: /([a-zA-Z_?$][\\w?$]*)(\\s*)(=)(\\s*)(func)(\\s*)(\\()/,\n                    push: [{\n                            token: \"punctuation.definition.parameters.end.nasal\",\n                            regex: /\\)/,\n                            next: \"pop\"\n                        }, {\n                            include: \"$self\"\n                        }, {\n                            token: \"variable.parameter.nasal\",\n                            regex: /\\w/\n                        }, {\n                            defaultToken: \"meta.function.nasal\"\n                        }]\n                },\n                comment: \"match stuff like: play = func() { … }\"\n            }, {\n                todo: {\n                    token: [\n                        \"entity.name.function.nasal\",\n                        \"meta.function.nasal\",\n                        \"keyword.operator.nasal\",\n                        \"meta.function.nasal\",\n                        \"storage.type.function.nasal\",\n                        \"meta.function.nasal\",\n                        \"punctuation.definition.parameters.begin.nasal\"\n                    ],\n                    regex: /([a-zA-Z_?$][\\w?$]*)(\\s*)(=)(\\s*\\(\\s*)(func)(\\s*)(\\()/,\n                    push: [{\n                            token: \"punctuation.definition.parameters.end.nasal\",\n                            regex: /\\)/,\n                            next: \"pop\"\n                        }, {\n                            include: \"$self\"\n                        }, {\n                            token: \"variable.parameter.nasal\",\n                            regex: /\\w/\n                        }, {\n                            defaultToken: \"meta.function.nasal\"\n                        }]\n                },\n                comment: \"match stuff like: play = (func() { … }\"\n            }, {\n                todo: {\n                    token: [\n                        \"entity.name.function.nasal\",\n                        \"meta.function.hash.nasal\",\n                        \"storage.type.function.nasal\",\n                        \"meta.function.hash.nasal\",\n                        \"punctuation.definition.parameters.begin.nasal\"\n                    ],\n                    regex: /\\b([a-zA-Z_?.$][\\w?.$]*)(\\s*:\\s*\\b)(func)(\\s*)(\\()/,\n                    push: [{\n                            token: \"punctuation.definition.parameters.end.nasal\",\n                            regex: /\\)/,\n                            next: \"pop\"\n                        }, {\n                            include: \"$self\"\n                        }, {\n                            token: \"variable.parameter.nasal\",\n                            regex: /\\w/\n                        }, {\n                            defaultToken: \"meta.function.hash.nasal\"\n                        }]\n                },\n                comment: \"match stuff like: foobar: func() { … }\"\n            }, {\n                todo: {\n                    token: [\n                        \"storage.type.function.nasal\",\n                        \"meta.function.nasal\",\n                        \"punctuation.definition.parameters.begin.nasal\"\n                    ],\n                    regex: /\\b(func)(\\s*)(\\()/,\n                    push: [{\n                            token: \"punctuation.definition.parameters.end.nasal\",\n                            regex: /\\)/,\n                            next: \"pop\"\n                        }, {\n                            include: \"$self\"\n                        }, {\n                            token: \"variable.parameter.nasal\",\n                            regex: /\\w/\n                        }, {\n                            defaultToken: \"meta.function.nasal\"\n                        }]\n                },\n                comment: \"match stuff like: func() { … }\"\n            }, {\n                token: [\n                    \"keyword.operator.new.nasal\",\n                    \"meta.class.instance.constructor\",\n                    \"entity.name.type.instance.nasal\"\n                ],\n                regex: /(new)(\\s+)(\\w+(?:\\.\\w*)?)/\n            }, {\n                token: \"keyword.control.nasal\",\n                regex: /\\b(?:if|else|elsif|while|for|foreach|forindex)\\b/\n            }, {\n                token: \"keyword.control.nasal\",\n                regex: /\\b(?:break(?:\\s+[A-Z]{2,16})?(?=\\s*(?:;|\\}))|continue(?:\\s+[A-Z]{2,16})?(?=\\s*(?:;|\\}))|[A-Z]{2,16}(?=\\s*;(?:[^\\)#;]*?;){0,2}[^\\)#;]*?\\)))\\b/\n            }, {\n                token: \"keyword.operator.nasal\",\n                regex: /!|\\*|\\-|\\+|~|\\/|==|=|!=|<=|>=|<|>|!|\\?|\\:|\\*=|\\/=|\\+=|\\-=|~=|\\.\\.\\.|\\b(?:and|or)\\b/\n            }, {\n                token: \"variable.language.nasal\",\n                regex: /\\b(?:me|arg|parents|obj)\\b/\n            }, {\n                token: \"storage.type.nasal\",\n                regex: /\\b(?:return|var)\\b/\n            }, {\n                token: \"constant.language.nil.nasal\",\n                regex: /\\bnil\\b/\n            }, {\n                token: \"punctuation.definition.string.begin.nasal\",\n                regex: /'/,\n                push: [{\n                        token: \"punctuation.definition.string.end.nasal\",\n                        regex: /'/,\n                        next: \"pop\"\n                    }, {\n                        token: \"constant.character.escape.nasal\",\n                        regex: /\\\\'/\n                    }, {\n                        defaultToken: \"string.quoted.single.nasal\"\n                    }],\n                comment: \"Single quoted strings\"\n            }, {\n                token: \"punctuation.definition.string.begin.nasal\",\n                regex: /\"/,\n                push: [{\n                        token: \"punctuation.definition.string.end.nasal\",\n                        regex: /\"/,\n                        next: \"pop\"\n                    }, {\n                        token: \"constant.character.escape.nasal\",\n                        regex: /\\\\(?:x[\\da-fA-F]{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|r|n|t|\\\\|\")/\n                    }, {\n                        token: \"constant.character.escape.nasal\",\n                        regex: /%(?:%|(?:\\d+\\$)?[+-]?(?:[ 0]|'.{1})?-?\\d*(?:\\.\\d+)?[bcdeEufFgGosxX])/\n                    }, {\n                        defaultToken: \"string.quoted.double.nasal\"\n                    }],\n                comment: \"Double quoted strings\"\n            }, {\n                token: [\n                    \"punctuation.definition.string.begin.nasal\",\n                    \"string.other\",\n                    \"punctuation.definition.string.end.nasal\"\n                ],\n                regex: /(`)(.)(`)/,\n                comment: \"Single-byte ASCII character constants\"\n            }, {\n                token: [\n                    \"punctuation.definition.comment.nasal\",\n                    \"comment.line.hash.nasal\"\n                ],\n                regex: /(#)(.*$)/,\n                comment: \"Comments\"\n            }, {\n                token: \"constant.numeric.nasal\",\n                regex: /(?:(?:\\b[0-9]+)?\\.)?\\b[0-9]+(?:[eE][-+]?[0-9]+)?\\b/,\n                comment: \"Integers, floats, and scientific format\"\n            }, {\n                token: \"constant.numeric.nasal\",\n                regex: /0[x|X][0-9a-fA-F]+/,\n                comment: \"Hex codes\"\n            }, {\n                token: \"punctuation.terminator.statement.nasal\",\n                regex: /\\;/\n            }, {\n                token: [\n                    \"punctuation.section.scope.begin.nasal\",\n                    \"punctuation.section.scope.end.nasal\"\n                ],\n                regex: /(\\[)(\\])/\n            }, {\n                todo: {\n                    token: \"punctuation.section.scope.begin.nasal\",\n                    regex: /\\{/,\n                    push: [{\n                            token: \"punctuation.section.scope.end.nasal\",\n                            regex: /\\}/,\n                            next: \"pop\"\n                        }, {\n                            include: \"$self\"\n                        }]\n                }\n            }, {\n                todo: {\n                    token: \"punctuation.section.scope.begin.nasal\",\n                    regex: /\\(/,\n                    push: [{\n                            token: \"punctuation.section.scope.end.nasal\",\n                            regex: /\\)/,\n                            next: \"pop\"\n                        }, {\n                            include: \"$self\"\n                        }]\n                }\n            }, {\n                token: \"invalid.illegal\",\n                regex: /%|\\$|@|&|\\^|\\||\\\\|`/,\n                comment: \"Illegal characters\"\n            }, {\n                todo: {\n                    comment: \"TODO: Symbols in hash keys\"\n                },\n                comment: \"TODO: Symbols in hash keys\"\n            }, {\n                token: \"variable.language.nasal\",\n                regex: /\\b(?:append|bind|call|caller|chr|closure|cmp|compile|contains|delete|die|find|ghosttype|id|int|keys|left|num|pop|right|setsize|size|sort|split|sprintf|streq|substr|subvec|typeof|readline)\\b/,\n                comment: \"Core functions\"\n            }, {\n                token: \"variable.language.nasal\",\n                regex: /\\b(?:abort|abs|aircraftToCart|addcommand|airportinfo|airwaysRoute|assert|carttogeod|cmdarg|courseAndDistance|createDiscontinuity|createViaTo|createWP|createWPFrom|defined|directory|fgcommand|findAirportsByICAO|findAirportsWithinRange|findFixesByID|findNavaidByFrequency|findNavaidsByFrequency|findNavaidsByID|findNavaidsWithinRange|finddata|flightplan|geodinfo|geodtocart|get_cart_ground_intersection|getprop|greatCircleMove|interpolate|isa|logprint|magvar|maketimer|start|stop|restart|maketimestamp|md5|navinfo|parse_markdown|parsexml|print|printf|printlog|rand|registerFlightPlanDelegate|removecommand|removelistener|resolvepath|setlistener|_setlistener|setprop|srand|systime|thisfunc|tileIndex|tilePath|values)\\b/,\n                comment: \"FG ext core functions\"\n            }, {\n                token: \"variable.language.nasal\",\n                regex: /\\b(?:singleShot|isRunning|simulatedTime)\\b/,\n                comment: \"FG ext core functions\"\n            }, {\n                token: \"constant.language.nasal\",\n                regex: /\\b(?:D2R|FPS2KT|FT2M|GAL2L|IN2M|KG2LB|KT2FPS|KT2MPS|LG2GAL|LB2KG|M2FT|M2IN|M2NM|MPS2KT|NM2M|R2D)\\b/,\n                comment: \"FG ext core constants\"\n            }, {\n                token: \"support.function.nasal\",\n                regex: /\\b(?:addChild|addChildren|alias|clearValue|equals|getAliasTarget|getAttribute|getBoolValue|getChild|getChildren|getIndex|getName|getNode|getParent|getPath|getType|getValue|getValues|initNode|remove|removeAllChildren|removeChild|removeChildren|setAttribute|setBoolValue|setDoubleValue|setIntValue|setValue|setValues|unalias|compileCondition|condition|copy|dump|getNode|nodeList|runBinding|setAll|wrap|wrapNode)\\b/,\n                comment: \"FG func props\"\n            }, {\n                token: \"support.class.nasal\",\n                regex: /\\bNode\\b/,\n                comment: \"FG node class\"\n            }, {\n                token: \"variable.language.nasal\",\n                regex: /\\b(?:props|globals)\\b/,\n                comment: \"FG func props variables\"\n            }, {\n                todo: {\n                    token: [\n                        \"support.function.nasal\",\n                        \"punctuation.definition.arguments.begin.nasal\"\n                    ],\n                    regex: /\\b([a-zA-Z_?$][\\w?$]*)(\\()/,\n                    push: [{\n                            token: \"punctuation.definition.arguments.end.nasal\",\n                            regex: /\\)/,\n                            next: \"pop\"\n                        }, {\n                            include: \"$self\"\n                        }, {\n                            defaultToken: \"meta.function-call.nasal\"\n                        }]\n                },\n                comment: \"function call\"\n            }]\n    };\n    this.normalizeRules();\n};\nNasalHighlightRules.metaData = {\n    fileTypes: [\"nas\"],\n    name: \"Nasal\",\n    scopeName: \"source.nasal\"\n};\noop.inherits(NasalHighlightRules, TextHighlightRules);\nexports.NasalHighlightRules = NasalHighlightRules;\n\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\nvar FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n        this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n(function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n        var line = session.getLine(row);\n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n        return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                }\n                else if (foldStyle != \"all\")\n                    range = null;\n            }\n            return range;\n        }\n        if (foldStyle === \"markbegin\")\n            return;\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    this.getSectionRange = function (session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                }\n                else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                }\n                else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m)\n                continue;\n            if (m[1])\n                depth--;\n            else\n                depth++;\n            if (!depth)\n                break;\n        }\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/nasal\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/nasal_highlight_rules\",\"ace/mode/folding/cstyle\"], function(require, exports, module){/* ***** BEGIN LICENSE BLOCK *****\n * Distributed under the BSD license:\n *\n * Copyright (c) 2012, Ajax.org B.V.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *     * Redistributions of source code must retain the above copyright\n *       notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n *       notice, this list of conditions and the following disclaimer in the\n *       documentation and/or other materials provided with the distribution.\n *     * Neither the name of Ajax.org B.V. nor the\n *       names of its contributors may be used to endorse or promote products\n *       derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * ***** END LICENSE BLOCK ***** */\n\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar NasalHighlightRules = require(\"./nasal_highlight_rules\").NasalHighlightRules;\nvar FoldMode = require(\"./folding/cstyle\").FoldMode;\nvar Mode = function () {\n    this.HighlightRules = NasalHighlightRules;\n    this.foldingRules = new FoldMode();\n};\noop.inherits(Mode, TextMode);\n(function () {\n    this.$id = \"ace/mode/nasal\";\n}).call(Mode.prototype);\nexports.Mode = Mode;\n\n});                (function() {\n                    ace.require([\"ace/mode/nasal\"], function(m) {\n                        if ( true && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            \n\n//# sourceURL=webpack://robot-karol-4/./node_modules/ace-builds/src-noconflict/mode-nasal.js?");

/***/ })

}]);